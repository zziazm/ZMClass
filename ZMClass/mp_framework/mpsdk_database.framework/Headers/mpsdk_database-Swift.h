// Generated by Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreData;
@import mpsdk_componentinterface;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("mpsdk_database")
@protocol DatabaseCrypto;
@class DatabaseHelper;
@protocol SecurityIncidentService;

/// A Helper class to manage basic database operation
SWIFT_CLASS("_TtC14mpsdk_database14BaseDataHelper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface BaseDataHelper : NSObject
- (nonnull instancetype)initWithDatabaseCrypto:(id <DatabaseCrypto> _Nonnull)databaseCrypto databaseHelper:(DatabaseHelper * _Nonnull)databaseHelper securityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSError;

/// A Helper class to manage card profile table operations
SWIFT_CLASS("_TtC14mpsdk_database21CardProfileDataHelper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CardProfileDataHelper : BaseDataHelper
- (nonnull instancetype)initWithDatabaseCrypto:(id <DatabaseCrypto> _Nonnull)databaseCrypto databaseHelper:(DatabaseHelper * _Nonnull)databaseHelper securityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService OBJC_DESIGNATED_INITIALIZER;
/// Provisions a Card profile. The serialised card profile will be saved into DB for later use
/// @param cardId                unique identifier for the profile
/// @param serializedCardProfile bytes of CardProfile data.
/// @param cardProfileVersion    version of card profile
- (void)saveCardProfileWithCardId:(NSString * _Nonnull)cardId serializedCardProfile:(NSData * _Nonnull)serializedCardProfile cardProfileVersion:(NSString * _Nonnull)cardProfileVersion error:(NSError * _Nullable * _Nullable)error;
/// Change the profile saved against a card Id.  possible use - re-provision of card
/// @param cardId                unique identifier for the profile
/// @param serializedCardProfile bytes of CardProfile data.
/// @param cardProfileVersion    version of card profile
- (void)updateCardProfileWithCardId:(NSString * _Nonnull)cardId serializedCardProfile:(NSData * _Nonnull)serializedCardProfile cardProfileVersion:(NSString * _Nonnull)cardProfileVersion;
/// set current state of card.  The caller is responsible to identify the card state based on
/// the returned integer value
/// @param cardId unique identifier for the profile
/// @return integer value for current state of the card.
- (int32_t)getCardStateByCardIdWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// This method retrieves version of a card profile.
/// @param cardId card identifier for which card profile version to be read.
/// @return Version of given card id.
- (NSString * _Nullable)getCardProfileVersionByCardIdWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// set current state of card.  The caller is responsible to identify the card state based on
/// the returned integer value
/// @param cardId unique identifier for the profile
/// @param state  identifier for current card state
- (void)saveCardStateByCardIdWithCardId:(NSString * _Nonnull)cardId state:(int32_t)state;
/// Get the list of cards identifier
/// @return list of all card Ids saved in the database.  Empty list is returned if no profiles
/// are provisioned.
- (NSArray<NSString *> * _Nonnull)getAllCardIds SWIFT_WARN_UNUSED_RESULT;
/// Wipes all the data including the profile and SUKâ€™s stored against this card id
/// @param cardId unique identifier for the profile
- (void)wipeCardProfileAndRelatedDataWithCardId:(NSString * _Nonnull)cardId;
/// Rollover the encrypted data of card profile table
/// @param cardProfilesToRollover card profile data
- (void)rolloverCardProfilesWithCardProfilesToRollover:(NSDictionary<NSString *, NSData *> * _Nonnull)cardProfilesToRollover;
/// Delete all Card Profiles.
- (void)wipeAllCardProfiles;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("CardProfileTableData")
@interface CardProfileTableData : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CardProfileTableData (SWIFT_EXTENSION(mpsdk_database))
@property (nonatomic, copy) NSString * _Nullable cardId;
@property (nonatomic, copy) NSData * _Nullable cardProfileData;
@property (nonatomic, copy) NSString * _Nullable cardProfileVersion;
@property (nonatomic, copy) NSString * _Nullable cardState;
@property (nonatomic, copy) NSData * _Nullable checksum;
@end


/// Represent event in which database is getting upgrade
SWIFT_PROTOCOL("_TtP14mpsdk_database21DatabaseEventListener_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol DatabaseEventListener
/// On create event callback
- (void)onCreate;
/// On update event callback
/// @param oldVersion old version of database
/// @param newVersion new version of database
- (void)onUpdateWithOldVersion:(NSInteger)oldVersion newVersion:(NSInteger)newVersion;
@end


/// A Helper class to manage database schema and its version
SWIFT_CLASS("_TtC14mpsdk_database14DatabaseHelper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface DatabaseHelper : NSObject
- (nonnull instancetype)initWithDatabaseEventListener:(id <DatabaseEventListener> _Nonnull)databaseEventListener OBJC_DESIGNATED_INITIALIZER;
///
- (void)onCreate;
///
- (void)onUpgradeWithOldVersion:(NSInteger)oldVersion newVersion:(NSInteger)newVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14mpsdk_database13DatabaseUtils") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface DatabaseUtils : NSObject
/// Clear byte array.
/// @param buffer the buffer
+ (NSString * _Nonnull)byteArrayToHexString:(NSArray<NSNumber *> * _Nonnull)buffer SWIFT_WARN_UNUSED_RESULT;
/// @param hexString
/// @return
+ (NSArray<NSNumber *> * _Nonnull)byteArrayFromHexString:(NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
/// Concatenates the list of byte array from given list
/// @param arrays list of byte array to be concatenate
/// @return concatenated array
+ (NSArray<NSNumber *> * _Nonnull)concatenateArrays:(NSArray<NSArray<NSNumber *> *> * _Nonnull)arrays SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSNumber *> * _Nonnull)arrayCopyWithInput:(NSArray<NSNumber *> * _Nonnull)input SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("EnvironmentContainer")
@interface EnvironmentContainer : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface EnvironmentContainer (SWIFT_EXTENSION(mpsdk_database))
@property (nonatomic, copy) NSData * _Nullable remoteManagementUrl;
@end


/// A Helper class to manage environment container table operations
SWIFT_CLASS("_TtC14mpsdk_database21EnvironmentDataHelper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface EnvironmentDataHelper : BaseDataHelper
- (nonnull instancetype)initWithDatabaseCrypto:(id <DatabaseCrypto> _Nonnull)databaseCrypto databaseHelper:(DatabaseHelper * _Nonnull)databaseHelper securityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService OBJC_DESIGNATED_INITIALIZER;
/// Save the URL required for communication with the CMS-D
/// @param remoteManagementUrl complete URL to the server
- (void)saveRemoteManagementUrlWithRemoteManagementUrl:(NSString * _Nonnull)remoteManagementUrl;
/// Retrieve RemoteManagement Url from database.
- (NSString * _Nullable)getRemoteManagementUrlAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Delete all data from environment container.
- (void)wipeEnvironmentContainer;
@end

@class RMKekEncryptedData;

/// A Helper class to manage mobile keys table operations
SWIFT_CLASS("_TtC14mpsdk_database16MobileKeysHelper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MobileKeysHelper : BaseDataHelper
- (nonnull instancetype)initWithDatabaseCrypto:(id <DatabaseCrypto> _Nonnull)databaseCrypto databaseHelper:(DatabaseHelper * _Nonnull)databaseHelper securityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService OBJC_DESIGNATED_INITIALIZER;
/// Retrieve mobile key set id from given card id.
/// @return keyset id assigned to this application
- (NSString * _Nullable)getMobileKeySetId SWIFT_WARN_UNUSED_RESULT;
/// Get the key type from given keyset id
/// @param keySetId unique identifier for keyset
/// @return list of key types available in this keyset
- (NSArray<NSString *> * _Nonnull)getMobileKeyTypesInKeySetWithKeySetId:(NSString * _Nonnull)keySetId SWIFT_WARN_UNUSED_RESULT;
/// Insert or update the mobile key
/// <p>
/// Only one key of each type can be saved in a key set.  Attempting to save key of same type
/// will overwrite the earlier value.
/// @param keySetId           unique identifier for keyset
/// @param keyType            identifier for type of key
/// @param rmKekEncryptedData The key data that is used in crypto operations. Encrypted by
/// RM_KEK
- (BOOL)saveEncryptedMobileKeyWithKeySetId:(NSString * _Nonnull)keySetId keyType:(NSString * _Nonnull)keyType rmKekEncryptedData:(RMKekEncryptedData * _Nonnull)rmKekEncryptedData error:(NSError * _Nullable * _Nullable)error;
/// Wipes all mobile keys for a given Key Set Id
/// @param keySetId The Key Set Id to wipe mobile keys for
- (void)wipeMobileKeysForKeySetIdWithKeySetId:(NSString * _Nonnull)keySetId;
/// Rolls over the set of keys
/// <p/>
/// Only one key of each type can be saved in a key set.  Attempting to save key of same type
/// will overwrite the earlier value.
/// @param keySetId       unique identifier for keyset
/// @param dataToRollover hash map of [identifier for type of key; The key data that is used
/// in crypto operations, protected by RM_KEK]
- (BOOL)rolloverMobileKeysWithKeySetId:(NSString * _Nonnull)keySetId dataToRollover:(NSDictionary<NSString *, RMKekEncryptedData *> * _Nonnull)dataToRollover error:(NSError * _Nullable * _Nullable)error;
/// Delete all mobile keys.
- (void)wipeAllMobileKeys;
@end


SWIFT_CLASS_NAMED("MobileKeysTableData")
@interface MobileKeysTableData : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface MobileKeysTableData (SWIFT_EXTENSION(mpsdk_database))
@property (nonatomic, copy) NSData * _Nullable checksum;
@property (nonatomic, copy) NSString * _Nullable mobileKeysetId;
@property (nonatomic, copy) NSString * _Nullable mobileKeyType;
@property (nonatomic, copy) NSData * _Nullable mobileKeyValue;
@end


SWIFT_CLASS("_TtC14mpsdk_database15TamperProcessor") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface TamperProcessor : NSObject <SecurityIncident>
- (nonnull instancetype)initWithDatabaseCrypto:(id <DatabaseCrypto> _Nonnull)databaseCrypto securityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService OBJC_DESIGNATED_INITIALIZER;
/// Check whether tamper detection service is active or not
/// @return Return true if service is available else return false
- (BOOL)isTamperDetectionOn SWIFT_WARN_UNUSED_RESULT;
/// Verify the whether database is tampered or not
/// @param tableName       Database table name for which tamper is verify
/// @param checksum        Stored checksum array
/// @param unprotectedData calculated mac array
- (BOOL)checkTamperDetectionWithTableName:(NSString * _Nonnull)tableName checksum:(NSArray<NSNumber *> * _Nonnull)checksum unprotectedData:(NSArray<NSNumber *> * _Nonnull)unprotectedData SWIFT_WARN_UNUSED_RESULT;
/// Notify to wallet for database tamper detection
- (void)notifyTamperDetection;
///
- (SecurityIncidentReasonCode)getReasonCode SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)getReason SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("TransactionCredentialTableData")
@interface TransactionCredentialTableData : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface TransactionCredentialTableData (SWIFT_EXTENSION(mpsdk_database))
@property (nonatomic) int32_t atc;
@property (nonatomic, copy) NSString * _Nullable cardId;
@property (nonatomic, copy) NSData * _Nullable checksum;
@property (nonatomic, copy) NSString * _Nullable credentialVersion;
@property (nonatomic, copy) NSData * _Nullable serializedTransactionCredential;
@property (nonatomic, copy) NSString * _Nullable timeStamp;
@property (nonatomic, copy) NSString * _Nullable transactionCredentialId;
@property (nonatomic) int32_t transactionCredentialStatus;
@end

@protocol TransactionCredentialInfo;

/// A Helper class to manage transaction credentials table operations
SWIFT_CLASS("_TtC14mpsdk_database28TransactionCredentialsHelper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface TransactionCredentialsHelper : BaseDataHelper
- (nonnull instancetype)initWithDatabaseCrypto:(id <DatabaseCrypto> _Nonnull)databaseCrypto databaseHelper:(DatabaseHelper * _Nonnull)databaseHelper securityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService OBJC_DESIGNATED_INITIALIZER;
/// get serialised data for the SUK matching the suk id and card id
/// @param cardId unique identifier for the profile
/// @param keyId  unique identifier of SUK
/// @return serialized single use key if saved earlier.  Return null if no information found
- (NSData * _Nullable)getTransactionCredentialForCardIdWithCardId:(NSString * _Nonnull)cardId keyId:(NSString * _Nonnull)keyId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Update the statue of specified SUK.
/// @param cardId unique identifier for the profile
/// @param atc    unique ATC of the suk for the given card
/// @param status current status of the SUK
/// @param timeStamp current time stamp for the transaction credentials
- (void)updateTransactionCredentialStatusForCardIdWithCardId:(NSString * _Nonnull)cardId atc:(int32_t)atc status:(int32_t)status timeStamp:(NSString * _Nonnull)timeStamp;
/// Retrieve all single use key of given card id.
/// @param cardId unique identifier for the profile
/// @return List of single use keys Ids for specified card id.
- (NSArray<NSString *> * _Nonnull)getTransactionCredentialIdsForCardIdWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Get the first SUK having the mentioned status for specified card
/// @return return null if there is no SUK available for this card that matches the status
- (NSString * _Nullable)getFirstTransactionCredentialIdForCardIdWithStatusWithCardId:(NSString * _Nonnull)cardId status:(int32_t)status SWIFT_WARN_UNUSED_RESULT;
/// get status for the SUK matching the suk id and card id
/// @param cardId unique identifier for the profile
/// @param keyId  unique identifier of SUK
/// @return status as integer.  The caller will need mechanism to identify state based on value
- (int32_t)getTransactionCredentialStatusForCardIdWithCardId:(NSString * _Nonnull)cardId keyId:(NSString * _Nonnull)keyId SWIFT_WARN_UNUSED_RESULT;
/// Wipe transaction credentials for a card and add new transaction credentials.
/// This API is used for a transaction credential replenishment use case.
/// @param cardId                     unique identifier for the profile
/// @param keyIdsToWipe               unique identifiers of SUK to be wiped
/// @param transactionCredentialInfos {@link TransactionCredentialInfo}
- (void)wipeOldAndSaveNewTransactionCredentialsForCardIdWithCardId:(NSString * _Nonnull)cardId keyIdsToWipe:(NSArray<NSString *> * _Nonnull)keyIdsToWipe credentialVersion:(NSString * _Nonnull)credentialVersion transactionCredentialInfos:(NSArray<id <TransactionCredentialInfo>> * _Nonnull)transactionCredentialInfos;
/// Wipe all the transaction credentials specific to card id.
/// @param cardId unique identifier for the profile
- (void)wipeTransactionCredentialsForCardIdWithCardId:(NSString * _Nonnull)cardId;
/// Rolls over the transaction credentials
/// @param transactionCredentialsToRollover transaction credentials to rollover key=cardId,
/// value
/// is hash map with
/// key=transactionCredentialId and value serialized
/// credentials
- (void)rolloverTransactionCredentialsWithTransactionCredentialsToRollover:(NSDictionary<NSString *, NSDictionary<NSString *, NSData *> *> * _Nonnull)transactionCredentialsToRollover;
/// Wipe all transaction credential.
- (void)wipeAllTransactionCredential;
/// get timestamp for the SUK matching the suk id and card id
/// @param cardId unique identifier for the profile
/// @param keyId  unique identifier of SUK
/// @return time stamp as string
- (NSString * _Nullable)getTransactionCredentialTimeStampForCardId:(NSString * _Nonnull)forCardId keyId:(NSString * _Nonnull)keyId SWIFT_WARN_UNUSED_RESULT;
@end


/// A Helper class to manage transaction logs table operations
SWIFT_CLASS("_TtC14mpsdk_database21TransactionLogsHelper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface TransactionLogsHelper : BaseDataHelper
/// Wipe a specific log entry from database
/// @param cardId           unique identifier for the profile
/// @param transactionLogId unique identifier for this log
- (void)wipeTransactionLogByIdForCardIdWithCardId:(NSString * _Nonnull)cardId transactionLogId:(int32_t)transactionLogId;
/// Wipe all log entries for a card from the database
/// @param cardId unique identifier for the profile
- (void)wipeAllTransactionLogsForCardIdWithCardId:(NSString * _Nonnull)cardId;
/// Retrieves transaction logs ids associated with card.
/// @param cardId unique identifier for the profile
/// @return List of TransactionLog identifiers for this card.
- (NSArray<NSNumber *> * _Nonnull)getTransactionLogIdsForCardIdWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Store serialized transaction log as received from the caller
/// @param cardId                   unique identifier for the profile
/// @param transactionId            unique identifier for this log
/// @param serializedTransactionLog the transaction log to be stored in the database
- (void)saveTransactionLogForCardIdWithCardId:(NSString * _Nonnull)cardId transactionId:(NSString * _Nonnull)transactionId version:(NSString * _Nonnull)version timestamp:(NSString * _Nonnull)timestamp serializedTransactionLog:(NSArray<NSNumber *> * _Nonnull)serializedTransactionLog;
/// Delete all transaction logs.
- (void)wipeAllTransactionLogs;
- (nonnull instancetype)initWithDatabaseCrypto:(id <DatabaseCrypto> _Nonnull)databaseCrypto databaseHelper:(DatabaseHelper * _Nonnull)databaseHelper securityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("TransactionLogsTableData")
@interface TransactionLogsTableData : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface TransactionLogsTableData (SWIFT_EXTENSION(mpsdk_database))
@property (nonatomic, copy) NSString * _Nullable cardId;
@property (nonatomic, copy) NSData * _Nullable checksum;
@property (nonatomic, copy) NSString * _Nullable logVersion;
@property (nonatomic, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSData * _Nullable transactionData;
@property (nonatomic, copy) NSString * _Nullable transactionId;
@property (nonatomic, copy) NSString * _Nullable transactionLogId;
@end

@protocol DatabaseWalletData;

/// A Helper class to manage wallet container table operations
SWIFT_CLASS("_TtC14mpsdk_database16WalletDataHelper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface WalletDataHelper : BaseDataHelper
- (nonnull instancetype)initWithDatabaseCrypto:(id <DatabaseCrypto> _Nonnull)databaseCrypto databaseHelper:(DatabaseHelper * _Nonnull)databaseHelper securityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService OBJC_DESIGNATED_INITIALIZER;
/// Way to allow the wallet to save additional data about the card into the DB.  The serializing
/// and de-serializing of data is walletâ€™s responsibility
/// @param cardId     unique identifier for the profile
/// @param databaseWalletData wallet data.
- (void)saveWalletDataForCardWithCardId:(NSString * _Nonnull)cardId databaseWalletData:(id <DatabaseWalletData> _Nonnull)databaseWalletData;
/// Delete all wallet data.
- (void)wipeAllWalletData;
@end


SWIFT_CLASS_NAMED("WalletTableData")
@interface WalletTableData : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface WalletTableData (SWIFT_EXTENSION(mpsdk_database))
@property (nonatomic, copy) NSString * _Nullable cardId;
@property (nonatomic, copy) NSData * _Nullable checksum;
@property (nonatomic, copy) NSData * _Nullable walletData;
@property (nonatomic, copy) NSString * _Nullable walletDataVersion;
@end

@protocol DatabaseUpgradeHelper;
@protocol KeyDataRollover;
@class NSNumber;

/// Class to manage all the database related operation like :
/// <li>Create Database</li>
/// <li>Insert Records</li>
/// <li>update Records</li>
/// <li>Delete Records</li>
/// Additionally this class also generate key to store sensitive data.
/// <br/>
/// All methods are synchronized, so we are locking the whole object. If two threads try to call the
/// two methods
/// (even different methods), one will wait for another. Because this class holds database helper,
/// there is only one connection to database. Synchronized methods ensures that two threads won't
/// access
/// the same database connection. If two threads holds two database connections (via two instances
/// of
/// database helper) it is up to the sqlite transaction to lock properly.
SWIFT_CLASS("_TtC14mpsdk_database16iOSBasicDataBase") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface iOSBasicDataBase : NSObject <McbpDataBase, DatabaseEventListener>
///
- (id <McbpDataBase> _Nonnull)withDatabaseCrypto:(id <DatabaseCrypto> _Nonnull)databaseCrypto SWIFT_WARN_UNUSED_RESULT;
///
- (id <McbpDataBase> _Nonnull)withMaxTransactionLogsCount:(int32_t)count SWIFT_WARN_UNUSED_RESULT;
///
- (id <McbpDataBase> _Nonnull)usingOptionalDatabaseUpgradeHelper:(id <DatabaseUpgradeHelper> _Nullable)databaseUpgradeHelper SWIFT_WARN_UNUSED_RESULT;
///
- (id <McbpDataBase> _Nonnull)usingOptionalSecurityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService SWIFT_WARN_UNUSED_RESULT;
/// Initialize the database helper classes
- (id <McbpDataBase> _Nonnull)initialize SWIFT_WARN_UNUSED_RESULT;
/// Provisions a Card profile. The serialised card profile will be saved into DB for later use
/// @param cardId                unique identifier for the profile
/// @param serializedCardProfile bytes of CardProfile data.
/// @param cardProfileVersion    version of card profile
- (void)saveCardProfile:(NSString * _Nonnull)cardId serializedCardProfile:(NSData * _Nonnull)serializedCardProfile cardProfileVersion:(NSString * _Nonnull)cardProfileVersion error:(NSError * _Nullable * _Nullable)error;
/// Change the profile saved against a card Id.  possible use - re-provision of card
/// @param cardId                unique identifier for the profile
/// @param serializedCardProfile bytes of CardProfile data.
/// @param cardProfileVersion    version of card profile
- (void)updateCardProfile:(NSString * _Nonnull)cardId serializedCardProfile:(NSData * _Nonnull)serializedCardProfile cardProfileVersion:(NSString * _Nonnull)cardProfileVersion;
/// Wipes all the data including the profile and SUKâ€™s stored against this card id
/// @param cardId unique identifier for the profile
- (void)wipeCardProfileAndRelatedData:(NSString * _Nonnull)cardId;
/// Way to allow the wallet to save additional data about the card into the DB.  The serializing
/// and de-serializing of data is walletâ€™s responsibility
/// @param cardId     unique identifier for the profile
/// @param databaseWalletData wallet data.
- (void)saveWalletDataForCard:(NSString * _Nonnull)cardId databaseWalletData:(id <DatabaseWalletData> _Nonnull)databaseWalletData;
/// Get the stored wallet data
/// @param cardId unique identifier for the profile
/// @return additional data saved by the wallet.  null, if called before save wallet data.
- (id <DatabaseWalletData> _Nullable)getWalletDataForCard:(NSString * _Nonnull)cardId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
- (void)saveWalletData:(id <DatabaseWalletData> _Nonnull)walletData;
///
- (id <DatabaseWalletData> _Nullable)getWalletData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get the list of cards identifier
/// @return list of all card Ids saved in the database.  Empty list is returned if no profiles
/// are provisioned.
- (NSArray<NSString *> * _Nonnull)getAllCardIds SWIFT_WARN_UNUSED_RESULT;
/// set current state of card.  The caller is responsible to identify the card state based on
/// the returned integer value
/// @param cardId unique identifier for the profile
/// @param state  identifier for current card state
- (void)saveCardStateByCardId:(NSString * _Nonnull)cardId state:(int32_t)state;
/// Get the card profile with given card identifier
/// @param cardId unique identifier for the profile
/// @return serializedCardProfile bytes representing a card profile
- (NSData * _Nullable)getCardProfileByCardId:(NSString * _Nonnull)cardId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// This method retrieves version of a card profile.
/// @param cardId card identifier for which card profile version to be read.
/// @return Version of given card id.
- (NSString * _Nonnull)getCardProfileVersionByCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// set current state of card.  The caller is responsible to identify the card state based on
/// the returned integer value
/// @param cardId unique identifier for the profile
/// @return integer value for current state of the card.
- (int32_t)getCardStateByCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Update the statue of specified SUK.
/// @param cardId unique identifier for the profile
/// @param atc    unique ATC of the suk for the given card
/// @param status current status of the SUK
/// @param timeStamp current time stamp for the transaction credentials
- (void)updateTransactionCredentialStatusForCardId:(NSString * _Nonnull)cardId atc:(int32_t)atc status:(int32_t)status timeStamp:(NSString * _Nonnull)timeStamp;
/// Retrieve all single use key of given card id.
/// @param cardId unique identifier for the profile
/// @return List of single use keys Ids for specified card id.
- (NSArray<NSString *> * _Nonnull)getTransactionCredentialIdsForCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Get the first SUK having the mentioned status for specified card
/// @return return null if there is no SUK available for this card that matches the status
- (NSString * _Nullable)getFirstTransactionCredentialIdForCardIdWithStatus:(NSString * _Nonnull)cardId status:(int32_t)status SWIFT_WARN_UNUSED_RESULT;
/// get serialised data for the SUK matching the suk id and card id
/// @param cardId unique identifier for the profile
/// @param keyId  unique identifier of SUK
/// @return serialized single use key if saved earlier.  Return null if no information found
- (NSData * _Nullable)getTransactionCredentialForCardId:(NSString * _Nonnull)cardId keyId:(NSString * _Nonnull)keyId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// get status for the SUK matching the suk id and card id
/// @param cardId unique identifier for the profile
/// @param keyId  unique identifier of SUK
/// @return status as integer.  The caller will need mechanism to identify state based on value
- (int32_t)getTransactionCredentialStatusForCardId:(NSString * _Nonnull)cardId keyId:(NSString * _Nonnull)keyId SWIFT_WARN_UNUSED_RESULT;
/// Wipe transaction credentials for a card and add new transaction credentials.
/// This API is used for a transaction credential replenishment use case.
/// @param cardId                     unique identifier for the profile
/// @param keyIdsToWipe               unique identifiers of SUK to be wiped
/// @param transactionCredentialInfos {@link TransactionCredentialInfo}
- (void)wipeOldAndSaveNewTransactionCredentialsForCardId:(NSString * _Nonnull)cardId keyIdsToWipe:(NSArray<NSString *> * _Nonnull)keyIdsToWipe credentialVersion:(NSString * _Nonnull)credentialVersion transactionCredentialInfos:(NSArray<id <TransactionCredentialInfo>> * _Nonnull)transactionCredentialInfos;
/// Wipe all the transaction credentials specific to card id.
/// @param cardId unique identifier for the profile
- (void)wipeTransactionCredentialsForCardId:(NSString * _Nonnull)cardId;
/// Insert or update the mobile key
/// <p>
/// Only one key of each type can be saved in a key set.  Attempting to save key of same type
/// will overwrite the earlier value.
/// @param keySetId           unique identifier for keyset
/// @param keyType            identifier for type of key
/// @param rmKekEncryptedData The key data that is used in crypto operations. Encrypted by
/// RM_KEK
- (void)saveEncryptedMobileKey:(NSString * _Nonnull)keySetId keyType:(NSString * _Nonnull)keyType encryptedKeyData:(RMKekEncryptedData * _Nonnull)encryptedKeyData error:(NSError * _Nullable * _Nullable)error;
/// Rolls over the set of keys
/// <p/>
/// Only one key of each type can be saved in a key set.  Attempting to save key of same type
/// will overwrite the earlier value.
/// @param keySetId       unique identifier for keyset
/// @param dataToRollover hash map of [identifier for type of key; The key data that is used
/// in crypto operations, protected by RM_KEK]
- (void)rolloverMobileKeys:(NSString * _Nonnull)keySetId dataToRollover:(NSDictionary<NSString *, RMKekEncryptedData *> * _Nonnull)dataToRollover error:(NSError * _Nullable * _Nullable)error;
/// Get a specific mobile key.
/// @param keySetId unique identifier for keyset
/// @param keyType  identifier for type of key
/// @return The mobile key for a specific mobile key set id and card id. Encrypted by RM_KEK.
- (RMKekEncryptedData * _Nullable)getEncryptedMobileKey:(NSString * _Nonnull)keySetId keyType:(NSString * _Nonnull)keyType error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Retrieve mobile key set id from given card id.
/// @return keyset id assigned to this application
- (NSString * _Nullable)getMobileKeySetId SWIFT_WARN_UNUSED_RESULT;
/// Get the key type from given keyset id
/// @param keySetId unique identifier for keyset
/// @return list of key types available in this keyset
- (NSArray<NSString *> * _Nonnull)getMobileKeyTypesInKeySet:(NSString * _Nonnull)keySetId SWIFT_WARN_UNUSED_RESULT;
/// Wipes all mobile keys for a given Key Set Id
/// @param keySetId The Key Set Id to wipe mobile keys for
- (void)wipeMobileKeysForKeySetId:(NSString * _Nonnull)keySetId;
/// Enables the database module to migrate from one encryption key to another
/// @param dataStorageKeyDataRollover          provides a way to migrate a single piece of data
/// from one DST_DEK to another
/// @param dataStorageMacDataRollover          provides a way to migrate a single piece of data
/// from one
/// DST_MAC to another
/// @param currentDataStorageEncryptionKeyId   the current data storage encryption key id
/// @param alternateDataStorageEncryptionKeyId the alternate data storage encryption key id
/// @param currentDataStorageMacKeyId          the current data storage MAC key id
/// @param alternateDataStorageMacKeyId        the alternate data storage MAC key id
- (void)rolloverData:(id <KeyDataRollover> _Nonnull)dataStorageKeyDataRollover dataStorageMacDataRollover:(id <KeyDataRollover> _Nonnull)dataStorageMacDataRollover currentDataStorageEncryptionKeyId:(NSData * _Nonnull)currentDataStorageEncryptionKeyId alternateDataStorageEncryptionKeyId:(NSData * _Nonnull)alternateDataStorageEncryptionKeyId currentDataStorageMacKeyId:(NSData * _Nonnull)currentDataStorageMacKeyId alternateDataStorageMacKeyId:(NSData * _Nonnull)alternateDataStorageMacKeyId error:(NSError * _Nullable * _Nullable)error;
/// Rolls over the transaction credentials and card profiles in one transaction
/// @param transactionCredentialsToRollover transaction credentials to rollover key=cardId,
/// value
/// is hash map with
/// key=transactionCredentialId and value serialized
/// credentials
/// @param cardProfilesToRollover           card profiles to rollover key=cardId, value is
/// profile
- (void)rolloverTransactionCredentialsAndCardProfiles:(NSDictionary<NSString *, NSDictionary<NSString *, NSData *> *> * _Nonnull)transactionCredentialsToRollover cardProfilesToRollover:(NSDictionary<NSString *, NSData *> * _Nonnull)cardProfilesToRollover;
/// Store serialized transaction log as received from the caller
/// @param cardId                   unique identifier for the profile
/// @param transactionId            unique identifier for this log
/// @param serializedTransactionLog the transaction log to be stored in the database
- (void)saveTransactionLogForCardId:(NSString * _Nonnull)cardId transactionId:(NSString * _Nullable)transactionId version:(NSString * _Nonnull)version timestamp:(NSString * _Nonnull)timestamp serializedTransactionLog:(NSData * _Nonnull)serializedTransactionLog;
/// Retrieves transaction logs ids associated with card.
/// @param cardId unique identifier for the profile
/// @return List of TransactionLog identifiers for this card.
- (NSArray<NSNumber *> * _Nonnull)getTransactionLogIdsForCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Get serialised transaction log object for the given card id and transaction log id
/// @param cardId           unique identifier for the profile
/// @param transactionLogId unique identifier for transaction log
- (NSData * _Nullable)getTransactionLogByIdForCardId:(NSString * _Nonnull)cardId transactionLogId:(int32_t)transactionLogId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Wipe a specific log entry from database
/// @param cardId           unique identifier for the profile
/// @param transactionLogId unique identifier for this log
- (void)wipeTransactionLogByIdForCardId:(NSString * _Nonnull)cardId transactionLogId:(int32_t)transactionLogId;
/// Wipe all log entries for a card from the database
/// @param cardId unique identifier for the profile
- (void)wipeTransactionLogsForCardId:(NSString * _Nonnull)cardId;
/// Clear all data saved in the database, so that the DB looks same as after a fresh
/// installation
- (void)wipeAllData;
/// Retrieve RemoteManagement Url from database.
- (NSString * _Nullable)getRemoteManagementUrl:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Save the URL required for communication with the CMS-D
/// @param remoteManagementUrl complete URL to the server
- (void)saveRemoteManagementUrl:(NSString * _Nonnull)remoteManagementUrl;
/// Creates all tables
/// @param db instance of SQLiteDatabase
- (void)onCreate;
/// Called when a database update is required
/// @param db         instance of SQLiteDatabase
/// @param oldVersion old version of database
/// @param newVersion new version of database
- (void)onUpdateWithOldVersion:(NSInteger)oldVersion newVersion:(NSInteger)newVersion;
/// get status for the SUK matching the suk id and card id
/// @param cardId unique identifier for the profile
/// @param keyId  unique identifier of SUK
/// @return time stamp as String.
- (NSString * _Nullable)getTransactionCredentialTimeStampForCardId:(NSString * _Nonnull)forCardId keyId:(NSString * _Nonnull)keyId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
