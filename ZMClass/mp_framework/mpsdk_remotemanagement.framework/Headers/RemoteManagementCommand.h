/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from RemoteManagementCommand.djinni

#import "mpsdk_remotemanagement/CommandFailureAction.h"
#import "mpsdk_remotemanagement/CommandStatus.h"
#import "mpsdk_remotemanagement/CommandSuccessAction.h"
#import "mpsdk_componentinterface/HttpMethod.h"
#import "mpsdk_remotemanagement/CommandSuccessAction.h"
#import "mpsdk_remotemanagement/CommandFailureAction.h"
#import "mpsdk_remotemanagement/CommandStatus.h"
#import "mpsdk_componentinterface/HttpMethod.h"
#import <Foundation/Foundation.h>
@class CmsDRequest;
@class CmsDRequest;


/**
 * Auto-generated Djinni interface for ::mpsdk::remotemanagement::commands::RemoteManagementCommand_t
 * 
 * Represents a remote management command that can be sent to the CMS-D
 * 
 */
@interface RemoteManagementCommand : NSObject

- (id _Nonnull)init;

/**
 * 
 * Retrieve the unique request Id for this command
 * @returns the unique request Id
 * 
 */
- (NSString* _Nonnull)getRequestId;

/**
 * 
 * Executes the command
 * 
 */
- (void)execute;

/**
 * 
 * Cancels the execution of the command
 * 
 */
- (void)cancel;

/**
 * 
 * Retrieves the Http Method of this command
 * @returns the http error
 * 
 */
- (HttpMethod)getHttpMethod;

/**
 * 
 * Encrypts the request using the transport key as
 * @param requestJson the json representation of the request
 * @returns the protected request, ready to be sent
 * 
 */
- (CmsDRequest* _Nonnull)encryptRequest:(NSString* _Nonnull)requestJson;

/**
 * 
 * Executes the request
 * @param requestJson the JSON request data ready to be sent
 * 
 */
- (void)executeRequest:(NSString* _Nullable)requestJson;

/**
 * 
 * Indicates whether or not the command was successfully completed, or if there was an error
 * @returns true if the command was successful, false otherwise
 * 
 */
- (CommandStatus)getStatus;

/**
 * 
 * If the command has failed, this method should return an appropriate action to perform
 * @returns the recommended action to perform in the case of failure
 * 
 */
- (CommandFailureAction)getRecommendedCommandFailureAction;

/**
 * 
 * If the command has been successful, this method should return an appropriate action to perform
 * @returns the recommended action to perform in the case of success
 * 
 */
- (CommandSuccessAction)getRecommendedCommandSuccessAction;

/**
 * 
 * If the command fails, contains the error code
 * @returns the error code
 * 
 */
- (NSString* _Nullable)getErrorCode;

/**
 * 
 * Any command for which the CMS-D must be contacted in order to retrieve the status must
 * allow the task ID to be retrieved in order to be used with GetTaskStatus
 * @returns the task ID assigned when the command was created
 * 
 */
- (NSString* _Nullable)getTaskId;

/**
 * 
 * Set the number of retires remaining
 * @param retriesRemaining The number of retries remaining
 * 
 */
- (void)setRetriesRemaining:(int32_t)retriesRemaining;

/**
 * 
 * Gets the milli seconds delay in retry attempt
 * @returns time in milli seconds
 * 
 */
- (int32_t)getCurrentRetryInterval;

/**
 * 
 * Set the command status of the command
 * @param commandStatus The command's new status
 * 
 */
- (void)setCommandStatus:(CommandStatus)commandStatus;

/**
 * 
 * Retrieve the URL used for this command
 * 
 * @return the URL used for this command
 * 
 */
- (NSString* _Nonnull)getCommandUrl;

- (BOOL)isSessionRequired;

@end
