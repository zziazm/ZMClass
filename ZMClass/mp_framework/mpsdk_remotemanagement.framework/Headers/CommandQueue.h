/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from CommandQueue.djinni

#import "mpsdk_remotemanagement/CommandStatus.h"
#import "mpsdk_remotemanagement/CommandStatus.h"
#import <Foundation/Foundation.h>
@class RemoteManagementCommand;
@class RemoteManagementCommand;


/**
 * Auto-generated Djinni interface for ::mpsdk::remotemanagement::queue::CommandQueue_t
 * 
 * Represents a queue of remote management commands
 * 
 */
@protocol CommandQueue

/**
 * 
 * Adds a command to the back of the queue
 * @param command the command to add
 * 
 */
- (NSString* _Nonnull)add:(RemoteManagementCommand* _Nonnull)command;

/**
 * 
 * when a new session is arrived this method can be called to tell the queue that a new session has arrived
 * 
 */
- (void)onSessionArrived;

/**
 * 
 * Clears all commands from the queue. Failure events should be triggered for all commands
 * currently in the queue.
 * 
 */
- (void)clearQueue;

/**
 * 
 * Retrieves the status of a command identified by the given ID. This will only check the status
 * of the queue, the remote status should not be checked.
 * @param requestId the ID of the request to check
 * @returns the local status of the command
 * 
 */
- (CommandStatus)getCommandStatus:(NSString* _Nonnull)requestId;

/**
 * 
 * Attempts to retrieve the task ID associated with a command identified by the specified
 * request ID.
 * @param requestId the unique request ID of the command
 * @returns the task ID of the command, or null if the command cannot be found, or the command
 * does not support querying the CMS-D for its status
 * 
 */
- (NSString* _Nullable)getCommandTaskId:(NSString* _Nonnull)requestId;

/**
 * 
 * @return String, request id or current command
 * 
 */
- (NSString* _Nonnull)getInProgressRequestId;

/**
 * 
 * @returns size of queue
 * 
 */
- (int32_t)getSize;

/**
 * 
 * @return current executing command
 * 
 */
- (RemoteManagementCommand* _Nonnull)getCurrentCommand;

/**
 * 
 * @return true, if any command is being executed and not completed its execution
 * (success or failure), false otherwise
 * 
 */
- (BOOL)isCommandExecuting;

@end
