/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from CommandFactory.djinni

#import <Foundation/Foundation.h>
@class RequestSessionCommand;
@class ProvisionCommand;
@class ReplenishCommand;
@class NotifyProvisioningResultCommand;
@class GetTaskStatusCommand;
@class DeleteTokenCommand;
@class GetSystemHealthCommand;
@class SetPinCommand;
@class ChangePinCommand;
@class SessionContext;
@protocol SingleUseKeyStatus;
@protocol SessionContextProvider;
@protocol PinDataProvider;
@class ChangePinCommand;
@class DeleteTokenCommand;
@class GetSystemHealthCommand;
@class GetTaskStatusCommand;
@class NotifyProvisioningResultCommand;
@class ProvisionCommand;
@class ReplenishCommand;
@class RequestSessionCommand;
@class SessionContext;
@class SetPinCommand;
@protocol PinDataProvider;
@protocol SessionContextProvider;
@protocol SingleUseKeyStatus;


/**
 * Auto-generated Djinni interface for ::mpsdk::remotemanagement::commands::CommandFactory_t
 * 
 * Defines a factory for creating commands for use with the Remote Management service
 * 
 */
@protocol CommandFactory

/**
 * 
 * Creates a unique request ID which can be attached to a command
 * @returns the request ID
 * 
 */
- (NSString* _Nonnull)generateRequestId;

/**
 * 
 * Create command used to create a session with the CMS-D
 * @returns the command
 * 
 */
- (RequestSessionCommand* _Nonnull)createRequestSessionCommand;

/**
 * 
 * Trigger the provisioning of a card
 * @returns the command
 * 
 */
- (ProvisionCommand* _Nonnull)createProvisionCommand:(SessionContext* _Nonnull)sessionContext;

/**
 * 
 * Create command used to retrieve new transaction credentials
 * @param cardId the ID of the card for which credentials are to be retrieved
 * @param credentialStatus the current status of the credentials already saved for the card
 * @returns the command
 * 
 */
- (ReplenishCommand* _Nonnull)createReplenishCommand:(NSString* _Nonnull)cardId
                                               credentialStatus:(NSArray<id<SingleUseKeyStatus>>* _Nonnull)credentialStatus;

/**
 * 
 * Create command used to inform the CMS-D of the provisioning result
 * @param tokenUniqueReference the unique token
 * @param errorCode the error code
 * @param errorDescription the error description
 * @param result the result
 * @returns the command
 * 
 */
- (NotifyProvisioningResultCommand* _Nonnull)createNotifyProvisioningResultCommand:(id<SessionContextProvider> _Nonnull)sessionContextProvider
                                                                         tokenUniqueReference:(NSString* _Nullable)tokenUniqueReference
                                                                                    errorCode:(NSString* _Nullable)errorCode
                                                                             errorDescription:(NSString* _Nullable)errorDescription
                                                                                       result:(NSString* _Nonnull)result
                                                                               sessionContext:(SessionContext* _Nonnull)sessionContext;

/**
 * 
 * Create command used to request the status of another command
 * @param sessionContextProvider provider for session data
 * @param taskId the task ID of t
 * he request for which the task status should be retrieved
 * @returns the command
 * 
 */
- (GetTaskStatusCommand* _Nonnull)createGetTaskStatusCommand:(id<SessionContextProvider> _Nonnull)sessionContextProvider
                                                                 taskId:(NSString* _Nonnull)taskId;

/**
 * 
 * Create command used to delete a card
 * @param cardId the ID of the card for which credentials are to be retrieved
 * @param credentialStatus the current status of the credentials already saved for the card
 * @returns the command
 * 
 */
- (DeleteTokenCommand* _Nonnull)createDeleteTokenCommand:(NSString* _Nonnull)cardId
                                                   credentialStatus:(NSArray<id<SingleUseKeyStatus>>* _Nonnull)credentialStatus;

/**
 * 
 * Create a command to ensure that communication with the CMS-D is possible
 * @returns the command
 * 
 */
- (GetSystemHealthCommand* _Nonnull)createGetSystemHealthCommand;

/**
 * 
 * Create a command to set the PIN on either a card or wallet
 * @param tokenUniqueReference card identifier, null if setting wallet pin
 * @param pinDataProvider provider containing the new pin
 * @returns the command
 * 
 */
- (SetPinCommand* _Nonnull)createSetPinCommand:(NSString* _Nullable)tokenUniqueReference
                                          pinDataProvider:(id<PinDataProvider> _Nonnull)pinDataProvider;

/**
 * 
 * Create a command to change the PIN on either a card or wallet
 * @param tokenUniqueReference card identifier, null if changing wallet pin
 * @param pinDataProvider provider containing the current and new pin
 * @returns the command
 * 
 */
- (ChangePinCommand* _Nonnull)createChangePinCommand:(NSString* _Nullable)tokenUniqueReference
                                                pinDataProvider:(id<PinDataProvider> _Nonnull)pinDataProvider;

@end
