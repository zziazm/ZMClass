// Generated by Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import mchip_engine;
@import Foundation;
@import mpsdk_componentinterface;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("mpsdk")
@protocol AdviceAndReasons;
@protocol TransactionInformation;
@protocol TerminalInformation;

/// Implementation to provide wallet advice about proceeding with a transaction.
/// <p>
/// The overridden method to get advice directly impacts transaction time.  So a ideal
/// implementation of this method must keep the method execution time to lowest.
/// @see WalletAdviceManager
SWIFT_CLASS("_TtC5mpsdk13AdviceManager") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface AdviceManager : NSObject <WalletAdviceManager>
/// Utility function to prepare the transaction assessment.  This sample version, checks and
/// declines a transaction if it is made on a Transit terminal.
/// @param recommendedAdvice      The MasterCard advice for this transaction
/// @param transactionInformation The Information Related to this transaction
/// @param terminalInformation    The Terminal Information
/// @return The Card/Wallet advice for the transaction
- (enum Advice)getFinalAssessment:(id <AdviceAndReasons> _Nonnull)recommendedAdvice transactionInformation:(id <TransactionInformation> _Nonnull)transactionInformation terminalInformation:(id <TerminalInformation> _Nonnull)terminalInformation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol McbpDataBase;
@protocol RemoteCommunicationManager;
@protocol TransactionCrypto;
@protocol CardManager;
@protocol CdCvmStatusProvider;
@protocol WalletConsentManager;
@protocol TransactionEventListener;
@class DolEntry;
@protocol PinDataProvider;
@protocol CredentialsAccessibilityPolicy;
@protocol Card;

///
SWIFT_CLASS("_TtC5mpsdk11CardBuilder") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CardBuilder : NSObject
///
- (CardBuilder * _Nonnull)forDatabase:(id <McbpDataBase> _Nonnull)dataBase SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)forRemoteCommunicationManager:(id <RemoteCommunicationManager> _Nonnull)remoteCommunicationManager SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)forCrypto:(id <TransactionCrypto> _Nonnull)transactionCrypto SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)forCardManager:(id <CardManager> _Nonnull)cardManager SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)forCdcvmStatusProvider:(id <CdCvmStatusProvider> _Nonnull)cdCvmStatusProvider SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withCardState:(int32_t)cardStateById SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withSerializedCardProfile:(NSData * _Nonnull)serializedCardProfile SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withWalletConsentManager:(id <WalletConsentManager> _Nonnull)walletConsentManager SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withAdviceManager:(id <WalletAdviceManager> _Nonnull)walletAdviceManager SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withTransactionEventListener:(id <TransactionEventListener> _Nonnull)transactionEventListener SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withWalletLevelPin:(BOOL)walletLevelPin SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withPdolList:(NSArray<DolEntry *> * _Nonnull)pdolList SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withUdolList:(NSArray<DolEntry *> * _Nonnull)udolList SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withPinDataProvider:(id <PinDataProvider> _Nullable)pinDataProvider SWIFT_WARN_UNUSED_RESULT;
///
- (CardBuilder * _Nonnull)withCredentialsAccessibilityPolicy:(id <CredentialsAccessibilityPolicy> _Nonnull)credentialsAccessibilityPolicy SWIFT_WARN_UNUSED_RESULT;
///
- (id <Card> _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the data that is linked to a card. This allows the UI to easily retrieve useful elements
/// from the card’s profile such as PAN number, expiry date and background image
SWIFT_PROTOCOL("_TtP5mpsdk8CardData_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol CardData
@end

@protocol DigitizedCard;
@protocol TransactionLog;
@protocol DatabaseWalletData;
@protocol DsrpTransactionInput;
@protocol DsrpTransactionOutcome;
@protocol QrcTransactionContext;
@protocol QrcTransactionOutcome;
@protocol SingleUseKey;
@class NSError;

/// Represents a Card
SWIFT_CLASS("_TtC5mpsdk8CardImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CardImpl : NSObject <Card>
///
- (nonnull instancetype)initWithCardId:(NSString * _Nonnull)cardId cardManager:(id <CardManager> _Nonnull)cardManager database:(id <McbpDataBase> _Nonnull)database cardProfile:(id <DigitizedCard> _Nonnull)cardProfile transactionCrypto:(id <TransactionCrypto> _Nonnull)transactionCrypto remoteCommunicationManager:(id <RemoteCommunicationManager> _Nonnull)remoteCommunicationManager walletLevelPin:(BOOL)walletLevelPin transactionEventListener:(id <TransactionEventListener> _Nonnull)transactionEventListener cdCvmStatusProvider:(id <CdCvmStatusProvider> _Nonnull)cdCvmStatusProvider walletAdviceManager:(id <WalletAdviceManager> _Nonnull)walletAdviceManager walletConsentManager:(id <WalletConsentManager> _Nonnull)walletConsentManager pdolList:(NSArray<DolEntry *> * _Nullable)pdolList udolList:(NSArray<DolEntry *> * _Nullable)udolList pinDataProvider:(id <PinDataProvider> _Nullable)pinDataProvider credentialsAccessibilityPolicy:(id <CredentialsAccessibilityPolicy> _Nonnull)credentialsAccessibilityPolicy OBJC_DESIGNATED_INITIALIZER;
///
- (CardState)getCardState SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)getCardId SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)changePin:(id <PinDataProvider> _Nonnull)pinDataProvider SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)setPin:(id <PinDataProvider> _Nonnull)pinDataProvider SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)getDisplayablePanDigits SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)replenishCredentials SWIFT_WARN_UNUSED_RESULT;
///
- (void)deleteTransactionCredentials;
///
- (NSArray<id <TransactionLog>> * _Nonnull)getTransactionLog SWIFT_WARN_UNUSED_RESULT;
///
- (id <DatabaseWalletData> _Nullable)getWalletDataForCard SWIFT_WARN_UNUSED_RESULT;
///
- (void)saveWalletDataForCard:(id <DatabaseWalletData> _Nonnull)walletData;
///
- (int32_t)getNumberOfAvailableCredentials SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)isContactlessSupported SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)isDsrpSupported SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)isQrcPaymentSupported SWIFT_WARN_UNUSED_RESULT;
/// Initiates a Remote Transaction.
- (id <DsrpTransactionOutcome> _Nonnull)processDsrpTransaction:(id <DsrpTransactionInput> _Nonnull)dsrpTransactionInput SWIFT_WARN_UNUSED_RESULT;
///
- (id <QrcTransactionOutcome> _Nullable)processQrcTransaction:(id <QrcTransactionContext> _Nullable)qrcTransactionContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the first available unused active Session Key
- (id <SingleUseKey> _Nullable)getUnusedActiveSingleUseKey SWIFT_WARN_UNUSED_RESULT;
///
- (void)updateTransactionCredentialStatus:(int32_t)atc status:(SingleUseKeyStatusStatus)status;
/// Save Transaction Log in the Database
- (void)add:(id <TransactionLog> _Nonnull)log error:(NSError * _Nullable * _Nullable)error;
/// Retrieves the Cvm type for this card based on the GPO response contained within the card
/// profile
- (BOOL)isOnDeviceCvmSupported SWIFT_WARN_UNUSED_RESULT;
/// Get card profile id  for the card
/// @return value of card profile id.
- (NSString * _Nonnull)getDigitizedCardId SWIFT_WARN_UNUSED_RESULT;
/// Executes the transaction replenishment policy to determine if new payment tokens should be
/// acquired for this card
- (void)enforceCredentialReplenishmentPolicy;
///
- (CardCvmModel)getCdCvmModel:(PaymentContext)paymentContext SWIFT_WARN_UNUSED_RESULT;
///
- (CardUmdConfig)getHostUmdConfig:(PaymentContext)paymentContext SWIFT_WARN_UNUSED_RESULT;
///
- (CardholderValidator)getCardholderValidator SWIFT_WARN_UNUSED_RESULT;
///
- (ProfileVersion)getVersion SWIFT_WARN_UNUSED_RESULT;
///
- (int32_t)getCvmResetTimeout SWIFT_WARN_UNUSED_RESULT;
///
- (CardAccountType)getAccountType SWIFT_WARN_UNUSED_RESULT;
///
- (CardProductType)getProductType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Provides an interface to allow the events triggered on a card to be
/// handled by the User Interface
SWIFT_PROTOCOL("_TtP5mpsdk24CardManagerEventListener_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol CardManagerEventListener
/// @param cardId Identifier of the Card that has been provisioned
/// @return true if handled false otherwise
- (BOOL)onCardProvisionCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when token provisioning is failed.
/// @param errorCode    failure error code as String
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onCardProvisionFailureWithErrorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when replenishment of single use key for card is successful.
/// @param cardId                         Identifier of the card for which replenish was
/// completed for
/// @param numberOfTransactionCredentials Number of TransactionCredentials received
/// does it make sense to have those parameters
/// @return true if handled false otherwise
- (BOOL)onReplenishCompletedWithCardId:(NSString * _Nonnull)cardId numberOfTransactionCredentials:(int32_t)numberOfTransactionCredentials SWIFT_WARN_UNUSED_RESULT;
/// Event raised when replenishment of single use key for card fails.
/// @param cardId       Card identifier
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onReplenishFailedWithCardId:(NSString * _Nonnull)cardId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when delete of card is successful.
/// @param cardId Identifier of the Card that has been deleted
/// @return true if handled false otherwise
- (BOOL)onDeleteCardCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when delete of card fails.
/// <p/>
/// @param cardId       Identifier of the card which delete has failed for
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onDeleteCardFailedWithCardId:(NSString * _Nonnull)cardId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Change PIN of card is successful.
/// @param cardId The identifier of the Card for which the PIN Change has been completed
/// @return true if handled false otherwise
- (BOOL)onCardPinChangeCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Change PIN of card fails.
/// @param cardId                  Identifier of the Card for which the PIN set has failed
/// @param mobilePinTriesRemaining The current Mobile PIN tries remaining. If the PIN was
/// entered incorrectly, the number of tries remaining may have
/// been decremented. If the Mobile PIN change was successful,
/// this value would have been reset.
/// Note that this PIN tries remaining count reflects the
/// number of PIN tries remaining for changing the Mobile PIN.
/// It does not necessarily reflect the number of PIN tries
/// remaining when transacting.
/// @param errorCode               A code identifying the error that occurred.
/// @param errorMessage            Error message describing the error that occurred
/// @param exception               Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onCardPinChangeFailedWithCardId:(NSString * _Nonnull)cardId mobilePinTriesRemaining:(int32_t)mobilePinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Set Mobile PIN of card is successful.
/// @param cardId Identifier of the Card for which the PIN Change has been completed
/// @return true if handled false otherwise
- (BOOL)onCardPinSetCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Set Card Mobile PIN fails.
/// @param cardId                  Identifier of the card for which card pin set has failed
/// @param mobilePinTriesRemaining The current Mobile PIN tries remaining. If the PIN was
/// entered incorrectly, the number of tries remaining may have
/// been decremented. If the Mobile PIN change was successful,
/// this value would have been reset.
/// Note that this PIN tries remaining count reflects the
/// number of PIN tries remaining for changing the Mobile PIN.
/// It does not necessarily reflect the number of PIN tries
/// remaining when transacting.
/// @param errorCode               A code identifying the error that occurred.
/// @param errorMessage            Error message describing the error that occurred
/// @param exception               Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onCardPinSetFailedWithCardId:(NSString * _Nonnull)cardId mobilePinTriesRemaining:(int32_t)mobilePinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Change PIN of Wallet is successful.
/// @return true if handled false otherwise
- (BOOL)onWalletPinChangeCompleted SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Change Mobile PIN of Wallet fails.
/// @param mobilePinTriesRemaining The current Mobile PIN tries remaining. If the PIN was
/// entered incorrectly, the number of tries remaining may have
/// been decremented. If the Mobile PIN change was successful,
/// this value would have been reset.
/// Note that this PIN tries remaining count reflects the
/// number of PIN tries remaining for changing the Mobile PIN.
/// It does not necessarily reflect the number of PIN tries
/// remaining when transacting.
/// @param errorCode               A code identifying the error that occurred.
/// @param errorMessage            Error message describing the error that occurred
/// @param exception               Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onWalletPinChangeFailedWithMobilePinTriesRemaining:(int32_t)mobilePinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Set Wallet Mobile PIN is successful.
/// @return true if handled false otherwise
- (BOOL)onSetWalletPinCompleted SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Set Wallet Mobile PIN fails.
/// @param mobilePinTriesRemaining The current Mobile PIN tries remaining. If the PIN was
/// entered incorrectly, the number of tries remaining may have
/// been decremented. If the Mobile PIN change was successful,
/// this value would have been reset.
/// Note that this PIN tries remaining count reflects the
/// number of PIN tries remaining for changing the Mobile PIN.
/// It does not necessarily reflect the number of PIN tries
/// remaining when transacting.
/// @param errorCode               A code identifying the error that occurred.
/// @param errorMessage            Error message describing the error that occurred
/// @param exception               Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onSetWalletPinFailedWithMobilePinTriesRemaining:(int32_t)mobilePinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when the system health with CMS-D is successful.
/// @return true if handled false otherwise
- (BOOL)onSystemHealthCompleted SWIFT_WARN_UNUSED_RESULT;
/// Event raised when the system health request with CMS-D failed
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onSystemHealthFailureWithErrorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when change pin request is started, event gives the task id for the task.
/// @param cardId Identifier of the Card for which the change mobile pin has been started
/// @param taskId as string
/// @return true if successful
- (BOOL)onChangeCardMobilePinStartedWithCardId:(NSString * _Nonnull)cardId taskId:(NSString * _Nonnull)taskId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when change pin request is started, event gives the task id for the task.
/// @param taskId as string
/// @return true if successful
- (BOOL)onChangeWalletMobilePinStartedWithTaskId:(NSString * _Nonnull)taskId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when reset of PIN of card is initiated by CMS-D and it is successful.
/// @param cardId Identifier of the card whose pin has been reset
/// @return true if handled false otherwise
- (BOOL)onCardMobilePinResetCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when reset of PIN of Wallet is initiated by CMS-D and it is successful.
/// @return true if handled false otherwise
- (BOOL)onWalletMobilePinResetCompleted SWIFT_WARN_UNUSED_RESULT;
/// The operation to retrieve the status of an ongoing task has been completed
/// @param taskStatus the status of the task as a string
/// @return true if handled, false otherwise
- (BOOL)onTaskStatusCompletedWithTaskStatus:(NSString * _Nonnull)taskStatus SWIFT_WARN_UNUSED_RESULT;
/// The operation to retrieve the status of an ongoing task has failed. Note that this does
/// not indicate that the task itself has failed, but that the request to retrieve the status
/// has not been successful
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled, false otherwise
- (BOOL)onTaskStatusFailedWithErrorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// The operation to request a new session has completed
/// @return true if handled, false otherwise
- (BOOL)onRequestSessionCompleted SWIFT_WARN_UNUSED_RESULT;
/// The operation to request a new session has failed
/// @param errorCode    Error Code identifying the error
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onRequestSessionFailedWithErrorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
@end

@protocol CredentialsReplenishmentPolicy;
@class Exception;

/// This is just a placeholder.  In actual case this class will be replaced by a class from
/// SDK business logic
SWIFT_CLASS("_TtC5mpsdk15CardManagerImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CardManagerImpl : NSObject <CardManager, RemoteCommunicationEventListener>
///
- (nonnull instancetype)initWithConsentProvider:(id <WalletConsentManager> _Nonnull)consentProvider transactionCrypto:(id <TransactionCrypto> _Nonnull)transactionCrypto dataBase:(id <McbpDataBase> _Nonnull)dataBase walletAdviceManager:(id <WalletAdviceManager> _Nonnull)walletAdviceManager remoteCommunicationManager:(id <RemoteCommunicationManager> _Nonnull)remoteCommunicationManager cardManagerEventListener:(id <CardManagerEventListener> _Nonnull)cardManagerEventListener transactionEventListener:(id <TransactionEventListener> _Nonnull)transactionEventListener walletLevelPin:(BOOL)walletLevelPin credentialsReplenishmentPolicy:(id <CredentialsReplenishmentPolicy> _Nonnull)credentialsReplenishmentPolicy cdCvmStatusProvider:(id <CdCvmStatusProvider> _Nonnull)cdCvmStatusProvider pdolItems:(NSArray<DolEntry *> * _Nullable)pdolItems udolItems:(NSArray<DolEntry *> * _Nullable)udolItems pinDataProvider:(id <PinDataProvider> _Nullable)pinDataProvider credentialsAccessibilityPolicy:(id <CredentialsAccessibilityPolicy> _Nonnull)credentialsAccessibilityPolicy OBJC_DESIGNATED_INITIALIZER;
/// Mark the card for deletion
/// Use remote communications manager to delete the card from remote server
/// Completely remove card from the local database, after the card is removed from server
/// @param card The Mcbp Card to be deleted
/// @return request ID of request made
/// @exception RolloverInProgressException if key rollover is in process
- (NSString * _Nullable)deleteCard:(id <Card> _Nonnull)card error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// mark the card as suspended in the local database.
/// This does not change the state of the card on the server.
/// @param card The Mcbp Card to be suspended
/// @exception RolloverInProgressException if key rollover is in process
- (void)suspendCard:(id <Card> _Nonnull)card error:(NSError * _Nullable * _Nullable)error;
/// mark a suspended card as activated in the local database.
/// Note: When the card is provisioned, it is assumed to be in suspended state
/// This does not change the state of the card on the server.
/// @param card The Mcbp Card that has been activated
/// @exception RolloverInProgressException if key rollover is in process
- (void)activateCard:(id <Card> _Nonnull)card error:(NSError * _Nullable * _Nullable)error;
/// Get all the cards that are available for this Mcbp Wallet.
/// This includes suspended, pending deletion, not Activated, and activated cards
/// @return The collection containing the list of Cards
/// @exception RolloverInProgressException if key rollover is in process
/// Note: After new cards have been provisioned, call this to get the new card details
/// Client should use Card.getState() to identify actions possible on that card
- (NSArray<id <Card>> * _Nullable)getAllCards:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get the card that is identified by the given card ID.
/// This includes suspended, pending deletion, not Activated, and activated cards
/// @param cardId the id of the card to retrieve
/// @return the card or null if it does not exist
/// @exception RolloverInProgressException if key rollover is in process
- (id <Card> _Nullable)getCardById:(NSString * _Nonnull)cardId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Change the wallet PIN.
/// @param pinDataProvider Provides access to current and new PIN protected by W_DEK
/// @exception RolloverInProgressException if key rollover is in process
/// <p/>
/// Note: This uses the remote communications manager to invoke the asynchronous process for
/// changing the wallet PIN.
/// This will wipe the current transaction credentials, and those will be automatically
/// requested once the change pin succeeds.
/// <p/>
/// Results will be notified using CardManagerEventListeners
- (NSString * _Nullable)changeWalletPin:(id <PinDataProvider> _Nonnull)pinDataProvider error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Delete all transaction credentials for all cards from database.
/// @exception RolloverInProgressException if key rollover is in process
- (void)deleteAllTransactionCredentials:(NSError * _Nullable * _Nullable)error;
/// Retrieve Key Management Policy to use
/// @return the key management policy
- (id <CredentialsReplenishmentPolicy> _Nonnull)getCredentialsReplenishmentPolicy SWIFT_WARN_UNUSED_RESULT;
/// Request to set mobile wallet PIN.
/// @param pinDataProvider Provides access to current PIN protected by W_DEK
/// @exception RolloverInProgressException if key rollover is in process
/// <p/>
/// Note: This uses the remote communications manager to invoke the asynchronous process for
/// setting the wallet PIN
/// Results will be notified using CardManagerEventListeners
- (NSString * _Nullable)setWalletPin:(id <PinDataProvider> _Nonnull)pinDataProvider error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// callback invoked after card provision is done.
/// @param digitizedCardProfile the profile of the card
/// @param cardId               Identifier of the card
- (void)onProvisionSucceeded:(id <DigitizedCard> _Nonnull)digitizedCardProfile cardId:(NSString * _Nonnull)cardId;
///
- (void)onSetCardPinSucceeded:(NSString * _Nonnull)cardId;
///
- (void)onSetCardPinFailed:(NSString * _Nonnull)cardId pinTriesRemaining:(int32_t)pinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onSetWalletPinFailed:(int32_t)pinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onChangeCardPinFailed:(NSString * _Nonnull)cardId pinTriesRemaining:(int32_t)pinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onChangeWalletPinFailed:(int32_t)pinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onChangeCardPinSucceeded:(NSString * _Nonnull)cardId;
///
- (void)onChangeWalletPinSucceeded;
///
- (void)onSetWalletPinSucceeded;
/// called by the SDK once the replenishment request succeeded successfully
/// @param cardId        Id for Card for which the new SUKs are available
/// @param requestId     Request Id with which the processing was being done
/// @param singleUseKeys interface for fetching the SUK
- (void)onReplenishSucceeded:(NSString * _Nonnull)cardId requestId:(NSString * _Nonnull)requestId singleUseKeys:(NSArray<id <SingleUseKey>> * _Nonnull)singleUseKeys;
/// called in case the replenishment request could not complete successfully
/// @param cardId       Card for which the new SUKs are available
/// @param requestId    Request Id with which the processing was being done
/// @param errorCode    error code and description of the issue
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
- (void)onReplenishFailed:(NSString * _Nonnull)cardId requestId:(NSString * _Nonnull)requestId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onDeleteCardFailed:(NSString * _Nonnull)cardId requestId:(NSString * _Nonnull)requestId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onDeleteCardSuccess:(NSString * _Nonnull)cardId requestId:(NSString * _Nonnull)requestId;
/// Event raised when retrieval of task status is successful.
- (void)onTaskStatusReceived:(NSString * _Nonnull)taskStatus;
/// Event raised when retrieval of task status fails.
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
- (void)onTaskStatusReceivedFailure:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
/// Event raised when system health with CMS-D fails.
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
- (void)onSystemHealthFailure:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
/// Event raised when system health with CMS-D succeeds
- (void)onSystemHealthCompleted;
/// Event raised when PIN has been reset for a particular card
/// @param cardId The identifier of the card whose PIN has been reset
- (void)onCardPinReset:(NSString * _Nonnull)cardId;
/// Event raised when wallet PIN has been reset
- (void)onWalletPinReset;
/// Event raised when a notify token provision result command has failed
/// @param cardId       Card Identifier for the card the notify token provision result command
/// was for
/// @param errorCode    Code identifying the error that occurred
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
- (void)onProvisionFailure:(NSString * _Nonnull)cardId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
/// The operation to request a new session has completed
- (void)onRequestSessionSuccess;
/// Event raised when a request session has failed
/// @param errorCode    Error code identifying the error
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
- (void)onRequestSessionFailure:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onChangeCardMobilePinStarted:(NSString * _Nonnull)cardId taskId:(NSString * _Nonnull)taskId;
///
- (void)onChangeWalletMobilePinStarted:(NSString * _Nonnull)taskId;
/// Prevents interactions with the wallet API methods until resumeInteractions is called.
/// <p/>
/// This is used to prevent issues with data continuity during key rollover operations
- (void)suspendInteractions;
/// Resumes interactions with the wallet API methods after they have previously been suspended
/// through the use of suspendInteractions.
/// <p/>
/// This is used to prevent issues with data continuity during key rollover operations
- (void)resumeInteractions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSCoder;

/// Generic MCBP Exception class
/// It provides an interface for all the exception classes to be used within MCBP modules
SWIFT_CLASS("_TtC5mpsdk22McbpUncheckedException") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface McbpUncheckedException : MpSdkException
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
/// Constructor. Both a reason and error code are provided
/// @param reason    A string describing the reason for the exception
/// @param errorCode A code that binds the exception with a MCBP Error Code
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Get the Error related to the Exception
/// @return The Error Code which is associated with the exception
- (ReturnCode)getErrorCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message details:(NSString * _Nonnull)details SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


/// This Exception is raised when the card holder verification was not successful
SWIFT_CLASS("_TtC5mpsdk33CardholderValidationNotSuccessful") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CardholderValidationNotSuccessful : McbpUncheckedException
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC5mpsdk21CdCvmCheckedException") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CdCvmCheckedException : MpSdkException
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message details:(NSString * _Nonnull)details SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


/// Generic class for card holder device verification methods.
SWIFT_PROTOCOL("_TtP5mpsdk19CdCvmStatusProvider_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol CdCvmStatusProvider
/// Allows the wallet to indicate if CD CVM is supported.
/// @return true if CdCvm processing is supported by the wallet; otherwise false.
- (BOOL)isCdCvmEnabled SWIFT_WARN_UNUSED_RESULT;
/// Asks the Wallet for its opinion on whether or not it believes CD CVM has been successfully
/// performed.
/// @param card Card used for current transaction
/// @return true if the wallet considers that the user has performed successful CD CVM; otherwise
/// false.
- (BOOL)isCdCvmSuccessfulWithCard:(id <Card> _Nullable)card SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the time in milliseconds of the last successful authentication.
/// @return time in milliseconds of last successful authentication; a negative value indicates
/// that the user has never authenticated
- (NSInteger)getTimeOfLastSuccessfulCdCvm SWIFT_WARN_UNUSED_RESULT;
/// Ask the wallet to check if the user has exceed authentication retries.
/// @return true if the user exceed authentication retries, false otherwise.
- (BOOL)isCdCvmBlocked SWIFT_WARN_UNUSED_RESULT;
@end


///
SWIFT_CLASS("_TtC5mpsdk27CdCvmValidationNotPerformed") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CdCvmValidationNotPerformed : CdCvmCheckedException
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Credentials Accessibility Policy for transaction to determine whether credentials access is
/// subject to the user authentication.
SWIFT_PROTOCOL("_TtP5mpsdk30CredentialsAccessibilityPolicy_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol CredentialsAccessibilityPolicy
/// Policy defined for the credential accessibility.
- (BOOL)areCredentialsAccessibleWithoutCdCvmWithCredentialsScope:(enum CredentialsScope)credentialsScope SWIFT_WARN_UNUSED_RESULT;
@end


/// A simple yet aggressive key management policy that will always request a new key after one has
/// been used.
SWIFT_CLASS("_TtC5mpsdk36CredentialsReplenishmentPolicyAlways") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CredentialsReplenishmentPolicyAlways : NSObject <CredentialsReplenishmentPolicy>
///
- (BOOL)shouldRequestNewCredentials:(id <Card> _Nonnull)card SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A simple key management policy that requests new keys if the number of remaining keys falls below
/// a certain threshold.
SWIFT_CLASS("_TtC5mpsdk39CredentialsReplenishmentPolicyThreshold") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface CredentialsReplenishmentPolicyThreshold : NSObject <CredentialsReplenishmentPolicy>
///
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Constructor. Uses the default key threshold limit.
- (void)CredentialsReplenishmentPolicyThreshold;
/// Constructor. Allows a custom threshold to be set.
/// @param threshold The key threshold limit.
- (void)CredentialsReplenishmentPolicyThresholdWithThreshold:(NSInteger)threshold;
///
- (BOOL)shouldRequestNewCredentials:(id <Card> _Nonnull)card SWIFT_WARN_UNUSED_RESULT;
@end


/// Encapsulate the parameter which are either required or option for LDE initialization.
SWIFT_CLASS("_TtC5mpsdk22DatabaseInitParamsImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface DatabaseInitParamsImpl : NSObject <DatabaseInitParams>
///
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nonnull)getCmsMpaId SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)getUrlRemoteManagement SWIFT_WARN_UNUSED_RESULT;
///
- (void)setUrlRemoteManagement:(NSString * _Nonnull)urlRemoteManagement;
///
- (NSData * _Nonnull)getMpaFingerPrint SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nonnull)getRnsMpaId SWIFT_WARN_UNUSED_RESULT;
///
- (void)setRnsMpaId:(NSData * _Nonnull)rnsMpaId;
/// Wipe all the sensitive data.
- (void)wipe;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol DatabaseUpgradeCrypto;

/// Provides the database layer with a way to apply business logic to the upgrade process
SWIFT_CLASS("_TtC5mpsdk25DatabaseUpgradeHelperImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface DatabaseUpgradeHelperImpl : NSObject <DatabaseUpgradeHelper>
/// Create a transaction credential and serialize it on behalf of the LDE
/// @param id                        The ID of the transaction credential
/// @param sukInfo                   the
/// @param sukContactlessUmd         Contactless UMD
/// @param sukRemotePaymentUmd       Remote UMD
/// @param sessionKeyContactlessMd   Contactless MD
/// @param sessionKeyRemotePaymentMd Remote MD
/// @param idn                       The IDN
/// @param atc                       Application Transaction Counter
/// @param hash                      The Hash
/// @return the serialized Transaction Credential
- (NSData * _Nonnull)serializeTransactionCredential:(NSString * _Nonnull)id sukInfo:(NSData * _Nonnull)sukInfo sukContactlessUmd:(NSData * _Nonnull)sukContactlessUmd sukRemotePaymentUmd:(NSData * _Nonnull)sukRemotePaymentUmd sessionKeyContactlessMd:(NSData * _Nonnull)sessionKeyContactlessMd sessionKeyRemotePaymentMd:(NSData * _Nonnull)sessionKeyRemotePaymentMd sessionKeyContactlessUmd:(NSData * _Nonnull)sessionKeyContactlessUmd sessionKeyRemotePaymentUmd:(NSData * _Nonnull)sessionKeyRemotePaymentUmd idn:(NSData * _Nonnull)idn atc:(int32_t)atc hash:(NSData * _Nonnull)hash SWIFT_WARN_UNUSED_RESULT;
/// Create a Transaction Log and serialize it on behalf of the LDE
/// @param tokenUniqueReference the unique ID of the card that this log refers to
/// @param unpredictableNumber  the UN for the transaction
/// @param date                 date of the transaction
/// @param amount               amount of the transaction
/// @param currencyCode         currency code
/// @param cryptogramFormat     the cryptogram format. See {@link TransactionLogImpl}
/// @param transactionId        unique transaction ID
/// @return the serialized Transaction Log
- (NSData * _Nonnull)serializeTransactionLog:(NSString * _Nonnull)tokenUniqueReference unpredictableNumber:(NSData * _Nonnull)unpredictableNumber date:(int64_t)date amount:(int64_t)amount currencyCode:(int32_t)currencyCode cryptogramFormat:(uint8_t)cryptogramFormat transactionId:(NSData * _Nonnull)transactionId SWIFT_WARN_UNUSED_RESULT;
///
- (id <DatabaseUpgradeCrypto> _Nonnull)getDatabaseUpgradeCrypto SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nonnull)getMpaKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSNumber;

/// Default implementation of {@link CommunicationRetryParametersProvider}, used in case wallet does not provide it’s own implementation.
/// The default implementation uses values:
/// <Li>Maximum number of retires = 3</Li>
/// <Li>Increasing retry intervals for each retry = 2, 3, and 5 seconds respectively</Li>
SWIFT_CLASS("_TtC5mpsdk43DefaultCommunicationRetryParametersProvider") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface DefaultCommunicationRetryParametersProvider : NSObject <CommunicationRetryParametersProvider>
/// {@inheritDoc}
- (int32_t)getRetryCount SWIFT_WARN_UNUSED_RESULT;
/// {@inheritDoc}
- (NSArray<NSNumber *> * _Nonnull)getRetryIntervals SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Default implementation of {@link CredentialsAccessibilityPolicy}, used in case wallet does not
/// provide it’s own implementation.
/// The default implementation always return true indicating the user authentication is not
/// required to access the credentials in database.
SWIFT_CLASS("_TtC5mpsdk37DefaultCredentialsAccessibilityPolicy") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface DefaultCredentialsAccessibilityPolicy : NSObject <CredentialsAccessibilityPolicy>
/// Policy defined for the credential accessibility.
- (BOOL)areCredentialsAccessibleWithoutCdCvmWithCredentialsScope:(enum CredentialsScope)credentialsScope SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Base class for all the exceptions related to the McbpCard
SWIFT_CLASS("_TtC5mpsdk17McbpCardException") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface McbpCardException : McbpUncheckedException
/// Constructor. A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
/// Constructor.  A reason and an error code must be provided
/// @param reason A string describing the reason for the exception
/// @param errorCode A code that binds the exception with a MCBP Error Code
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This exception is thrown when the Digital Secure Remote Payment credentials are not valid,
/// expired, or an error has occurred when retrieving them
SWIFT_CLASS("_TtC5mpsdk20DsrpCredentialsError") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface DsrpCredentialsError : McbpCardException
/// Constructor. A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC5mpsdk21DsrpProfileDataMapper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface DsrpProfileDataMapper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Base class for all the exceptions related to unexpected data
SWIFT_CLASS("_TtC5mpsdk13InternalError") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface InternalError : McbpUncheckedException
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
/// Constructor.  A reason and an error code must be provided
/// @param reason A string describing the reason for the exception
/// @param errorCode A code that binds the exception with a MCBP Error Code
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Generic MCBP Exception class
/// It provides an interface for all the exception classes to be used within MCBP modules
SWIFT_CLASS("_TtC5mpsdk20McbpCheckedException") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface McbpCheckedException : MpSdkException
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
/// Constructor. Both a reason and error code are provided
/// @param reason    A string describing the reason for the exception
/// @param errorCode A code that binds the exception with a MCBP Error Code
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Get the Error related to the Exception
/// @return The Error Code which is associated with the exception
- (ReturnCode)getErrorCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message details:(NSString * _Nonnull)details SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


/// This exception is thrown when the operation is being performed is not allowed on current state
/// of a card.
SWIFT_CLASS("_TtC5mpsdk25InvalidCardStateException") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface InvalidCardStateException : McbpCheckedException
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
/// Constructor. Both a reason and error code are provided
/// @param reason    A string describing the reason for the exception
/// @param errorCode A code that binds the exception with a MCBP Error Code
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This exception is thrown if the received Card Profile is malformed or not valid
SWIFT_CLASS("_TtC5mpsdk27InvalidDigitizedCardProfile") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface InvalidDigitizedCardProfile : InvalidInput
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message errorCode:(ReturnCode)errorCode SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message details:(NSString * _Nonnull)details SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


/// Provides callbacks to the Wallet when key rollover operations take place, during which card
/// management and transaction operations will be unavailable.
SWIFT_PROTOCOL("_TtP5mpsdk24KeyRolloverEventListener_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol KeyRolloverEventListener
/// This function will be called when a key rollover has started. Wallet UI should be updated
/// to indicate that services are not currently available. Transactions cannot be processed
/// until onTransactionsResumed has been called.
- (void)onTransactionsSuspended;
/// This function will be called when a key rollover has ended. Wallet UI should be updated to
/// indicate that services are now available again.
- (void)onTransactionsResumed;
@end


/// This exception is raised in case there is an attempt to access the Lde when it is in non
/// initialized state
SWIFT_CLASS("_TtC5mpsdk17LdeNotInitialized") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface LdeNotInitialized : McbpUncheckedException
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode SWIFT_UNAVAILABLE;
@end

@protocol ContactlessLog;

/// Event listener for events raised against a card
SWIFT_PROTOCOL("_TtP5mpsdk24TransactionEventListener_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol TransactionEventListener
/// Event raised when a contactless payment has been completed.
/// @param card           The card for which the event was raised
/// @param contactlessLog the information about the transaction
- (void)onContactlessPaymentCompletedWithCard:(id <Card> _Nonnull)card contactlessLog:(id <ContactlessLog> _Nonnull)contactlessLog;
/// Indicates that an error R-APDU was returned to the terminal but the transaction will
/// continue
/// regardless
/// @param card      The card for which the event was raised
/// @param exception original exception
- (void)onContactlessPaymentIncidentWithCard:(id <Card> _Nonnull)card exception:(NSError * _Nullable)exception;
/// Indicates that a contactless payment was unexpectedly aborted
/// @param card        The card for which the event was raised
/// @param abortReason the reason why the transaction did not complete successfully
/// @param exception   original exception
- (void)onContactlessPaymentAbortedWithCard:(id <Card> _Nonnull)card abortReason:(enum AbortReason)abortReason exception:(NSError * _Nullable)exception;
/// Indicate to the status provider that transaction has completed.  This may be used by the
/// implementation to clear authentication flags or in-memory PIN information
- (void)onTransactionStopped;
@end


/// Empty Card Event Listener Impl that does nothing.
SWIFT_CLASS("_TtC5mpsdk22MPSdkCardEventListener") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MPSdkCardEventListener : NSObject <TransactionEventListener>
/// Event raised when a contactless payment has been completed.
/// @param card           The card for which the event was raised
/// @param contactlessLog the information about the transaction
- (void)onContactlessPaymentCompletedWithCard:(id <Card> _Nonnull)card contactlessLog:(id <ContactlessLog> _Nonnull)contactlessLog;
/// Indicates that an error R-APDU was returned to the terminal but the transaction will
/// continue
/// regardless
/// @param card      The card for which the event was raised
/// @param exception Original exception
- (void)onContactlessPaymentIncidentWithCard:(id <Card> _Nonnull)card exception:(NSError * _Nullable)exception;
/// Indicates that a contactless payment was unexpectedly aborted
/// @param card        The card for which the event was raised
/// @param abortReason the reason why the transaction did not complete successfully
/// @param exception   Original exception
- (void)onContactlessPaymentAbortedWithCard:(id <Card> _Nonnull)card abortReason:(enum AbortReason)abortReason exception:(NSError * _Nullable)exception;
///
- (void)onTransactionStopped;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Default Card Manager Event Listener Impl that does nothing
SWIFT_CLASS("_TtC5mpsdk29MPSdkCardManagerEventListener")
@interface MPSdkCardManagerEventListener : NSObject <CardManagerEventListener>
/// @param cardId Identifier of the Card that has been provisioned
/// @return true if handled false otherwise
- (BOOL)onCardProvisionCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when token provisioning is failed.
/// @param errorCode    failure error code as String
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onCardProvisionFailureWithErrorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when replenishment of single use key for card is successful.
/// @param cardId                         Identifier of the card for which replenish was completed for
/// @param numberOfTransactionCredentials Number of TransactionCredentials received
/// does it make sense to have those parameters
/// @return true if handled false otherwise
- (BOOL)onReplenishCompletedWithCardId:(NSString * _Nonnull)cardId numberOfTransactionCredentials:(int32_t)numberOfTransactionCredentials SWIFT_WARN_UNUSED_RESULT;
/// Event raised when replenishment of single use key for card fails.
/// @param cardId       Card identifier
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onReplenishFailedWithCardId:(NSString * _Nonnull)cardId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when delete of card is successful.
/// @param cardId Identifier of the Card that has been deleted
/// @return true if handled false otherwise
- (BOOL)onDeleteCardCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when delete of card fails.
/// <p/>
/// @param cardId       Identifier of the card which delete has failed for
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onDeleteCardFailedWithCardId:(NSString * _Nonnull)cardId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Change PIN of card is successful.
/// @param cardId The identifier of the Card for which the PIN Change has been completed
/// @return true if handled false otherwise
- (BOOL)onCardPinChangeCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Change PIN of card fails.
/// @param cardId                  Identifier of the Card for which the PIN set has failed
/// @param mobilePinTriesRemaining The current Mobile PIN tries remaining. If the PIN was
/// entered incorrectly, the number of tries remaining may have
/// been decremented. If the Mobile PIN change was successful,
/// this value would have been reset.
/// Note that this PIN tries remaining count reflects the
/// number of PIN tries remaining for changing the Mobile PIN.
/// It does not necessarily reflect the number of PIN tries
/// remaining when transacting.
/// @param errorCode               A code identifying the error that occurred.
/// @param errorMessage            Error message describing the error that occurred
/// @param exception               Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onCardPinChangeFailedWithCardId:(NSString * _Nonnull)cardId mobilePinTriesRemaining:(int32_t)mobilePinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Set Mobile PIN of card is successful.
/// @param cardId Identifier of the Card for which the PIN Change has been completed
/// @return true if handled false otherwise
- (BOOL)onCardPinSetCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Set Card Mobile PIN fails.
/// @param cardId                  Identifier of the card for which card pin set has failed
/// @param mobilePinTriesRemaining The current Mobile PIN tries remaining. If the PIN was
/// entered incorrectly, the number of tries remaining may have
/// been decremented. If the Mobile PIN change was successful,
/// this value would have been reset.
/// Note that this PIN tries remaining count reflects the
/// number of PIN tries remaining for changing the Mobile PIN.
/// It does not necessarily reflect the number of PIN tries
/// remaining when transacting.
/// @param errorCode               A code identifying the error that occurred.
/// @param errorMessage            Error message describing the error that occurred
/// @param exception               Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onCardPinSetFailedWithCardId:(NSString * _Nonnull)cardId mobilePinTriesRemaining:(int32_t)mobilePinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Change PIN of Wallet is successful.
/// @return true if handled false otherwise
- (BOOL)onWalletPinChangeCompleted SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Change Mobile PIN of Wallet fails.
/// @param mobilePinTriesRemaining The current Mobile PIN tries remaining. If the PIN was
/// entered incorrectly, the number of tries remaining may have
/// been decremented. If the Mobile PIN change was successful,
/// this value would have been reset.
/// Note that this PIN tries remaining count reflects the
/// number of PIN tries remaining for changing the Mobile PIN.
/// It does not necessarily reflect the number of PIN tries
/// remaining when transacting.
/// @param errorCode               A code identifying the error that occurred.
/// @param errorMessage            Error message describing the error that occurred
/// @param exception               Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onWalletPinChangeFailedWithMobilePinTriesRemaining:(int32_t)mobilePinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Set Wallet Mobile PIN is successful.
/// @return true if handled false otherwise
- (BOOL)onSetWalletPinCompleted SWIFT_WARN_UNUSED_RESULT;
/// Event raised when Set Wallet Mobile PIN fails.
/// @param mobilePinTriesRemaining The current Mobile PIN tries remaining. If the PIN was
/// entered incorrectly, the number of tries remaining may have
/// been decremented. If the Mobile PIN change was successful,
/// this value would have been reset.
/// Note that this PIN tries remaining count reflects the
/// number of PIN tries remaining for changing the Mobile PIN.
/// It does not necessarily reflect the number of PIN tries
/// remaining when transacting.
/// @param errorCode               A code identifying the error that occurred.
/// @param errorMessage            Error message describing the error that occurred
/// @param exception               Error exception thrown
/// @return true if handled false otherwise
- (BOOL)onSetWalletPinFailedWithMobilePinTriesRemaining:(int32_t)mobilePinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when the system health with CMS-D is successful.
/// @return true if handled false otherwise
- (BOOL)onSystemHealthCompleted SWIFT_WARN_UNUSED_RESULT;
/// Event raised when the system health request with CMS-D failed
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if successful
- (BOOL)onSystemHealthFailureWithErrorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// Event raised when change pin request is started, event gives the task id for the task.
/// @param cardId Identifier of the Card for which the change mobile pin has been started
/// @param taskId as string
/// @return true if successful
- (BOOL)onChangeCardMobilePinStartedWithCardId:(NSString * _Nonnull)cardId taskId:(NSString * _Nonnull)taskId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when change pin request is started, event gives the task id for the task.
/// @param taskId as string
/// @return true if successful
- (BOOL)onChangeWalletMobilePinStartedWithTaskId:(NSString * _Nonnull)taskId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when reset of PIN of card is initiated by CMS-D and it is successful.
/// @param cardId Card’s token unique reference as assign by MDES
/// @return true if handled false otherwise
- (BOOL)onCardMobilePinResetCompletedWithCardId:(NSString * _Nonnull)cardId SWIFT_WARN_UNUSED_RESULT;
/// Event raised when reset of PIN of Wallet is initiated by CMS-D and it is successful.
/// @return true if handled false otherwise
- (BOOL)onWalletMobilePinResetCompleted SWIFT_WARN_UNUSED_RESULT;
/// The operation to retrieve the status of an ongoing task has been completed
/// @param taskStatus the status of the task as a string
/// @return true if handled, false otherwise
- (BOOL)onTaskStatusCompletedWithTaskStatus:(NSString * _Nonnull)taskStatus SWIFT_WARN_UNUSED_RESULT;
/// The operation to retrieve the status of an ongoing task has failed. Note that this does
/// not indicate that the task itself has failed, but that the request to retrieve the status
/// has not been successful
/// @param errorCode    A code identifying the error that occurred.
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if handled, false otherwise
- (BOOL)onTaskStatusFailedWithErrorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
/// The operation to request a new session has completed
/// @return true if handled, false otherwise
- (BOOL)onRequestSessionCompleted SWIFT_WARN_UNUSED_RESULT;
/// The operation to request a new session has failed
/// @param errorCode    Error Code identifying the error
/// @param errorMessage Error message describing the error that occurred
/// @param exception    Error exception thrown
/// @return true if successful
- (BOOL)onRequestSessionFailedWithErrorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(NSError * _Nullable)exception SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RMKekEncryptedMobileKeys;

/// Default implementation of the communication parameters provider
SWIFT_CLASS("_TtC5mpsdk36MPSdkCommunicationParametersProvider") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MPSdkCommunicationParametersProvider : NSObject <CommunicationParametersProvider>
/// Creates a new communication parameters provider, responsible for retrieving and persisting
/// mobile keys and other remote management parameters
/// @param dataBase the database instance
- (nonnull instancetype)initWithDataBase:(id <McbpDataBase> _Nonnull)dataBase OBJC_DESIGNATED_INITIALIZER;
/// The registration response data will contain the mobile keys required by the SDK in order to
/// communicate with the Remote Management Service. This data can be provided here in order for
/// it to be persisted to the database
/// @param encryptedMobileKeys the mobile keys necessary for communication and encryption
/// @param remoteManagementUrl the URL for the CMS-D
- (void)setCommunicationParameters:(id <RMKekEncryptedMobileKeys> _Nonnull)encryptedMobileKeys remoteManagementUrl:(NSString * _Nonnull)remoteManagementUrl error:(NSError * _Nullable * _Nullable)error;
/// Used to retrieve a set of RM KEK protected mobile keys
/// @return the protected mobile keys
- (id <RMKekEncryptedMobileKeys> _Nullable)getEncryptedMobileKeys:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Used to retrieve the location of the Remote Management Service
/// @return the URL of the remote management service
- (NSString * _Nonnull)getRemoteManagementServiceUrl SWIFT_WARN_UNUSED_RESULT;
/// Used by the Remote Management module to check if the SDK has communication parameters
/// available.
/// @return true if communication parameters are available for use, false otherwise
- (BOOL)hasCommunicationParameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC5mpsdk18MPSdkDsrpInputData") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MPSdkDsrpInputData : NSObject <DsrpInputData>
///
- (nonnull instancetype)initWithDsrpTransactionInput:(id <DsrpTransactionInput> _Nonnull)dsrpTransactionInput OBJC_DESIGNATED_INITIALIZER;
///
- (NSArray<NSNumber *> * _Nonnull)getAmount SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getCountryCode SWIFT_WARN_UNUSED_RESULT;
///
- (enum CryptogramDataType)getCryptogramType SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nonnull)getCurrencyCode SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getTransactionDate SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getTransactionType SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nonnull)getUnpredictableNumber SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// An implementation of the Key Rollover event listener used internally within the SDK to suspend interaction with the
/// main points of integration with the Wallet.
SWIFT_CLASS("_TtC5mpsdk29MPSdkKeyRolloverEventListener") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MPSdkKeyRolloverEventListener : NSObject <KeyRolloverEventListener>
/// Default implementation of the rollover event listener. Used to lock down the interfaces used by the Wallet
/// to interact with the SDK.
/// @param walletKeyRolloverEventListener the rollover event listener provided by the Wallet
/// @param cardManagerImpl                the card manager instance
- (nonnull instancetype)initWithWalletKeyRolloverEventListener:(id <KeyRolloverEventListener> _Nonnull)walletKeyRolloverEventListener cardManagerImpl:(CardManagerImpl * _Nonnull)cardManagerImpl OBJC_DESIGNATED_INITIALIZER;
/// This function will be called when a key rollover has started. Wallet UI should be updated
/// to indicate that services are not currently available. Transactions cannot be processed
/// until onTransactionsResumed has been called.
- (void)onTransactionsSuspended;
/// This function will be called when a key rollover has ended. Wallet UI should be updated to
/// indicate that services are now available again.
- (void)onTransactionsResumed;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol TransactionCredentialManager;
@class LocalDekEncryptedData;
@protocol CryptoContext;

///
SWIFT_CLASS("_TtC5mpsdk16MPSdkMChipCrypto") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MPSdkMChipCrypto : NSObject <McbpCrypto2D>
///
- (nonnull instancetype)initWithTransactionCrypto:(id <TransactionCrypto> _Nonnull)transactionCrypto transactionCredentialManager:(id <TransactionCredentialManager> _Nullable)transactionCredentialManager iccPrivateKeyCrtComponents:(LocalDekEncryptedData * _Nullable)iccPrivateKeyCrtComponents OBJC_DESIGNATED_INITIALIZER;
///
- (id <CryptoContext> _Nonnull)setContext:(enum KeysContext)keysContext credentialsScope:(enum CredentialsScope)credentialsScope SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nonnull)computeApplicationCryptogram:(NSArray<NSNumber *> * _Nonnull)transactionData keyType:(enum KeyType)keyType SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)computeSignedDynamicData:(NSArray<NSNumber *> * _Nonnull)encryptedIdn cryptogramInformationData:(uint8_t)cryptogramInformationData applicationCryptogram:(NSArray<NSNumber *> * _Nonnull)applicationCryptogram pDolRelatedData:(NSArray<NSNumber *> * _Nonnull)pdolRelatedData generateAcResponse:(NSArray<NSNumber *> * _Nonnull)generateAcResponse additionalIccDynamicData:(NSArray<NSNumber *> * _Nonnull)additionalIccDynamicData unpredictableNumber:(NSArray<NSNumber *> * _Nonnull)unpredictableNumber error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)computeCvc3:(NSArray<NSNumber *> * _Nonnull)transactionData keyType:(enum KeyType)keyType SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nonnull)sha1:(NSArray<NSNumber *> * _Nonnull)dataToHash SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nonnull)sha256:(NSArray<NSNumber *> * _Nonnull)dataToHash SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nonnull)randomWithSize:(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol ContactlessPaymentData;
@protocol MCEDsrpData;
@protocol QrcData;
@protocol CommonData;

///
SWIFT_CLASS("_TtC5mpsdk23MPSdkMChipEngineProfile") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MPSdkMChipEngineProfile : NSObject <MChipEngineProfile>
///
- (nonnull instancetype)initWithCardProfile:(id <DigitizedCard> _Nonnull)cardProfile OBJC_DESIGNATED_INITIALIZER;
///
- (id <ContactlessPaymentData> _Nullable)getContactlessProfileData SWIFT_WARN_UNUSED_RESULT;
///
- (id <MCEDsrpData> _Nullable)getDsrpProfileData SWIFT_WARN_UNUSED_RESULT;
///
- (id <QrcData> _Nullable)getQrcProfileData SWIFT_WARN_UNUSED_RESULT;
///
- (id <CommonData> _Nonnull)getCommonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC5mpsdk28MPSdkMchipWalletCdCvmManager") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MPSdkMchipWalletCdCvmManager : NSObject <WalletCdCvmManager>
///
- (nonnull instancetype)initWithCdCvmStatusProvider:(id <CdCvmStatusProvider> _Nonnull)cdCvmStatusProvider card:(id <Card> _Nonnull)card OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)isCdCvmEnabled SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)isAuthenticated SWIFT_WARN_UNUSED_RESULT;
///
- (NSInteger)getTimeOfLastAuthentication SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)isCdCvmBlocked SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol WalletDataCrypto;

/// Provides security services to the Wallet. Can be used to encrypt sensitive Wallet data through
/// the use of the
/// WalletCrypto interface and allows the rollover of keys used by the SDK
SWIFT_PROTOCOL("_TtP5mpsdk22WalletSecurityServices_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol WalletSecurityServices
/// Retrieve the interface used to provide crypto services for Wallet Data
/// @return an instance of WalletDataCrypto
- (id <WalletDataCrypto> _Nonnull)getWalletCryptoApi SWIFT_WARN_UNUSED_RESULT;
/// Initiates a rollover of the DST_DEK and DST_MAC used to encrypt and verify data at rest in
/// the database
- (void)rolloverDatabaseStorageKeys;
/// Initiates a rollover of the RM_KEK used to encrypt the remote management keys
/// (MAC, DEK, Transport) received from the CMS-D
- (void)rolloverRemoteManagementKeyEncryptionKey;
/// Initiates a rollover of the L_DEK used as a replacement for the DEK within the SDK
- (void)rolloverLocalDataEncryptionKey;
/// Initiates a rollover of the W_DEK used to encrypt sensitive Wallet data such as the PIN
- (void)rolloverWalletDataEncryptionKey;
@end

@protocol DatabaseCrypto;
@protocol RemoteManagementCrypto;

/// Provides an interface between the SDK, the Crypto module and the Database module and provides
/// methods for rolling over the keys used to encrypt data within the SDK
SWIFT_PROTOCOL("_TtP5mpsdk16SecurityServices_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol SecurityServices <WalletSecurityServices>
/// Returns a set of Remote Management keys protected by the RM_KEK associated with a particular
/// mobile keyset id
/// @param mobileKeySetId the key set identifier
/// @return a set of Remote Management keys protected by the RM_KEK
/// @exception GeneralSecurityException when found security related problem
- (id <RMKekEncryptedMobileKeys> _Nullable)getRemoteManagementKeysForMobileKeySetId:(NSString * _Nonnull)mobileKeySetId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the interface used to provide crypto services for the database
/// @return an instance of DatabaseCrypto
- (id <DatabaseCrypto> _Nonnull)getDatabaseCryptoApi SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the interface used to provide crypto services for M/Chip Engine
/// @return an instance of M/Chip Engine
- (id <TransactionCrypto> _Nonnull)getTransactionCryptoApi SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the interface used to provide crypto services for Remote Management
/// @return an instance of RemoteManagementCrypto
- (id <RemoteManagementCrypto> _Nonnull)getRemoteManagementCryptoApi SWIFT_WARN_UNUSED_RESULT;
/// Wipes all keys and other parameters stored by Crypto Engine
/// @return true if success
- (BOOL)wipeCryptoParameters SWIFT_WARN_UNUSED_RESULT;
@end


@protocol McbpCryptoServices;
@protocol WalletIdentificationDataProvider;

/// Provides an interface between the SDK, the Crypto module and the Database module and provides
/// methods for rolling over the keys used to encrypt data within the SDK
SWIFT_CLASS("_TtC5mpsdk21MPSdkSecurityServices") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MPSdkSecurityServices : NSObject <SecurityServices>
/// Create a new instance of the Secure Services
/// @param mcbpDataBase                     the SDK MCBP Database
/// @param keyRolloverEventListener         callback to allow the SDK to suspend / resume
/// transactions
/// @param cryptoServices                   the implementation of the Crypto Engine
/// @param walletIdentificationDataProvider Callback allowing the SDK to retrieve Wallet data
/// from the Wallet
/// @param pinDataProvider                  Class to provide locally stored PIN, can be null if
/// no PIN stored locally
- (nonnull instancetype)initWithMcbpDataBase:(id <McbpDataBase> _Nonnull)mcbpDataBase keyRolloverEventListener:(id <KeyRolloverEventListener> _Nonnull)keyRolloverEventListener cryptoServices:(id <McbpCryptoServices> _Nonnull)cryptoServices walletIdentificationDataProvider:(id <WalletIdentificationDataProvider> _Nonnull)walletIdentificationDataProvider pinDataProvider:(id <PinDataProvider> _Nullable)pinDataProvider OBJC_DESIGNATED_INITIALIZER;
///
- (id <WalletDataCrypto> _Nonnull)getWalletCryptoApi SWIFT_WARN_UNUSED_RESULT;
///
- (id <DatabaseCrypto> _Nonnull)getDatabaseCryptoApi SWIFT_WARN_UNUSED_RESULT;
///
- (id <TransactionCrypto> _Nonnull)getTransactionCryptoApi SWIFT_WARN_UNUSED_RESULT;
///
- (id <RemoteManagementCrypto> _Nonnull)getRemoteManagementCryptoApi SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)wipeCryptoParameters SWIFT_WARN_UNUSED_RESULT;
/// Initiates a rollover of the DST_DEK and DST_MAC used to encrypt data at rest in the database
- (void)rolloverDatabaseStorageKeys;
/// Initiates a rollover of the RM_KEK used to encrypt the remote management keys
/// (MAC, DEK, Transport) received from the CMS-D
- (void)rolloverRemoteManagementKeyEncryptionKey;
/// Initiates a rollover of the L_DEK used as a replacement for the DEK within the SDK
- (void)rolloverLocalDataEncryptionKey;
/// Initiates a rollover of the W_DEK used to encrypt sensitive Wallet data such as the PIN
- (void)rolloverWalletDataEncryptionKey;
/// Returns a set of Remote Management keys protected by the RM_KEK associated with a particular
/// mobile keyset id
/// @param mobileKeySetId the key set identifier
/// @return a set of Remote Management keys protected by the RM_KEK
- (id <RMKekEncryptedMobileKeys> _Nullable)getRemoteManagementKeysForMobileKeySetId:(NSString * _Nonnull)mobileKeySetId error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class TransactionCredentials;

///
SWIFT_PROTOCOL("_TtP5mpsdk28TransactionCredentialManager_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol TransactionCredentialManager
/// Get transaction credentials for a given scope
/// @return an instance of {@link TransactionCredentials}
- (TransactionCredentials * _Nullable)getCredentialsWithCredentialsScope:(enum CredentialsScope)credentialsScope SWIFT_WARN_UNUSED_RESULT;
/// Get dummy transaction credentials
/// @return an instance of {@link TransactionCredentials}
- (TransactionCredentials * _Nonnull)getDummyCredentials SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides common functionality for both contactless and remote transaction credential managers
SWIFT_CLASS("_TtC5mpsdk34MPSdkTransactionCredentialsManager") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MPSdkTransactionCredentialsManager : NSObject <TransactionCredentialsManager, TransactionCredentialManager>
///
- (nonnull instancetype)initWithCard:(CardImpl * _Nonnull)card transactionCrypto:(id <TransactionCrypto> _Nonnull)transactionCrypto pinDataProvider:(id <PinDataProvider> _Nullable)pinDataProvider credentialsAccessibilityPolicy:(id <CredentialsAccessibilityPolicy> _Nonnull)credentialsAccessibilityPolicy OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)hasValidCredentialsFor:(enum CredentialsScope)credentialsScope SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)areUmdCredentialsSubjectToCvmFor:(enum TransactionRange)transactionRange scope:(enum CredentialsScope)credentialsScope SWIFT_WARN_UNUSED_RESULT;
/// Get transaction credentials for a given scope
/// @param credentialsScope {@link CredentialsScope}
/// @return Returns {@link TransactionCredentials } if PIN has been set else returns null
- (TransactionCredentials * _Nullable)getCredentialsWithCredentialsScope:(enum CredentialsScope)credentialsScope SWIFT_WARN_UNUSED_RESULT;
///
- (TransactionCredentials * _Nonnull)getDummyCredentials SWIFT_WARN_UNUSED_RESULT;
/// Determines if the SDK is able to retrieve a protected PIN
/// @return true if a protected PIN is available
- (BOOL)isEncryptedPinAvailable SWIFT_WARN_UNUSED_RESULT;
/// Attempts to retrieve a single use key based on the PIN provided to the validation status
/// provider
/// @param encryptedSingleUseKey the single use key protected by L_DEK
/// @return the transaction credentials
- (LocalDekEncryptedData * _Nullable)fromSingleUseKeyToSessionKeyWithEncryptedSingleUseKey:(LocalDekEncryptedData * _Nonnull)encryptedSingleUseKey SWIFT_WARN_UNUSED_RESULT;
/// Given the keys, generates the transactions credentials which can be used within MCMLite
/// @param mdSessionKey  the MD session key
/// @param umdSessionKey the UMD session key
/// @return the transaction credentials, ready to be used by MCM
- (TransactionCredentials * _Nonnull)buildTransactionCredentialsWithMdSessionKey:(LocalDekEncryptedData * _Nonnull)mdSessionKey umdSessionKey:(LocalDekEncryptedData * _Nonnull)umdSessionKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol McbpInitializer;

/// Interface representing the payment library which is payment technology agnostic
SWIFT_PROTOCOL("_TtP5mpsdk30MasterCardMobilePaymentLibrary_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol MasterCardMobilePaymentLibrary
/// Get an instance of the MCBP Initializer for a particular payment technology
/// @return the appropriate MCBP Initializer
- (id <McbpInitializer> _Nonnull)getMcbpInitializer SWIFT_WARN_UNUSED_RESULT;
@end


///
SWIFT_PROTOCOL("_TtP5mpsdk47MasterCardMobilePaymentLibraryInternalInterface_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol MasterCardMobilePaymentLibraryInternalInterface
@end


/// An class representing the payment library which is payment technology agnostic
SWIFT_CLASS("_TtC5mpsdk34MasterCardMobilePaymentLibraryImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MasterCardMobilePaymentLibraryImpl : NSObject <MasterCardMobilePaymentLibrary, MasterCardMobilePaymentLibraryInternalInterface>
///
- (id <McbpInitializer> _Nonnull)getMcbpInitializer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


///
SWIFT_CLASS("_TtC5mpsdk41MasterCardMobilePaymentLibraryInitializer") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MasterCardMobilePaymentLibraryInitializer : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MasterCardMobilePaymentLibraryInitializer * _Nonnull shared;)
+ (MasterCardMobilePaymentLibraryInitializer * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
///
- (id <MasterCardMobilePaymentLibrary> _Nonnull)initialize SWIFT_WARN_UNUSED_RESULT;
@end


@protocol MpaManagementHelper;

/// Top level MCBP Mcbp Library Interfaces
SWIFT_PROTOCOL("_TtP5mpsdk4Mcbp_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol Mcbp
/// Get the Card Manager
- (id <CardManager> _Nonnull)getCardManager SWIFT_WARN_UNUSED_RESULT;
/// Get the Security Services
/// @return the Security Services
- (id <WalletSecurityServices> _Nonnull)getWalletSecurityServices SWIFT_WARN_UNUSED_RESULT;
/// Get the Remote Management Communication Manager
- (id <RemoteCommunicationManager> _Nonnull)getRemoteCommunicationManager SWIFT_WARN_UNUSED_RESULT;
/// Reset the status of the SDK to not provisioned.
/// All the cards and credentials are securely wiped and the database wiped.
/// The SDK goes into not initialized state.
- (void)resetToUninitializedState;
/// Get the MPA Management API
/// @return the MPA Management API
- (id <MpaManagementHelper> _Nonnull)getMpaManagementHelper SWIFT_WARN_UNUSED_RESULT;
/// Mobile keys are received in response of wallet registration are saved in data base.
/// This returns if the mobile key set is available or not in database.
/// @return true if wallet is registered and mobile keys are available in database
- (BOOL)isMobileKeySetAvailable SWIFT_WARN_UNUSED_RESULT;
/// Set the wallet metadata information
/// @param walletData The metadata information
- (void)saveWalletDataWithWalletData:(id <DatabaseWalletData> _Nonnull)walletData;
/// Get the wallet metadata information
/// @return The metadata information stored by wallet
- (id <DatabaseWalletData> _Nonnull)getWalletData SWIFT_WARN_UNUSED_RESULT;
@end



/// Exception when the card is not found
SWIFT_CLASS("_TtC5mpsdk16McbpCardNotFound") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface McbpCardNotFound : McbpCardException
/// Constructor. A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode SWIFT_UNAVAILABLE;
@end


/// Generic MCBP exception error codes list.
typedef SWIFT_ENUM(NSInteger, McbpErrorCode) {
/// Unknown error occurred
  McbpErrorCodeGENERAL_ERROR = 1101,
/// Cryptographic error occurred
  McbpErrorCodeCRYPTO_ERROR = 1102,
/// Error occurred while executing operation on CMS-D
  McbpErrorCodeSERVER_ERROR = 1103,
/// Local protected database error occurred
  McbpErrorCodeLDE_ERROR = 1104,
/// Unknown error occurred while communication
  McbpErrorCodeUNKNOWN_HTTP_ERROR_CODE = 1105,
/// Error occurred at SSL level while communication
  McbpErrorCodeSSL_ERROR_CODE = 1106,
/// Http timeout occurred
  McbpErrorCodeHTTP_TIMEOUT_OCCURRED = 1107,
/// Failed to retrieve public key certificate.
  McbpErrorCodeFAILED_TO_RETRIEVE_CERTIFICATE = 1108,
/// Card is already provision
  McbpErrorCodeCARD_ALREADY_PROVISION = 1109,
/// User already register with CMS-D
  McbpErrorCodeUSER_ALREADY_REGISTER = 1110,
};


/// Top level MCBP Mcbp Library Interfaces
SWIFT_CLASS("_TtC5mpsdk8McbpImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface McbpImpl : NSObject <Mcbp>
/// Constructor
/// @param cardManager                the card manager
/// @param remoteCommunicationManager the remote communication manager
/// @param mcbpDataBase               the database implementation
/// @param apduProcessor              the entry point for transaction processing
/// @param securityServices           the secure services instance which serves as a conduit
/// between
- (nonnull instancetype)initWithCardManager:(id <CardManager> _Nonnull)cardManager remoteCommunicationManager:(id <RemoteCommunicationManager> _Nonnull)remoteCommunicationManager mcbpDataBase:(id <McbpDataBase> _Nonnull)mcbpDataBase securityServices:(id <SecurityServices> _Nonnull)securityServices OBJC_DESIGNATED_INITIALIZER;
/// Get the Card Manager
- (id <CardManager> _Nonnull)getCardManager SWIFT_WARN_UNUSED_RESULT;
/// Get the Security Manager
/// @return the security services for the wallet to use
- (id <WalletSecurityServices> _Nonnull)getWalletSecurityServices SWIFT_WARN_UNUSED_RESULT;
/// Get the Remote Management Communication Manager
- (id <RemoteCommunicationManager> _Nonnull)getRemoteCommunicationManager SWIFT_WARN_UNUSED_RESULT;
/// Reset the status of the SDK to not provisioned.
/// All the cards and credentials are securely wiped and the database wiped.
/// The SDK goes into not initialized state.
- (void)resetToUninitializedState;
/// Get the MPA Registration helper
/// @return the MPA Registration helper
- (id <MpaManagementHelper> _Nonnull)getMpaManagementHelper SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)isMobileKeySetAvailable SWIFT_WARN_UNUSED_RESULT;
///
- (void)saveWalletDataWithWalletData:(id <DatabaseWalletData> _Nonnull)walletData;
///
- (id <DatabaseWalletData> _Nonnull)getWalletData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol HttpManager;
@protocol ActiveCardProvider;
@protocol McbpLogger;
@protocol SecurityIncidentService;

///
SWIFT_PROTOCOL("_TtP5mpsdk15McbpInitializer_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol McbpInitializer
/// Wallet implementation of ConsentManager, used during the transaction to check if user has
/// consented for the transaction.
/// @see WalletConsentManager
- (id <McbpInitializer> _Nonnull)withWalletConsentManagerWithConsentProvider:(id <WalletConsentManager> _Nonnull)consentProvider SWIFT_WARN_UNUSED_RESULT;
/// The HTTP Manager to use
/// @param httpManager the HTTP Manager to use
/// @return the initializer
- (id <McbpInitializer> _Nonnull)withHttpManagerWithHttpManager:(id <HttpManager> _Nonnull)httpManager SWIFT_WARN_UNUSED_RESULT;
/// Sets the CdCvm validator to use when CVM is required
/// @param cdCvmStatusProvider the CD CVM Validator to use when CVM is required
/// @return the initializer
- (id <McbpInitializer> _Nonnull)withCdCvmStatusProviderWithCdCvmStatusProvider:(id <CdCvmStatusProvider> _Nonnull)cdCvmStatusProvider SWIFT_WARN_UNUSED_RESULT;
/// Specify a crypto library for crypto operations used by all MPSDK components
- (id <McbpInitializer> _Nonnull)withCryptoEngineWithCryptoEngine:(id <McbpCryptoServices> _Nonnull)cryptoEngine SWIFT_WARN_UNUSED_RESULT;
/// Sets a card manager event listener to receive management events
/// @param cardManagerEventListener the event listener
/// @return the initializer
- (id <McbpInitializer> _Nonnull)withCardManagerEventListenerWithCardManagerEventListener:(id <CardManagerEventListener> _Nonnull)cardManagerEventListener SWIFT_WARN_UNUSED_RESULT;
/// Sets a transaction event listener
/// @param transactionEventListener the event listener
/// @return the initializer
- (id <McbpInitializer> _Nonnull)withTransactionEventListenerWithTransactionEventListener:(id <TransactionEventListener> _Nonnull)transactionEventListener SWIFT_WARN_UNUSED_RESULT;
/// Sets the active card provider to use when the SDK needs to retrieve the card to use for
/// payment
/// @param activeCardProvider the active card provider
/// @return this initializer
- (id <McbpInitializer> _Nonnull)withActiveCardProviderWithActiveCardProvider:(id <ActiveCardProvider> _Nonnull)activeCardProvider SWIFT_WARN_UNUSED_RESULT;
/// Sets the key rollover event listener so the Wallet can receive events when key rollovers
/// @param keyRolloverEventListener rollover event listener
/// @return this initializer
- (id <McbpInitializer> _Nonnull)withKeyRolloverEventListenerWithKeyRolloverEventListener:(id <KeyRolloverEventListener> _Nonnull)keyRolloverEventListener SWIFT_WARN_UNUSED_RESULT;
/// Sets the Registration Data Provider that the SDK can use to obtain registration data
/// protected by the W_DEK
/// @param walletIdentificationDataProvider the registration data
/// @return this initializer
- (id <McbpInitializer> _Nonnull)withWalletIdentificationDataProviderWithWalletIdentificationDataProvider:(id <WalletIdentificationDataProvider> _Nonnull)walletIdentificationDataProvider SWIFT_WARN_UNUSED_RESULT;
/// Reference to the Implementation of {@link RemoteCommunicationManager} that is
/// implemented by Remote Management to provide a handle to all remote operations to be used
/// by SDK. If none is specified, the SDK will use the default implementation.
/// @see RemoteCommunicationManager
- (id <McbpInitializer> _Nonnull)usingOptionalRemoteCommunicationManagerWithRemoteCommunicationManager:(id <RemoteCommunicationManager> _Nullable)remoteCommunicationManager SWIFT_WARN_UNUSED_RESULT;
/// Reference to the implementation of McbpDataBase that will be used by the core SDK for
/// storing data.  If none is specified the SDK will use its internal default database
/// @see McbpDataBase
- (id <McbpInitializer> _Nonnull)usingOptionalCustomDatabaseWithDatabase:(id <McbpDataBase> _Nullable)database SWIFT_WARN_UNUSED_RESULT;
/// Sets a remote communication event listener to receive remote communication events
/// @param remoteCommunicationEventListener the event listener
/// @return the initializer
- (id <McbpInitializer> _Nonnull)usingOptionalRemoteCommunicationEventListenerWithRemoteCommunicationEventListener:(id <RemoteCommunicationEventListener> _Nullable)remoteCommunicationEventListener SWIFT_WARN_UNUSED_RESULT;
/// Wallet implementation of the provider to give decision about output of transaction.
/// If null is passed by the wallet,the transaction output will depend on the advice provided
/// by the MasterCard advice manager within the SDK.
/// @see WalletAdviceManager
- (id <McbpInitializer> _Nonnull)usingOptionalAdviceManagerWithWalletAdviceManager:(id <WalletAdviceManager> _Nullable)walletAdviceManager SWIFT_WARN_UNUSED_RESULT;
/// Default behavior is to use Wallet level Pin.  Call this @objc function to switch to separate Pin
/// for each card.
- (id <McbpInitializer> _Nonnull)usingOptionalCardLevelPin SWIFT_WARN_UNUSED_RESULT;
/// Wallet implementation of the Credentials Replenishment Policy to determine whether new
/// credentials should be requested when a credential has been used and on start up
/// @param credentialsReplenishmentPolicy the credentials replenishment policy to use
/// @return the Initializer
- (id <McbpInitializer> _Nonnull)usingOptionalCredentialsReplenishmentPolicyWithCredentialsReplenishmentPolicy:(id <CredentialsReplenishmentPolicy> _Nullable)credentialsReplenishmentPolicy SWIFT_WARN_UNUSED_RESULT;
/// Sets the Pin Data Provider that can be used to rollover a pseudo PIN stored for use with
/// shared CVM
/// @param pinDataProvider the pin data provider
/// @return this initializer
- (id <McbpInitializer> _Nonnull)usingOptionalPinDataProviderForKeyRolloverWithPinDataProvider:(id <PinDataProvider> _Nullable)pinDataProvider SWIFT_WARN_UNUSED_RESULT;
/// Sets the Pin Data Provider that can be used to ask for Mobile PIN during the transaction
/// MP-SDK should be initialized with this API iff you are building a wallet with
/// CardHolderValidator as MOBILE_PIN.
/// @param pinDataProvider the pin data provider
/// @return this initializer
/// @see com.mastercard.mpsdk.componentinterface.CardholderValidator
- (id <McbpInitializer> _Nonnull)usingOptionalPinDataProviderForTransactionsWithPinDataProvider:(id <PinDataProvider> _Nullable)pinDataProvider SWIFT_WARN_UNUSED_RESULT;
/// Sets the logger implementation to use
/// @param mcbpLogger the logger implementation
/// @return this initializer
- (id <McbpInitializer> _Nonnull)usingOptionalMcbpLoggerWithMcbpLogger:(id <McbpLogger> _Nullable)mcbpLogger SWIFT_WARN_UNUSED_RESULT;
/// Sets the {@link CommunicationRetryParametersProvider} implementation.
/// @return this initializer
- (id <McbpInitializer> _Nonnull)usingOptionalCommunicationRetryParametersProviderWithCommunicationRetryParametersProvider:(id <CommunicationRetryParametersProvider> _Nullable)communicationRetryParametersProvider SWIFT_WARN_UNUSED_RESULT;
///
- (id <McbpInitializer> _Nonnull)usingOptionalSecurityIncidentServiceWithSecurityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService SWIFT_WARN_UNUSED_RESULT;
/// Wallet implementation of the Credentials Accessibility Policy for transaction to determine
/// whether credentials access is subject to the user authentication.
/// A default implementation of SDK is used in case wallet does not provide it’s own
/// implementation.
/// The default implementation always return false indicating the user authentication is not
/// required to access the credentials in database.
/// @param credentialsAccessibilityPolicy Policy for different transaction range.
- (id <McbpInitializer> _Nonnull)usingOptionalCredentialsAccessibilityPolicyWithCredentialsAccessibilityPolicy:(id <CredentialsAccessibilityPolicy> _Nullable)credentialsAccessibilityPolicy SWIFT_WARN_UNUSED_RESULT;
/// Initialize the SDK using the currently set options.
/// @return the MCBP interface implementation
- (id <Mcbp> _Nonnull)initialize SWIFT_WARN_UNUSED_RESULT;
@end


/// Builder for the Mcbp SDK
/// <p/>
/// The builder is responsible of collecting all the configuration data to properly initialize the
/// MCBP SDK
/// <p/>
/// If any of the key parameter is missing an exception will be raised when attempting to build the
/// object
SWIFT_CLASS("_TtC5mpsdk19McbpInitializerImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface McbpInitializerImpl : NSObject <McbpInitializer>
/// Create a new initializer for the given payment library instance
/// @param paymentLibrary the payment library to use
- (nonnull instancetype)initWithPaymentLibrary:(id <MasterCardMobilePaymentLibraryInternalInterface> _Nonnull)paymentLibrary OBJC_DESIGNATED_INITIALIZER;
/// Wallet implementation of the Credentials Accessibility Policy for transaction to determine
/// whether credentials access is subject to the user authentication.
/// A default implementation of SDK is used in case wallet does not provide it’s own
/// implementation.
/// The default implementation always return false indicating the user authentication is not
/// required to access the credentials in database.
/// @param credentialsAccessibilityPolicy Policy for different transaction range.
- (id <McbpInitializer> _Nonnull)usingOptionalCredentialsAccessibilityPolicyWithCredentialsAccessibilityPolicy:(id <CredentialsAccessibilityPolicy> _Nullable)credentialsAccessibilityPolicy SWIFT_WARN_UNUSED_RESULT;
/// Reference to the Implementation of {@link RemoteCommunicationManager} that is
/// implemented by Remote Management to provide a handle to all remote operations to be used
/// by SDK. If none is specified, the SDK will use the default implementation.
/// @see RemoteCommunicationManager
- (id <McbpInitializer> _Nonnull)usingOptionalRemoteCommunicationManagerWithRemoteCommunicationManager:(id <RemoteCommunicationManager> _Nullable)remoteCommunicationManager SWIFT_WARN_UNUSED_RESULT;
/// Reference to the implementation of McbpDataBase that will be used by the core SDK for
/// storing data.  If none is specified the SDK will use its internal default database
/// @see McbpDataBase
- (id <McbpInitializer> _Nonnull)usingOptionalCustomDatabaseWithDatabase:(id <McbpDataBase> _Nullable)database SWIFT_WARN_UNUSED_RESULT;
/// Specify a custom crypto library for the McmLite
- (id <McbpInitializer> _Nonnull)withCryptoEngineWithCryptoEngine:(id <McbpCryptoServices> _Nonnull)cryptoEngine SWIFT_WARN_UNUSED_RESULT;
/// Wallet implementation of the Key Management Policy to determine whether new keys should be
/// requested when a key has been used and on start up
/// @param credentialsReplenishmentPolicy the key management policy to use
/// @return the Initializer
- (id <McbpInitializer> _Nonnull)usingOptionalCredentialsReplenishmentPolicyWithCredentialsReplenishmentPolicy:(id <CredentialsReplenishmentPolicy> _Nullable)credentialsReplenishmentPolicy SWIFT_WARN_UNUSED_RESULT;
/// Sets a remote communication event listener to receive remote communication events
/// @param remoteCommunicationEventListener the event listener
/// @return the initializer
- (id <McbpInitializer> _Nonnull)usingOptionalRemoteCommunicationEventListenerWithRemoteCommunicationEventListener:(id <RemoteCommunicationEventListener> _Nullable)remoteCommunicationEventListener SWIFT_WARN_UNUSED_RESULT;
/// Sets a card manager event listener to receive management events
/// @param cardManagerEventListener the event listener
/// @return the initializer
- (id <McbpInitializer> _Nonnull)withCardManagerEventListenerWithCardManagerEventListener:(id <CardManagerEventListener> _Nonnull)cardManagerEventListener SWIFT_WARN_UNUSED_RESULT;
/// Sets a transaction event listener
/// @param transactionEventListener the event listener
/// @return the initializer
- (id <McbpInitializer> _Nonnull)withTransactionEventListenerWithTransactionEventListener:(id <TransactionEventListener> _Nonnull)transactionEventListener SWIFT_WARN_UNUSED_RESULT;
/// Wallet implementation of the provider to give decision about output of transaction.
/// If null is passed by the wallet,the transaction output will depend on the advice provided
/// by the MasterCard advice manager within the SDK.
/// @param walletAdviceManager the wallet’s advice manager to determine the final outcome of
/// transactions
/// @see WalletAdviceManager
- (id <McbpInitializer> _Nonnull)usingOptionalAdviceManagerWithWalletAdviceManager:(id <WalletAdviceManager> _Nullable)walletAdviceManager SWIFT_WARN_UNUSED_RESULT;
/// Sets the key rollover event listener so the Wallet can receive events when key rollovers
/// @param keyRolloverEventListener rollover event listener
/// @return self initializer
- (id <McbpInitializer> _Nonnull)withKeyRolloverEventListenerWithKeyRolloverEventListener:(id <KeyRolloverEventListener> _Nonnull)keyRolloverEventListener SWIFT_WARN_UNUSED_RESULT;
/// Sets the Registration Data Provider that the SDK can use to obtain registration data
/// protected by the W_DEK
/// @param walletIdentificationDataProvider the registration data
/// @return self initializer
- (id <McbpInitializer> _Nonnull)withWalletIdentificationDataProviderWithWalletIdentificationDataProvider:(id <WalletIdentificationDataProvider> _Nonnull)walletIdentificationDataProvider SWIFT_WARN_UNUSED_RESULT;
/// Sets the Pin Data Provider that can be used to rollover a pseudo PIN stored for use with
/// shared CVM
/// @param pinDataProvider the pin data provider
/// @return self initializer
- (id <McbpInitializer> _Nonnull)usingOptionalPinDataProviderForKeyRolloverWithPinDataProvider:(id <PinDataProvider> _Nullable)pinDataProvider SWIFT_WARN_UNUSED_RESULT;
/// Sets the Pin Data Provider that can be used to ask for Mobile PIN during the transaction
/// @param pinDataProvider the pin data provider
/// @return self initializer
- (id <McbpInitializer> _Nonnull)usingOptionalPinDataProviderForTransactionsWithPinDataProvider:(id <PinDataProvider> _Nullable)pinDataProvider SWIFT_WARN_UNUSED_RESULT;
/// Sets the logger implementation to use
/// @param mcbpLogger the logger implementation
/// @return self initializer
- (id <McbpInitializer> _Nonnull)usingOptionalMcbpLoggerWithMcbpLogger:(id <McbpLogger> _Nullable)mcbpLogger SWIFT_WARN_UNUSED_RESULT;
/// @param communicationRetryParametersProvider {@link CommunicationRetryParametersProvider}
/// @return self initializer
- (id <McbpInitializer> _Nonnull)usingOptionalCommunicationRetryParametersProviderWithCommunicationRetryParametersProvider:(id <CommunicationRetryParametersProvider> _Nullable)communicationRetryParametersProvider SWIFT_WARN_UNUSED_RESULT;
///
- (id <McbpInitializer> _Nonnull)usingOptionalSecurityIncidentServiceWithSecurityIncidentService:(id <SecurityIncidentService> _Nullable)securityIncidentService SWIFT_WARN_UNUSED_RESULT;
/// Default behavior is to use Wallet level Pin.  Call this function to switch to separate Pin
/// for each card.
- (id <McbpInitializer> _Nonnull)usingOptionalCardLevelPin SWIFT_WARN_UNUSED_RESULT;
/// Wallet implementation of ConsentManager, used during the transaction to check if user has
/// consented for the transaction.
/// @see WalletConsentManager
- (id <McbpInitializer> _Nonnull)withWalletConsentManagerWithConsentProvider:(id <WalletConsentManager> _Nonnull)consentProvider SWIFT_WARN_UNUSED_RESULT;
/// The HTTP Manager to use
/// @param httpManager the HTTP Manager to use
/// @return the initializer
- (id <McbpInitializer> _Nonnull)withHttpManagerWithHttpManager:(id <HttpManager> _Nonnull)httpManager SWIFT_WARN_UNUSED_RESULT;
/// Sets the CdCvm validator to use when CVM is required
/// @param cdCvmStatusProvider the CD CVM Validator to use when CVM is required
/// @return the initializer
- (id <McbpInitializer> _Nonnull)withCdCvmStatusProviderWithCdCvmStatusProvider:(id <CdCvmStatusProvider> _Nonnull)cdCvmStatusProvider SWIFT_WARN_UNUSED_RESULT;
/// Sets the active card provider to use when the SDK needs to retrieve the card to use for
/// payment
/// @param activeCardProvider the active card provider
/// @return self initializer
- (id <McbpInitializer> _Nonnull)withActiveCardProviderWithActiveCardProvider:(id <ActiveCardProvider> _Nonnull)activeCardProvider SWIFT_WARN_UNUSED_RESULT;
/// Initialize the SDK using the currently set options.
/// @return the MCBP interface implementation
- (id <Mcbp> _Nonnull)initialize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



///
SWIFT_CLASS("_TtC5mpsdk17MpSdkQrcInputData") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MpSdkQrcInputData : NSObject <QrcInputData>
///
- (nonnull instancetype)initWithQrcTransactionContext:(id <QrcTransactionContext> _Nullable)qrcTransactionContext OBJC_DESIGNATED_INITIALIZER;
///
- (NSArray<NSNumber *> * _Nullable)getAmount SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getCurrencyCode SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getCountryCode SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getTransactionDate SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///   </li>
/// </ul>
- (NSNumber * _Nullable)getEpochTimeInSeconds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol Records;
@class MChipByteArray;
@class TlvObject;

///
SWIFT_CLASS("_TtC5mpsdk11MpSdkRecord") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface MpSdkRecord : NSObject
///
- (nullable instancetype)initWithRecord:(id <Records> _Nonnull)record optionalAdditionalUDolList:(NSArray<DolEntry *> * _Nonnull)optionalAdditionalUDolList error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
///
- (NSArray<DolEntry *> * _Nonnull)getCdolItemsList SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<DolEntry *> * _Nonnull)getUdolItemsList SWIFT_WARN_UNUSED_RESULT;
///
- (NSDictionary<MChipByteArray *, TlvObject *> * _Nonnull)getProfileRecordTags SWIFT_WARN_UNUSED_RESULT;
///
- (NSInteger)getRecordId SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)isFirstRecord SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// This Exception is raised when there are no available session keys to be provided to the caller
SWIFT_CLASS("_TtC5mpsdk30ProvisioningSukFailedException") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface ProvisioningSukFailedException : McbpCheckedException
///
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode SWIFT_UNAVAILABLE;
@end

@protocol ContactlessPaymentData;

///
SWIFT_CLASS("_TtC5mpsdk20QrcProfileDataMapper") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface QrcProfileDataMapper : NSObject
///
+ (id <QrcData> _Nullable)createQrcDataFromDigitizedCardId:(NSString * _Nonnull)digitizedCardId contactlessPaymentData:(id <ContactlessPaymentData> _Nullable)contactlessPaymentData cdCvmModel:(enum CvmModel)cdCvmModel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


///
SWIFT_CLASS("_TtC5mpsdk40RemoteCommunicationMultipleListenersImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface RemoteCommunicationMultipleListenersImpl : NSObject <RemoteCommunicationEventListener>
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
- (void)addExternalListenerWithRemoteCommunicationEventListener:(id <RemoteCommunicationEventListener> _Nonnull)remoteCommunicationEventListener;
///
- (void)addInternalListenerWithRemoteCommunicationEventListener:(id <RemoteCommunicationEventListener> _Nonnull)remoteCommunicationEventListener;
///
- (void)onProvisionSucceeded:(id <DigitizedCard> _Nonnull)digitizedCardProfile cardId:(NSString * _Nonnull)tokenUniqueReference;
///
- (void)onSetCardPinSucceeded:(NSString * _Nonnull)cardId;
///
- (void)onSetCardPinFailed:(NSString * _Nonnull)cardId pinTriesRemaining:(int32_t)pinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onSetWalletPinFailed:(int32_t)pinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onSetWalletPinSucceeded;
///
- (void)onChangeCardPinSucceeded:(NSString * _Nonnull)cardId;
///
- (void)onChangeCardPinFailed:(NSString * _Nonnull)cardId pinTriesRemaining:(int32_t)pinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onChangeWalletPinFailed:(int32_t)pinTriesRemaining errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onChangeWalletPinSucceeded;
///
- (void)onReplenishSucceeded:(NSString * _Nonnull)cardId requestId:(NSString * _Nonnull)requestId singleUseKeys:(NSArray<id <SingleUseKey>> * _Nonnull)singleUseKeys;
///
- (void)onReplenishFailed:(NSString * _Nonnull)cardId requestId:(NSString * _Nonnull)requestId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onDeleteCardFailed:(NSString * _Nonnull)cardId requestId:(NSString * _Nonnull)requestId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onDeleteCardSuccess:(NSString * _Nonnull)cardId requestId:(NSString * _Nonnull)requestId;
///
- (void)onTaskStatusReceived:(NSString * _Nonnull)taskStatus;
///
- (void)onTaskStatusReceivedFailure:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onSystemHealthFailure:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onSystemHealthCompleted;
///
- (void)onCardPinReset:(NSString * _Nonnull)cardId;
///
- (void)onWalletPinReset;
///
- (void)onProvisionFailure:(NSString * _Nonnull)cardId errorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onRequestSessionSuccess;
///
- (void)onRequestSessionFailure:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nullable)errorMessage exception:(Exception * _Nullable)exception;
///
- (void)onChangeCardMobilePinStarted:(NSString * _Nonnull)cardId taskId:(NSString * _Nonnull)taskId;
///
- (void)onChangeWalletMobilePinStarted:(NSString * _Nonnull)taskId;
@end



/// This Exception is raised when there are no available session keys to be provided to the caller
SWIFT_CLASS("_TtC5mpsdk23SessionKeysNotAvailable") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SessionKeysNotAvailable : McbpCheckedException
/// Constructor.  A reason must be provided
/// @param reason A string describing the reason for the exception
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason errorCode:(ReturnCode)errorCode SWIFT_UNAVAILABLE;
@end


/// A Transaction Credential
SWIFT_CLASS("_TtC5mpsdk16SingleUseKeyImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SingleUseKeyImpl : NSObject <SingleUseKey>
///
- (nonnull instancetype)initWithId:(NSString * _Nullable)id sukInfo:(NSData * _Nullable)sukInfo sukContactlessUmd:(NSData * _Nullable)sukContactlessUmd sukRemotePaymentUmd:(NSData * _Nullable)sukRemotePaymentUmd sessionKeyContactlessMd:(NSData * _Nullable)sessionKeyContactlessMd sessionKeyRemotePaymentMd:(NSData * _Nullable)sessionKeyRemotePaymentMd sessionKeyContactlessUmd:(NSData * _Nullable)sessionKeyContactlessUmd sessionKeyRemotePaymentUmd:(NSData * _Nullable)sessionKeyRemotePaymentUmd idn:(NSData * _Nullable)idn atc:(int32_t)atc hash:(NSData * _Nullable)hash OBJC_DESIGNATED_INITIALIZER;
///
- (NSString * _Nullable)getId SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nullable)getInfo SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nullable)getSukContactlessUmd SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nullable)getSukRemotePaymentUmd SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nullable)getSessionKeyContactlessMd SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nullable)getSessionKeyRemotePaymentMd SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nullable)getSessionKeyContactlessUmd SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nullable)getSessionKeyRemotePaymentUmd SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nullable)getIdn SWIFT_WARN_UNUSED_RESULT;
///
- (int32_t)getAtc SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nullable)getHash SWIFT_WARN_UNUSED_RESULT;
///
- (void)wipe;
///
- (void)setStatus:(int32_t)status;
///
- (NSString * _Nullable)getTimestamp SWIFT_WARN_UNUSED_RESULT;
///
+ (id <SingleUseKey> _Nonnull)fromValueWithSerializedTransactionCredential:(NSData * _Nonnull)serializedTransactionCredential SWIFT_WARN_UNUSED_RESULT;
///
+ (NSData * _Nullable)serializeWithSingleUseKey:(id <SingleUseKey> _Nonnull)singleUseKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



///
SWIFT_CLASS("_TtC5mpsdk22TransactionCredentials") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface TransactionCredentials : NSObject
///
- (nonnull instancetype)initWithAtc:(NSData * _Nonnull)atc encryptedIdn:(NSData * _Nonnull)encryptedIdn encryptedMd:(NSData * _Nonnull)encryptedMd encryptedUmd:(NSData * _Nonnull)encryptedUmd OBJC_DESIGNATED_INITIALIZER;
/// Gets Application Transaction Counter
/// @return Return integer value of ATC if valid else return -1
- (int32_t)getAtc SWIFT_WARN_UNUSED_RESULT;
/// Gets Application Transaction Counter as raw bytes
/// @return byte array
- (NSData * _Nonnull)getRawAtc SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nonnull)getEncryptedIdn SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nonnull)getEncryptedMd SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nonnull)getEncryptedUmd SWIFT_WARN_UNUSED_RESULT;
///
- (void)wipe;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// Template for transaction log
SWIFT_CLASS("_TtC5mpsdk18TransactionLogImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface TransactionLogImpl : NSObject <TransactionLog>
/// Constructs a transaction log for a remote payment
/// @param tokenUniqueReference the unique ID of a digitized card
/// @param dsrpInputData        the input data for a DSRP transaction
/// @param transactionId        the unique transaction ID
- (nonnull instancetype)initWithTokenUniqueReference:(NSString * _Nonnull)tokenUniqueReference dsrpInputData:(MPSdkDsrpInputData * _Nonnull)dsrpInputData transactionId:(NSData * _Nonnull)transactionId OBJC_DESIGNATED_INITIALIZER;
/// Constructs a transaction log for a qrc payment
/// @param tokenUniqueReference the unique ID of a digitized card
/// @param qrcInputData        the input data for a QRC transaction
/// @param transactionId        the unique transaction ID
- (nonnull instancetype)initWithTokenUniqueReference:(NSString * _Nonnull)tokenUniqueReference qrcInputData:(MpSdkQrcInputData * _Nullable)qrcInputData transactionId:(NSData * _Nullable)transactionId OBJC_DESIGNATED_INITIALIZER;
/// Constructs a transaction log for a contactless payment
/// @param tokenUniqueReference the unique ID of a digitized card
/// @param contactlessLog       the log from a contactless transaction
- (nonnull instancetype)initWithTokenUniqueReference:(NSString * _Nonnull)tokenUniqueReference contactlessLog:(id <ContactlessLog> _Nonnull)contactlessLog OBJC_DESIGNATED_INITIALIZER;
/// Constructor used for serialization
/// @param tokenUniqueReference the unique ID of a digitized card
/// @param unpredictableNumber  the UN of the transaction
/// @param date                 the date
/// @param amount               the amount
/// @param currencyCode         the currency code
/// @param cryptogramFormat     the cryptogram format
/// @param transactionId        the unique transaction ID
- (nonnull instancetype)initWithTokenUniqueReference:(NSString * _Nonnull)tokenUniqueReference unpredictableNumber:(NSData * _Nonnull)unpredictableNumber date:(int64_t)date amount:(int64_t)amount currencyCode:(int32_t)currencyCode cryptogramFormat:(uint8_t)cryptogramFormat transactionId:(NSData * _Nonnull)transactionId OBJC_DESIGNATED_INITIALIZER;
///
- (uint8_t)getCryptogramFormat SWIFT_WARN_UNUSED_RESULT;
///
- (int64_t)getDate SWIFT_WARN_UNUSED_RESULT;
///
- (int64_t)getAmount SWIFT_WARN_UNUSED_RESULT;
///
- (int32_t)getCurrencyCode SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)getCardId SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nonnull)getUnpredictableNumber SWIFT_WARN_UNUSED_RESULT;
///
- (NSData * _Nonnull)getTransactionId SWIFT_WARN_UNUSED_RESULT;
///
- (void)wipe;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end





///
SWIFT_CLASS("_TtC5mpsdk29iOSPropertyStorageFactoryImpl") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface iOSPropertyStorageFactoryImpl : PropertyStorageFactory
///
- (void)putPropertyWithFinal:(NSString * _Nonnull)key final:(NSString * _Nonnull)value;
///
- (void)putPropertySetWithFinal:(NSString * _Nonnull)key final:(NSSet<NSString *> * _Nonnull)value;
///
- (NSString * _Nonnull)getPropertyWithFinal:(NSString * _Nonnull)key defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
///
- (NSSet<NSString *> * _Nonnull)getPropertySetWithFinal:(NSString * _Nonnull)key defaultValue:(NSSet<NSString *> * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)isContainsKeyWithFinal:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
///
- (void)removePropertyWithFinal:(NSString * _Nonnull)key;
- (void)removeAll;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
