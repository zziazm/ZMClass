// Generated by Apple Swift version 4.0.3 effective-3.2.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("mchip_engine")
/// Indicator to the wallet why a transaction was aborted.
typedef SWIFT_ENUM(NSInteger, AbortReason) {
  AbortReasonWALLET_CANCEL_REQUEST = 0,
  AbortReasonCARD_ERROR = 1,
  AbortReasonTERMINAL_ERROR = 2,
};

/// This enum defines tyhe risk type used in the current card profile.
typedef SWIFT_ENUM(NSInteger, AccountType) {
  AccountTypeCREDIT = 0,
  AccountTypeDEBIT = 1,
  AccountTypeUNKNOWN = 2,
};

/// This enum lists the possible decisions that the MCM Lite module can conclude upon during
/// transaction processing.
/// <p>
/// During transaction processing, various assessment take place to determine the proposed outcome
/// of the transaction. For example, if an error condition is detected then the decision will be to
/// stop the transaction, if the consumer needs to be authenticated then the decision will be made
/// to try again. If everything is in order then a decision will be made to generate proceed either
/// with an online approve or a signed AAC depending on what the terminal requested.
/// <p>
/// The decisions supplied by this enum are defined in priority order, for example if there is a
/// reason to stop a transaction then this will take precedence over any decision to proceed with
/// the transaction.
/// <p>
/// Towards the end of a transaction the wallet will be given the opportunity to indicate that it
/// wants overrule the decision. In effect the wallet can always overrule to an lower entry, but
/// depending on the reason for the decision it may or may not be able to overrule to a higher entry
/// in the list
typedef SWIFT_ENUM(NSInteger, Advice) {
/// Decline the transaction.
  AdviceDECLINE = 0,
/// Resolve issues (by looking at reason codes) and try another tap.
  AdviceTRY_AGAIN = 1,
/// Continue with transaction (as defined by the transaction purpose).
  AdvicePROCEED = 2,
};


/// Interface used to provide advice to the wallet and the reasons for the advice that has been
/// given.
SWIFT_PROTOCOL("_TtP12mchip_engine16AdviceAndReasons_")
@protocol AdviceAndReasons
/// Return the advice.
///
/// returns:
///
/// The advice.
- (enum Advice)getAdvice SWIFT_WARN_UNUSED_RESULT;
/// Get the list of reasons that resulted in the advice.
///
/// returns:
///
/// The reasons that resulted in the advice.
- (NSArray * _Nonnull)getReasons SWIFT_WARN_UNUSED_RESULT;
@end


/// This interface defines contactless profile data that is specific to an alternate AID. A
/// contactless profile may contain both a primary and alternate AID and different data needs to be
/// used dependent on the AID.
SWIFT_PROTOCOL("_TtP12mchip_engine31AlternateContactlessPaymentData_")
@protocol AlternateContactlessPaymentData
/// Get the payment FCI template.
///
/// returns:
///
/// The payment FCI template.
- (NSArray<NSNumber *> * _Nonnull)getPaymentFci SWIFT_WARN_UNUSED_RESULT;
/// Get the response to GPO.
///
/// returns:
///
/// The response to GPO.
- (NSArray<NSNumber *> * _Nonnull)getGpoResponse SWIFT_WARN_UNUSED_RESULT;
/// Get the CVR Mask.
///
/// returns:
///
/// The CVR Mask.
- (NSArray<NSNumber *> * _Nullable)getCvrMaskAnd SWIFT_WARN_UNUSED_RESULT;
/// Get the Card Issuer Action Code for decline.
///
/// returns:
///
/// The CIAC.
- (NSArray<NSNumber *> * _Nonnull)getDeclineConditions SWIFT_WARN_UNUSED_RESULT;
/// Get the Card Issuer Action Code for decline (Magstripe).
///
/// returns:
///
/// The CIAC for Magstripe.
- (NSArray<NSNumber *> * _Nullable)getDeclineConditionsOnPpms SWIFT_WARN_UNUSED_RESULT;
/// Get the application identifier.
///
/// returns:
///
/// The application identifier.
- (NSArray<NSNumber *> * _Nonnull)getAid SWIFT_WARN_UNUSED_RESULT;
@end


/// Basic exception class to bring it fairly inline with Java exceptions
SWIFT_CLASS("_TtC12mchip_engine9Exception")
@interface Exception : NSObject
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
/// Extract the message for the exception
///
/// returns:
///
/// The message
- (NSString * _Nonnull)getMessage SWIFT_WARN_UNUSED_RESULT;
@end


///
SWIFT_CLASS("_TtC12mchip_engine30ArrayIndexOutOfBoundsException")
@interface ArrayIndexOutOfBoundsException : Exception
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
@end

enum ProductType : NSInteger;

/// This interface provides data elements that are common to both contactless and DSRP data
SWIFT_PROTOCOL("_TtP12mchip_engine10CommonData_")
@protocol CommonData
/// Get the country code for the card.
///
/// returns:
///
/// The country code for the card.
- (NSArray<NSNumber *> * _Nullable)getCardCountryCode SWIFT_WARN_UNUSED_RESULT;
/// Get the card PAN.
///
/// returns:
///
/// The PAN.
- (NSArray<NSNumber *> * _Nullable)getPan SWIFT_WARN_UNUSED_RESULT;
/// Get the account type.
///
/// returns:
///
/// The account type.
- (enum AccountType)getAccountType SWIFT_WARN_UNUSED_RESULT;
/// Get the product type.
///
/// returns:
///
/// The product type.
- (enum ProductType)getProductType SWIFT_WARN_UNUSED_RESULT;
/// Get whether the transaction ID is required.
///
/// returns:
///
/// true if it is; otherwise false.
- (BOOL)isTransactionIdRequired SWIFT_WARN_UNUSED_RESULT;
@end

/// Records whether transactions are international or domestic.
typedef SWIFT_ENUM(NSInteger, ConditionsOfUse) {
  ConditionsOfUseDOMESTIC = 0,
  ConditionsOfUseINTERNATIONAL = 1,
  ConditionsOfUseUNKNOWN = 2,
};

enum TransactionOutcome : NSInteger;
@protocol TerminalInformation;
@protocol TransactionInformation;

/// Interface used to report information about completed transactions so the wallet can update its
/// transaction log accordingly.
SWIFT_PROTOCOL("_TtP12mchip_engine14ContactlessLog_")
@protocol ContactlessLog
/// Get the outcome of the transaction.
///
/// returns:
///
/// The transaction outcome.
- (enum TransactionOutcome)getTransactionOutcome SWIFT_WARN_UNUSED_RESULT;
/// Get information about the terminal.
///
/// returns:
///
/// The terminal information.
- (id <TerminalInformation> _Nullable)getTerminalInformation SWIFT_WARN_UNUSED_RESULT;
/// Get information about the transaction.
///
/// returns:
///
/// The transaction information.
- (id <TransactionInformation> _Nullable)getTransactionInformation SWIFT_WARN_UNUSED_RESULT;
/// Get the transaction ID.
///
/// returns:
///
/// The transaction ID.
- (NSArray<NSNumber *> * _Nullable)getTransactionId SWIFT_WARN_UNUSED_RESULT;
@end

@protocol Record;
@protocol MCETrackConstructionData;
enum UmdGeneration : NSInteger;
enum CvmModel : NSInteger;

/// This class provides access to the contactless profile data that is needed to perform a
/// transaction.
/// <p>
/// Provides the data required to perform a contactless transaction. Contactless profiles support
/// the concept of a primary AID and an alternate AID. During a transaction the terminal can select
/// either AID and the transaction needs to complete using profile data for the specified AID.
/// <p>
/// The primary AID data is provided in this interface and the secondary AID data is provided in a
/// separate interface. However, during creation of the MCM Lite component the data will be
/// translated to a more usable form.
SWIFT_PROTOCOL("_TtP12mchip_engine22ContactlessPaymentData_")
@protocol ContactlessPaymentData
/// Get the PPSE FCI template.
///
/// returns:
///
/// The PPSE FCI template.
- (NSArray<NSNumber *> * _Nullable)getPpseFci SWIFT_WARN_UNUSED_RESULT;
/// Get the GPO response.
///
/// returns:
///
/// The GPO response.
- (NSArray<NSNumber *> * _Nonnull)getGpoResponse SWIFT_WARN_UNUSED_RESULT;
/// Get the payment FCI template.
///
/// returns:
///
/// The payment FCI template.
- (NSArray<NSNumber *> * _Nonnull)getPaymentFci SWIFT_WARN_UNUSED_RESULT;
/// Get the CVR Mask.
///
/// returns:
///
/// The CVR Mask.
- (NSArray<NSNumber *> * _Nullable)getCvrMaskAnd SWIFT_WARN_UNUSED_RESULT;
/// Get the Card Issuer Action Code for decline.
///
/// returns:
///
/// The CIAC.
- (NSArray<NSNumber *> * _Nullable)getDeclineConditions SWIFT_WARN_UNUSED_RESULT;
/// Get the Card Issuer Action Code for decline (Magstripe).
///
/// returns:
///
/// The CIAC (Magstripe).
- (NSArray<NSNumber *> * _Nullable)getDeclineConditionsOnPpms SWIFT_WARN_UNUSED_RESULT;
/// Get the application identifier.
///
/// returns:
///
/// The application identifier.
- (NSArray<NSNumber *> * _Nonnull)getAid SWIFT_WARN_UNUSED_RESULT;
/// Get the alternate contactless payment data.
///
/// returns:
///
/// The alternate contactless payment data.
- (id <AlternateContactlessPaymentData> _Nullable)getAlternateContactlessPaymentData SWIFT_WARN_UNUSED_RESULT;
/// Get the issuer application data.
///
/// returns:
///
/// The issuer application data.
- (NSArray<NSNumber *> * _Nullable)getIssuerApplicationData SWIFT_WARN_UNUSED_RESULT;
/// Get the PIN IV CVC 3 Track 2 data.
///
/// returns:
///
/// The PIN IV CVC 3 Track 2 data.
- (NSArray<NSNumber *> * _Nullable)getPinIvCvc3Track2 SWIFT_WARN_UNUSED_RESULT;
/// Get the list of records in the profile.
///
/// returns:
///
/// The list of records.
- (NSArray<id <Record>> * _Nullable)getRecords SWIFT_WARN_UNUSED_RESULT;
/// Get the CDOL 1 related data length.
///
/// returns:
///
/// The CDOL 1 related data length.
- (NSArray<NSNumber *> * _Nullable)getCdol1RelatedDataLength SWIFT_WARN_UNUSED_RESULT;
/// Get whether transit is supported.
///
/// returns:
///
/// true if it is; otherwise false.
- (BOOL)isTransitSupported SWIFT_WARN_UNUSED_RESULT;
/// Get whether US AIP Mask is supported.
///
/// returns:
///
/// true if it is; otherwise false.
- (BOOL)isUsAipMaskSupported SWIFT_WARN_UNUSED_RESULT;
/// Check whether Magstripe data is valid.
///
/// returns:
///
/// true if it is; otherwise false.
- (BOOL)isMagstripeDataValid SWIFT_WARN_UNUSED_RESULT;
/// Check whether the Primary AID data is valid for MChip.
///
/// returns:
///
/// true if it is; otherwise false.
- (BOOL)isPrimaryAidMchipDataValid SWIFT_WARN_UNUSED_RESULT;
/// Check whether the Alternate AID data is valid for MChip.
///
/// returns:
///
/// true if it is; otherwise false.
- (BOOL)isAlternateAidMchipDataValid SWIFT_WARN_UNUSED_RESULT;
/// Get the Track 1 Construction data.
///
/// returns:
///
/// The Track 1 Construction data.
- (id <MCETrackConstructionData> _Nullable)getTrack1ConstructionData SWIFT_WARN_UNUSED_RESULT;
/// Get the Track 2 Construction data.
///
/// returns:
///
/// The Track 2 Construction data.
- (id <MCETrackConstructionData> _Nullable)getTrack2ConstructionData SWIFT_WARN_UNUSED_RESULT;
/// Get the Host UMD configuration.
///
/// returns:
///
/// The Host UMD configuration.
- (enum UmdGeneration)getHostUmdConfig SWIFT_WARN_UNUSED_RESULT;
/// Get the CD CVM model.
///
/// returns:
///
/// The CD CVM model.
- (enum CvmModel)getCdCvmModel SWIFT_WARN_UNUSED_RESULT;
@end

/// Defines the scope of payment credentials, credentials are grouped based on their scope of
/// applicability (either DSRP or QRC).
typedef SWIFT_ENUM(NSInteger, CredentialsScope) {
  CredentialsScopeDSRP = 0,
  CredentialsScopeQRC = 1,
  CredentialsScopeUNKNOWN = 2,
};


/// Provides access to the ATC and IDN of the current transaction.
SWIFT_PROTOCOL("_TtP12mchip_engine13CryptoContext_")
@protocol CryptoContext
/// Get the ATC.
///
/// returns:
///
/// The ATC.
- (NSArray<NSNumber *> * _Nonnull)getAtc SWIFT_WARN_UNUSED_RESULT;
/// Get the IDN.
///
/// returns:
///
/// The IDN.
- (NSArray<NSNumber *> * _Nonnull)getProtectedIdn SWIFT_WARN_UNUSED_RESULT;
@end

/// Defines the types of cryptogram allowed in a DSRP transaction.
typedef SWIFT_ENUM(NSInteger, CryptogramDataType) {
  CryptogramDataTypeDE55 = 0,
  CryptogramDataTypeUCAF = 1,
};


///
SWIFT_CLASS("_TtC12mchip_engine29CryptogramGenerationException")
@interface CryptogramGenerationException : Exception
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// Indicates the type of cdCvmModel required for the current card profile.
typedef SWIFT_ENUM(NSInteger, CvmModel) {
  CvmModelCDCVM_ALWAYS = 0,
  CvmModelFLEXIBLE_CDCVM = 1,
  CvmModelCARD_LIKE = 2,
};


/// Class used to wrap a data object list entry.
/// <p>
/// During a transaction the terminal provides a buffer of data objects to the mobile device. The
/// mobile device has to provide a list of data objects (identified by tag) and the length that these
/// data objects should take in the buffer. This class is used to encapsulate the concept of a data
/// object and the corresponding length that the object should take in the data buffer.
SWIFT_CLASS("_TtC12mchip_engine8DolEntry")
@interface DolEntry : NSObject
/// Build a DOL Entry with a given tag and length.
/// \param tagInHex The DOL Tag.
///
/// \param length The DOL length.
///
- (nonnull instancetype)initWithTagInHex:(NSArray<NSNumber *> * _Nonnull)tagInHex length:(uint8_t)length OBJC_DESIGNATED_INITIALIZER;
///
/// returns:
///
/// The tag value.
- (NSArray<NSNumber *> * _Nonnull)getTag SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
///
/// The tag length.
- (uint8_t)getLength SWIFT_WARN_UNUSED_RESULT;
///
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum UcafVersion : NSInteger;

/// Provides profile data that is required to perform DSRP transactions.
SWIFT_PROTOCOL_NAMED("DsrpData")
@protocol MCEDsrpData
/// Get the issuer application data.
///
/// returns:
///
/// The issuer application data.
- (NSArray<NSNumber *> * _Nullable)getIssuerApplicationData SWIFT_WARN_UNUSED_RESULT;
/// Get the CVR Mask.
///
/// returns:
///
/// The CVR Mask.
- (NSArray<NSNumber *> * _Nullable)getCvrMaskAnd SWIFT_WARN_UNUSED_RESULT;
/// Get the card expiry date.
///
/// returns:
///
/// The expiry date.
- (NSArray<NSNumber *> * _Nullable)getExpirationDate SWIFT_WARN_UNUSED_RESULT;
/// Get the Track 2 equivalent data.
///
/// returns:
///
/// The Track 2 equivalent data.
- (NSArray<NSNumber *> * _Nullable)getTrack2EquivalentData SWIFT_WARN_UNUSED_RESULT;
/// Get the AIP.
///
/// returns:
///
/// The AIP.
- (NSArray<NSNumber *> * _Nullable)getAip SWIFT_WARN_UNUSED_RESULT;
/// Get the cards PAN sequence number.
///
/// returns:
///
/// The cards PAN sequence number.
- (NSArray<NSNumber *> * _Nullable)getPanSequenceNumber SWIFT_WARN_UNUSED_RESULT;
/// Get the Card Issuer Action Code for decline.
///
/// returns:
///
/// The CIAC for decline.
- (NSArray<NSNumber *> * _Nullable)getDeclineConditions SWIFT_WARN_UNUSED_RESULT;
/// Get the Host UMD configuration.
///
/// returns:
///
/// The Host UMD configuration.
- (enum UmdGeneration)getHostUmdConfig SWIFT_WARN_UNUSED_RESULT;
/// Get the version of UCAF supported.
///
/// returns:
///
/// The supported UCAF version.
- (enum UcafVersion)getUcafVersion SWIFT_WARN_UNUSED_RESULT;
/// Get the CD CVM model.
///
/// returns:
///
/// The CD CVM model.
- (enum CvmModel)getCdCvmModel SWIFT_WARN_UNUSED_RESULT;
/// Get the payment account reference.
///
/// returns:
///
/// The payment account reference.
- (NSArray<NSNumber *> * _Nullable)getPaymentAccountReference SWIFT_WARN_UNUSED_RESULT;
@end


/// This interface groups together data required for DSRP transactions.
SWIFT_PROTOCOL("_TtP12mchip_engine13DsrpInputData_")
@protocol DsrpInputData
/// The transaction amount.
///
/// returns:
///
/// The transaction amount.
- (NSArray<NSNumber *> * _Nonnull)getAmount SWIFT_WARN_UNUSED_RESULT;
/// Base 16 value encoded in bytes.
///
/// returns:
///
/// The byte array representation of the numeric country code.
- (NSArray<NSNumber *> * _Nullable)getCountryCode SWIFT_WARN_UNUSED_RESULT;
/// The cryptogram type that is to be returned.
///
/// returns:
///
/// UCAF or DE55 cryptogram type {@see CryptogramDataType }
- (enum CryptogramDataType)getCryptogramType SWIFT_WARN_UNUSED_RESULT;
/// Base 16 value encoded in bytes.
///
/// returns:
///
/// The byte array representation of the numeric currency code.
- (NSArray<NSNumber *> * _Nonnull)getCurrencyCode SWIFT_WARN_UNUSED_RESULT;
/// Byte array representation of the transaction date.
///
/// returns:
///
/// The transaction date.
- (NSArray<NSNumber *> * _Nullable)getTransactionDate SWIFT_WARN_UNUSED_RESULT;
/// The transaction type.
///
/// returns:
///
/// The transaction type.
- (NSArray<NSNumber *> * _Nullable)getTransactionType SWIFT_WARN_UNUSED_RESULT;
/// The unpredictable number.
///
/// returns:
///
/// The unpredictable number.
- (NSArray<NSNumber *> * _Nonnull)getUnpredictableNumber SWIFT_WARN_UNUSED_RESULT;
@end


/// Used to indicate invalid input to DSRP calculations.
SWIFT_CLASS("_TtC12mchip_engine25DsrpInvalidInputException")
@interface DsrpInvalidInputException : Exception
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This class is used to return DSRP output data at the end of a calculation.
SWIFT_PROTOCOL("_TtP12mchip_engine14DsrpOutputData_")
@protocol DsrpOutputData
/// Byte array representation of the cards PAN.
///
/// returns:
///
/// The cards PAN.
- (NSArray<NSNumber *> * _Nonnull)getPan SWIFT_WARN_UNUSED_RESULT;
/// Byte array representation of the cards PAN sequence number.
///
/// returns:
///
/// The cards PAN sequence number.
- (NSArray<NSNumber *> * _Nonnull)getPanSequenceNumber SWIFT_WARN_UNUSED_RESULT;
/// Byte array representation of the cards Payment Account Reference number.
///
/// returns:
///
/// The Payment Account Reference.
- (NSArray<NSNumber *> * _Nullable)getPar SWIFT_WARN_UNUSED_RESULT;
/// Byte array representation of the cards expiration date.
///
/// returns:
///
/// The expiration date.
- (NSArray<NSNumber *> * _Nonnull)getExpirationDate SWIFT_WARN_UNUSED_RESULT;
/// The cards Track 2 Equivalent data
///
/// returns:
///
/// the track 2 equivalent data
- (NSArray<NSNumber *> * _Nullable)getTrack2EquivalentData SWIFT_WARN_UNUSED_RESULT;
/// The type of cryptogram that was used during the transaction.
///
/// returns:
///
/// The type of cryptogram used.
- (enum CryptogramDataType)getCryptogramDataType SWIFT_WARN_UNUSED_RESULT;
/// Get the transaction cryptogram to use in the Issuer authorization request.
///
/// returns:
///
/// The transaction cryptogram.
- (NSArray<NSNumber *> * _Nonnull)getTransactionCryptogramData SWIFT_WARN_UNUSED_RESULT;
/// Get the transaction ID.
///
/// returns:
///
/// The transaction ID.
- (NSArray<NSNumber *> * _Nonnull)getTransactionId SWIFT_WARN_UNUSED_RESULT;
@end


/// This enum indicates the expected action that the terminal will take during the transaction. This
/// action is determined by examining the terminal data exchanged with the MCM Lite component during
/// the transaction.
typedef SWIFT_ENUM(NSInteger, ExpectedUserActionOnPoi) {
  ExpectedUserActionOnPoiNONE = 0,
  ExpectedUserActionOnPoiONLINE_PIN = 1,
  ExpectedUserActionOnPoiSIGNATURE = 2,
  ExpectedUserActionOnPoiONLINE_PIN_OR_SIGNATURE = 3,
  ExpectedUserActionOnPoiUNKNOWN = 4,
};

/// Helper class for dealing with true, false, unknown outcomes.
typedef SWIFT_ENUM(NSInteger, ExtendedBool) {
  ExtendedBoolYES = 0,
  ExtendedBoolNO = 1,
  ExtendedBoolUNKNOWN = 2,
};

/// Used to indicate the reason for a failure
typedef SWIFT_ENUM(NSInteger, ExtendedReasonCode) {
  ExtendedReasonCodeDSRP_NOT_POSSIBLE_BECAUSE_TRANSACTION_MANAGER_IS_BUSY = 0,
  ExtendedReasonCodeERROR_PROFILE_DOES_NOT_SUPPORT_DSRP_TRANSACTIONS = 1,
  ExtendedReasonCodeERROR_MISSING_DRSP_PROFILE_DATA = 2,
  ExtendedReasonCodeERROR_DSRP_INPUT_INVALID = 3,
  ExtendedReasonCodeTRANSACTION_STOPPED_BY_WALLET = 4,
  ExtendedReasonCodeCONTACTLESS_TRANSACTION_NOT_POSSIBLE_BECAUSE_TRANSACTION_MANAGER_IS_BUSY = 5,
  ExtendedReasonCodeERROR_NULL_DATA_SUPPLIED = 6,
  ExtendedReasonCodeERROR_MISSING_CDOL1_DATA = 7,
  ExtendedReasonCodeERROR_MISSING_UDOL_DATA = 8,
  ExtendedReasonCodeERROR_PROFILE_HAS_INVALID_FCI_DATA = 9,
  ExtendedReasonCodeERROR_EMPTY_CARD_PROFILE_PROVIDED = 10,
  ExtendedReasonCodeERROR_MISSING_PROFILE_CAPABILITIES = 11,
  ExtendedReasonCodeERROR_PROFILE_DOES_NOT_SUPPORT_CONTACTLESS_TRANSACTIONS = 12,
  ExtendedReasonCodeERROR_MISSING_CONTACTLESS_PROFILE_DATA = 13,
  ExtendedReasonCodeERROR_MISSING_PRIMARY_AID_DATA_IN_PROFILE = 14,
  ExtendedReasonCodeERROR_MISSING_ALTERNATE_AID_DATA_IN_PROFILE = 15,
  ExtendedReasonCodeERROR_MISSING_AID_IN_PROFILE = 16,
  ExtendedReasonCodeERROR_MISSING_CVR_MASK_IN_PROFILE = 17,
  ExtendedReasonCodeERROR_MISSING_GPO_RESPONSE_IN_PROFILE = 18,
  ExtendedReasonCodeERROR_MISSING_PAYMENT_FCI_IN_PROFILE = 19,
  ExtendedReasonCodeERROR_MISSING_CURRENCY_CODE_IN_PROFILE = 20,
  ExtendedReasonCodeERROR_MISSING_TRACK_CONSTRUCTION_DATA = 21,
  ExtendedReasonCodeERROR_BADLY_FORMED_TRACK_CONSTRUCTION_DATA = 22,
  ExtendedReasonCodeERROR_MISSING_ICC_PRIVATE_KEY = 23,
  ExtendedReasonCodeERROR_MISSING_ISSUER_APPLICATION_DATA = 24,
  ExtendedReasonCodeERROR_MISSING_PPSE_FCI = 25,
  ExtendedReasonCodeERROR_MISSING_PIN_IV_CVC3_TRACK2 = 26,
  ExtendedReasonCodeERROR_MISSING_PAN = 27,
  ExtendedReasonCodeERROR_MISSING_CARD_COUNTRY_CODE_PAN = 28,
  ExtendedReasonCodeERROR_MISSING_EXPIRATION_DATE = 29,
  ExtendedReasonCodeERROR_MISSING_TRACK2_EQUIVALENT_DATA = 30,
  ExtendedReasonCodeERROR_MISSING_AIP = 31,
  ExtendedReasonCodeERROR_MISSING_PAN_SEQUENCE_NUMBER = 32,
  ExtendedReasonCodeERROR_MISSING_DECLINE_CONDITIONS = 33,
  ExtendedReasonCodeERROR_MISSING_CARD_COUNTRY_CODE = 34,
  ExtendedReasonCodeERROR_MISSING_PAYMENT_ACCOUNT_REFERENCE = 35,
  ExtendedReasonCodeERROR_PROFILE_HAS_INVALID_GPO_DATA = 36,
  ExtendedReasonCodeERROR_MISSING_RECORD_DATA = 37,
  ExtendedReasonCodeERROR_NULL_COMMON_DATA_SUPPLIED = 38,
  ExtendedReasonCodeERROR_NULL_ALTERNATE_AID_SUPPLIED = 39,
  ExtendedReasonCodeERROR_MISSING_CDOL1_RELATED_LENGTH = 40,
  ExtendedReasonCodeERROR_ISSUER_APPLICATION_DATA_TOO_SHORT = 41,
  ExtendedReasonCodePROCESSING_ERROR = 42,
  ExtendedReasonCodeTERMINAL_INACTIVITY_TIMEOUT = 43,
  ExtendedReasonCodeWRONG_COMMAND_LENGTH = 44,
  ExtendedReasonCodeERROR_INVALID_APDU_CASE = 45,
  ExtendedReasonCodeINSTRUCTION_CODE_NOT_SUPPORTED = 46,
  ExtendedReasonCodeCLASS_NOT_SUPPORTED = 47,
  ExtendedReasonCodeINVALID_P1_BYTE = 48,
  ExtendedReasonCodeINVALID_P2_BYTE = 49,
  ExtendedReasonCodeINVALID_LC_BYTE = 50,
  ExtendedReasonCodeINVALID_LE_BYTE = 51,
  ExtendedReasonCodeINVALID_APDU_CASE = 52,
  ExtendedReasonCodeAPDU_COMMAND_NOT_ALLOWED_IN_CURRENT_STATE = 53,
  ExtendedReasonCodeFILE_NOT_FOUND = 54,
  ExtendedReasonCodeBAD_DOL_LENGTH = 55,
  ExtendedReasonCodeCOMMAND_TEMPLATE_BAD_HAS_FORMAT = 56,
  ExtendedReasonCodeERROR_INPUT_TAG_IS_WRONG_LENGTH = 57,
  ExtendedReasonCodeERROR_OUTPUT_DATA_IS_WRONG_LENGTH = 58,
  ExtendedReasonCodeMISSING_TERMINAL_DATA_ELEMENT = 59,
  ExtendedReasonCodeTRANSACTION_NOT_ALLOWED_ON_OFFLINE_TERMINAL = 60,
  ExtendedReasonCodeMISSING_TRANSACTION_OUTPUT_DATA = 61,
  ExtendedReasonCodeMISSING_TRANSACTION_DATA_MANAGER = 62,
  ExtendedReasonCodeERROR_MISSING_APPLICATION_LABEL = 63,
  ExtendedReasonCodeINVALID_RECORD_NO = 64,
  ExtendedReasonCodeRECORD_NOT_FOUND = 65,
  ExtendedReasonCodeTRANSIT_IS_NOT_SUPPORTED = 66,
  ExtendedReasonCodeTERMINAL_REQUESTED_DECLINE = 67,
  ExtendedReasonCodeERROR_NULL_PROFILE_SUPPLIED = 68,
  ExtendedReasonCodeATTEMPT_TO_SET_INVALID_CRYPTOGRAM_TYPE_IN_CVR = 69,
  ExtendedReasonCodeCOMMAND_INCOMPATIBLE = 70,
  ExtendedReasonCodePERSISTENT_TRANSACTION_CONTEXT_NOT_SUPPORTED = 71,
  ExtendedReasonCodeUNEXPECTED_ERROR = 72,
  ExtendedReasonCodeQRC_NOT_POSSIBLE_BECAUSE_TRANSACTION_MANAGER_IS_BUSY = 73,
  ExtendedReasonCodeERROR_PROFILE_DOES_NOT_SUPPORT_QRC_TRANSACTIONS = 74,
  ExtendedReasonCodeERROR_QRC_INPUT_INVALID = 75,
  ExtendedReasonCodeERROR_PROFILE_DOES_NOT_SUPPORT_MAGSTRIPE_TRANSACTIONS = 76,
};


///
SWIFT_CLASS("_TtC12mchip_engine24IllegalArgumentException")
@interface IllegalArgumentException : Exception
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
@end


///
SWIFT_CLASS("_TtC12mchip_engine27InvalidCardProfileException")
@interface InvalidCardProfileException : Exception
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Generic checked MCM Lite Exception class
SWIFT_CLASS("_TtC12mchip_engine23McmLiteCheckedException")
@interface McmLiteCheckedException : Exception
/// Constructor.  A reason must be provided
/// <ul>
///   <li>
///   </li>
/// </ul>
/// \param message A string describing the reason for the exception
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


///
SWIFT_CLASS("_TtC12mchip_engine21InvalidInputException")
@interface InvalidInputException : McmLiteCheckedException
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC12mchip_engine22InvalidLengthException")
@interface InvalidLengthException : McmLiteCheckedException
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Exception that can be thrown if invalid profile data is passed to the MCM Lite component when it
/// is constructed.
SWIFT_CLASS("_TtC12mchip_engine23InvalidProfileException")
@interface InvalidProfileException : Exception
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC12mchip_engine19InvalidTagException")
@interface InvalidTagException : McmLiteCheckedException
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumeration to represent different type of key.
typedef SWIFT_ENUM(NSInteger, KeyType) {
  KeyTypeRANDOM = 0,
  KeyTypeUMD = 1,
  KeyTypeMD = 2,
};

/// Used to indicate the type of credentials to be used in crytogram calculations.
typedef SWIFT_ENUM(NSInteger, KeysContext) {
  KeysContextVALID_CONTEXT = 0,
  KeysContextRANDOM_CONTEXT = 1,
};


/// ByteArray, wrapper around byte[] with some utility methods
SWIFT_CLASS("_TtC12mchip_engine14MChipByteArray")
@interface MChipByteArray : NSObject
/// Get a ByteArray of a specified length filled with 0 (empty with pre-allocated size)
+ (MChipByteArray * _Nullable)get:(NSInteger)size error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Create a Byte Array object with the equivalent value of the input
/// The input data is copied
/// <ul>
///   <li>
///     arguments:
///     <ul>
///       <li>
///         hexString: A byte array
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
///
/// a ByteArray object that has an equivalent value of the input data
+ (MChipByteArray * _Nullable)of:(NSString * _Nonnull)hexString error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Create a Byte Array object with the equivalent value of the input
/// The input data is copied
/// \param value The Value of the ByteArray as Char (e.g. 127 -> 0x007F, 257 -> 0x0101)
///
///
/// returns:
///
/// a ByteArray object that has an equivalent value of the input data
+ (MChipByteArray * _Nonnull)of:(uint16_t)value SWIFT_WARN_UNUSED_RESULT;
/// Create a Byte Array object with the equivalent value of the input
/// The input data is copied
/// \param value The Value of the ByteArray as Byte (e.g. 127 -> 0x7F, 8 -> 0x08)
///
///
/// returns:
///
/// a ByteArray object that has an equivalent value of the input data
+ (MChipByteArray * _Nonnull)ofByte:(uint8_t)value SWIFT_WARN_UNUSED_RESULT;
/// Create a Byte Array object with the equivalent value of the input
/// The input data is copied
/// \param bytes A Java byte array
///
/// \param size The number of bytes (from the beginning) to be added to the ByteArray
///
///
/// returns:
///
/// a ByteArray object that has an equivalent value of the input data
+ (MChipByteArray * _Nonnull)of:(NSArray<NSNumber *> * _Nonnull)bytes size:(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
/// Create a Byte Array object with the equivalent value of the input
/// The input data is copied
/// \param mChipByteArray A ByteArray object
///
///
/// returns:
///
/// a ByteArray object that has an equivalent value of the input data
+ (MChipByteArray * _Nonnull)ofMchipByteArray:(MChipByteArray * _Nonnull)mChipByteArray SWIFT_WARN_UNUSED_RESULT;
/// Create a Byte Array object with the equivalent value of the input
/// The input data is copied
/// \param bytes A byte array
///
///
/// returns:
///
/// a ByteArray object that has an equivalent value of the input data
+ (MChipByteArray * _Nonnull)ofArray:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
/// Convert the Byte Array into a Java String Base64 formatted
///
/// returns:
///
/// A String with the content of the Byte Array encoded in Base64
- (NSString * _Nonnull)toBase64String SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nonnull)base64Decode SWIFT_WARN_UNUSED_RESULT;
/// Convert the Byte Array into a Java String HEX formatted
///
/// returns:
///
/// A String with the content of the Byte Array encoded in HEX
- (NSString * _Nonnull)toHexString SWIFT_WARN_UNUSED_RESULT;
/// Convert to String containing each bit separately. Bytes delimiter is ’ ’
///
/// returns:
///
/// binary representation of this object
- (NSString * _Nonnull)toBinaryString SWIFT_WARN_UNUSED_RESULT;
/// Convert the Byte Array into a Java String. By default the String would be HEX formatted
///
/// returns:
///
/// A String with the content of the Byte Array encoded in HEX
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
///
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Convert the Byte Array into a Java String formatted as UTF 8
///
/// returns:
///
/// A String with the content of the Byte Array encoded in UTF 8
- (NSString * _Nonnull)toUtf8String SWIFT_WARN_UNUSED_RESULT;
/// Gets the bytes.
///
/// returns:
///
/// the bytes
- (NSArray<NSNumber *> * _Nonnull)getBytes SWIFT_WARN_UNUSED_RESULT;
/// Compare ByteArray objects.
///
/// returns:
///
/// true if each element of the internal representation matches, false otherwise.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Gets the length.
///
/// returns:
///
/// the length
- (NSInteger)getLength SWIFT_WARN_UNUSED_RESULT;
/// Check whether the Byte Array is empty
///
/// returns:
///
/// True if empty (i.e. zero elements), false otherwise
- (BOOL)isEmpty SWIFT_WARN_UNUSED_RESULT;
/// Check whether this byte array contains all 0s
///
/// returns:
///
/// true if all bytes are 0
- (BOOL)isZero SWIFT_WARN_UNUSED_RESULT;
/// Sets the byte.
/// \param offset the offset
///
/// \param byteValue the byteValue
///
///
/// throws:
///
/// <code>MChipEngineError.arrayIndexOutOfBounds</code> if negative or out of bounds value used
- (BOOL)setByte:(NSInteger)offset byteValue:(uint8_t)byteValue error:(NSError * _Nullable * _Nullable)error;
/// Sets the bytes starting from given offset.
/// \param offset the offset - starting position
///
/// \param bytes the bytes to copy
///
///
/// throws:
///
/// <code>MChipEngineError.invalidInput</code> in case current array is too small
- (BOOL)setBytes:(NSInteger)offset bytes:(NSArray<NSNumber *> * _Nonnull)bytes error:(NSError * _Nullable * _Nullable)error;
/// Sets the bytes starting from given offset.
/// \param dstOffset the offset - starting position
///
/// \param src the bytes to copy
///
/// \param srcOffset offset to src array - starting position
///
/// \param length number of data to copy
///
///
/// throws:
///
/// <code>MChipEngineError.invalidInput</code> in case current array is too small
- (BOOL)setBytes:(NSInteger)dstOffset src:(NSArray<NSNumber *> * _Nonnull)src srcOffset:(NSInteger)srcOffset length:(NSInteger)length error:(NSError * _Nullable * _Nullable)error;
/// Resize. Only to larger arrays
/// \param newLength the newLength 
///
- (void)resize:(NSInteger)newLength;
/// Resize current array and pad with leading byte unless total length is already bigger than
/// desired
/// \param toTotalLength new total length
///
/// \param padValue value to pad with
///
///
/// returns:
///
/// current object
- (MChipByteArray * _Nonnull)padLeading:(NSInteger)toTotalLength padValue:(uint8_t)padValue SWIFT_WARN_UNUSED_RESULT;
/// Append byte.
/// \param value the value
///
- (MChipByteArray * _Nonnull)appendByte:(uint8_t)value SWIFT_WARN_UNUSED_RESULT;
/// Resize current array and place bytes array at the end
/// \param bytes bytes to be appended
///
///
/// returns:
///
/// current object
- (MChipByteArray * _Nonnull)appendBytes:(MChipByteArray * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
/// Resize current array and place bytes array at the end
/// \param bytes bytes to be appended
///
///
/// returns:
///
/// current object
- (MChipByteArray * _Nonnull)appendBytesArray:(NSArray<NSNumber *> * _Nonnull)bytes SWIFT_WARN_UNUSED_RESULT;
/// Securely clear the internal data by zeroing all the elements
- (void)clear;
/// Copies the specified range of the specified Byte Array into a new Byte Array.
/// The initial index of the range (<tt>from</tt>) must lie between zero
/// and <tt>original.length</tt>, inclusive.  The value at
/// <tt>original[from]</tt> is placed into the initial element of the copy
/// (unless <tt>from == original.length</tt> or <tt>from == to</tt>).
/// Values from subsequent elements in the original array are placed into
/// subsequent elements in the copy.  The final index of the range
/// (<tt>to</tt>), which must be greater than or equal to <tt>from</tt>,
/// may be greater than <tt>original.length</tt>, in which case
/// <tt>(byte)0</tt> is placed in all elements of the copy whose index is
/// greater than or equal to <tt>original.length - from</tt>.  The length
/// of the returned array will be <tt>to - from</tt>.
/// \param from the initial index of the range to be copied, inclusive
///
/// \param to the final index of the range to be copied, exclusive.
/// (This index may lie outside the array.)
///
///
/// throws:
///
/// <code>MChipEngineError.invalidInput</code> if {@code from < 0} or {@code from > original.length}, if <tt>from &gt; to</tt>
/// <code>MChipEngineError.nullPointer</code> if <tt>original</tt> is null
///
/// returns:
///
/// a new array containing the specified range from the original array,
/// truncated or padded with zeros to obtain the required length
- (MChipByteArray * _Nullable)copyOfRange:(NSInteger)from to:(NSInteger)to error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Custom hash code for the purpose of correct storage in HashMap. We want to make two objects
/// equal based on mData content not based on object reference. This should cause keys being
/// equal
/// in HashMap when content is the same
///
/// returns:
///
/// hash code
@property (nonatomic, readonly) NSInteger hashValue;
/// Wipes the content of the inner byte array
- (void)wipe;
///
- (void)fill:(uint8_t)fillByte;
///
- (MChipByteArray * _Nonnull)clone SWIFT_WARN_UNUSED_RESULT;
///
- (void)setBit:(NSInteger)byteIndex bitIndex:(NSInteger)bitIndex isSet:(BOOL)isSet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC12mchip_engine20MChipEngineException")
@interface MChipEngineException : Exception
/// Constructor that uses the reason code as the exception message
/// \param reasonCode Additional detail about the exception
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode OBJC_DESIGNATED_INITIALIZER;
/// Constructor that allows an override for the message to add custom information
/// \param reasonCode Additional detail about the exception
///
/// \param message The exception message
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
/// Constructor that specifies the abort reason
/// \param abortReason Additional detail about the exception
///
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason OBJC_DESIGNATED_INITIALIZER;
/// Constructor that allows an override for the message to add custom information
/// \param abortReason Additional detail about the exception
///
/// \param message The exception message
///
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
/// Extract the reason code for the exception
///
/// returns:
///
/// The reason code
- (enum ExtendedReasonCode)getReasonCode SWIFT_WARN_UNUSED_RESULT;
/// Determine what abort reason should be returned based on the reason code this exception was
/// raised with.
///
/// returns:
///
/// The abort reason for this exception
- (enum AbortReason)getAbortReason SWIFT_WARN_UNUSED_RESULT;
/// Determine whether this exception should be passed up to the wallet
- (BOOL)ThrowToWalletAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC12mchip_engine41MChipContactlessTransactionErrorException")
@interface MChipContactlessTransactionErrorException : MChipEngineException
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)ThrowToWalletAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC12mchip_engine44MChipContactlessTransactionIncidentException")
@interface MChipContactlessTransactionIncidentException : MChipEngineException
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)ThrowToWalletAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC12mchip_engine23MChipDsrpInputException")
@interface MChipDsrpInputException : MChipEngineException
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)ThrowToWalletAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC12mchip_engine29MChipDsrpTransactionException")
@interface MChipDsrpTransactionException : MChipEngineException
///
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)ThrowToWalletAndReturnError:(NSError * _Nullable * _Nullable)error;
@end

@protocol QrcInputData;
@protocol QrcOutputData;

/// The interface which defines the services provided by the MChip Engine
SWIFT_PROTOCOL("_TtP12mchip_engine19MChipEngineServices_")
@protocol MChipEngineServices
/// Generates a cryptogram for the input data specified. Throws an exception if anything goes wrong
/// @param inputData the input data for the transaction
///
/// throws:
///
/// <code>MChipEngineError.dsrpTransactionDeclined</code>
/// <code>MChipEngineError.invalidProfile</code>
/// <code>MChipEngineError.illegalArgument</code>
///
/// returns:
///
/// the output of the transaction
- (id <DsrpOutputData> _Nullable)processDsrp:(id <DsrpInputData> _Nonnull)inputData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates cryptogram to use in QR Code
/// \param input QRC input
///
///
/// returns:
///
/// QRC output
- (id <QrcOutputData> _Nullable)processQrcTransaction:(id <QrcInputData> _Nullable)input error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@protocol MChipEngineProfile;
@protocol McbpCrypto2D;
@protocol TransactionCredentialsManager;
@protocol WalletConsentManager;
@protocol WalletCdCvmManager;
@protocol WalletAdviceManager;
@protocol MChipLogger;

/// The main MChipEngine which provides the transaction flow business logic
SWIFT_CLASS("_TtC12mchip_engine11MChipEngine")
@interface MChipEngine : NSObject <MChipEngineServices>
///
- (nullable instancetype)initWithWalletProfile:(id <MChipEngineProfile> _Nullable)walletProfile mMcbpCrypto2D:(id <McbpCrypto2D> _Nullable)mMcbpCrypto2D transactionCredentialsManager:(id <TransactionCredentialsManager> _Nullable)transactionCredentialsManager walletConsentManager:(id <WalletConsentManager> _Nullable)walletConsentManager walletCdCvmManager:(id <WalletCdCvmManager> _Nullable)walletCdCvmManager walletAdviceManager:(id <WalletAdviceManager> _Nullable)walletAdviceManager optionalAdditionalPDolList:(NSArray<DolEntry *> * _Nullable)optionalAdditionalPDolList optionalAdditionalUDolList:(NSArray<DolEntry *> * _Nullable)optionalAdditionalUDolList mChipLogger:(id <MChipLogger> _Nullable)mChipLogger error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
///
- (id <DsrpOutputData> _Nullable)processDsrp:(id <DsrpInputData> _Nonnull)inputData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
- (id <QrcOutputData> _Nullable)processQrcTransaction:(id <QrcInputData> _Nullable)input error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@protocol QrcData;

/// This class represents the profile of a digitized card and include the various data elements
/// that are required for performing a transaction.
SWIFT_PROTOCOL("_TtP12mchip_engine18MChipEngineProfile_")
@protocol MChipEngineProfile
/// Get the data required for contactless transactions.
///
/// returns:
///
/// Contactless payment data.
- (id <ContactlessPaymentData> _Nullable)getContactlessProfileData SWIFT_WARN_UNUSED_RESULT;
/// Get the data required for DSRP transactions.
///
/// returns:
///
/// DSRP payment data.
- (id <MCEDsrpData> _Nullable)getDsrpProfileData SWIFT_WARN_UNUSED_RESULT;
/// Get the data required for QRC transactions.
///
/// returns:
///
/// QRC payment data.
- (id <QrcData> _Nullable)getQrcProfileData SWIFT_WARN_UNUSED_RESULT;
/// Get the data required for either contactless or DSRP transactions.
///
/// returns:
///
/// Common payment data.
- (id <CommonData> _Nonnull)getCommonData SWIFT_WARN_UNUSED_RESULT;
@end



///
SWIFT_CLASS("_TtC12mchip_engine19MChipInputException")
@interface MChipInputException : MChipEngineException
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)ThrowToWalletAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end


///
SWIFT_PROTOCOL("_TtP12mchip_engine11MChipLogger_")
@protocol MChipLogger
/// Send a Debug Log message
/// \param message Log message
///
- (void)d:(NSString * _Nonnull)message;
/// Send an Error Log message
/// \param exception A description of exception
///
/// \param message Log message
///
- (void)e:(Exception * _Nonnull)exception :(NSString * _Nonnull)message;
/// Send an Error Log message
/// \param message Log message
///
- (void)e:(NSString * _Nonnull)message;
/// Send an Info Log message
/// \param message Log message
///
- (void)i:(NSString * _Nonnull)message;
/// Send a Verbose Log message
/// \param message Log message
///
- (void)v:(NSString * _Nonnull)message;
/// Send a Warning Log message
/// \param message Log message
///
- (void)w:(NSString * _Nonnull)message;
@end


///
SWIFT_CLASS("_TtC12mchip_engine21MChipProfileException")
@interface MChipProfileException : MChipEngineException
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)ThrowToWalletAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC12mchip_engine22MChipQrcInputException")
@interface MChipQrcInputException : MChipEngineException
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)ThrowToWalletAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end


///
SWIFT_CLASS("_TtC12mchip_engine28MChipQrcTransactionException")
@interface MChipQrcTransactionException : MChipEngineException
///
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithAbortReason:(enum AbortReason)abortReason message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithReasonCode:(enum ExtendedReasonCode)reasonCode message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
///
- (BOOL)ThrowToWalletAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


///
SWIFT_CLASS("_TtC12mchip_engine21MChipRuntimeException")
@interface MChipRuntimeException : Exception
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This interface defines the cryptographic processing operations that are required by MCM Lite
/// <p>
/// This interface provides the cryptographic processing operations that are required by MCM Lite.
/// The class that implements this Interface must be able to manage the process of obtaining
/// transaction credendials and dealing with transformation of single use keys to session keys
/// i.e. the MCM Lite component does not pass credentials across this interface but expects the
/// class
/// implementing this API to do.
/// <p>
/// This interface is **NOT** equivalent to the MP SDK crypto component.  In order to implement this
/// the MP SDK will need to provide a wrapper class that connects the transaction credentials
/// manager, the pin provider and the existing crypto component together
/// <p>
/// Users of this interface need to call SetContext prior to calling the other functions in order to
/// get sensible results
SWIFT_PROTOCOL("_TtP12mchip_engine12McbpCrypto2D_")
@protocol McbpCrypto2D
/// Set the context of what keys should be used to perform crypto functions.
/// <ul>
///   <li>
///     arguments:
///     <ul>
///       <li>
///         keysContext:      Whether to use valid keys or random keys.
///       </li>
///       <li>
///         credentialsScope: Whether we are performing a contactless or DSRP payment.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
///
/// {@see CryptoContext}
- (id <CryptoContext> _Nonnull)setContext:(enum KeysContext)keysContext credentialsScope:(enum CredentialsScope)credentialsScope SWIFT_WARN_UNUSED_RESULT;
/// Computed the application cryptogram.
/// <ul>
///   <li>
///     arguments
///     <ul>
///       <li>
///         transactionData: The data to use for computation.
///       </li>
///       <li>
///         keyType:         Whether to use MD or UMD keys.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
///
/// The computed application cryptogram.
- (NSArray<NSNumber *> * _Nonnull)computeApplicationCryptogram:(NSArray<NSNumber *> * _Nonnull)transactionData keyType:(enum KeyType)keyType SWIFT_WARN_UNUSED_RESULT;
/// Computed the signed dynamic data.
/// <ul>
///   <li>
///     arguments:
///     <ul>
///       <li>
///         protectedIdn:              The encrypted IDN to use in the computation.
///       </li>
///       <li>
///         cryptogramInformationData: The cryptogram information data.
///       </li>
///       <li>
///         applicationCryptogram:     The application cryptogram.
///       </li>
///       <li>
///         pDolRelatedData:           The PDOL data.
///       </li>
///       <li>
///         generateAcResponse:        The current response being built for the GEN AC command.
///       </li>
///       <li>
///         additionalIccDynamicData:  Additional ICC data.
///       </li>
///       <li>
///         unpredictableNumber:       The unpredictable number.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// throws:
///
/// MchipCrtComponentMissingException Exception thrown by McbpCrypto2D in case there are
/// no or invalid RSA CRT components available.
///
/// returns:
///
/// The computed signed dynamic data.
- (NSArray<NSNumber *> * _Nullable)computeSignedDynamicData:(NSArray<NSNumber *> * _Nonnull)protectedIdn cryptogramInformationData:(uint8_t)cryptogramInformationData applicationCryptogram:(NSArray<NSNumber *> * _Nonnull)applicationCryptogram pDolRelatedData:(NSArray<NSNumber *> * _Nonnull)pDolRelatedData generateAcResponse:(NSArray<NSNumber *> * _Nonnull)generateAcResponse additionalIccDynamicData:(NSArray<NSNumber *> * _Nonnull)additionalIccDynamicData unpredictableNumber:(NSArray<NSNumber *> * _Nonnull)unpredictableNumber error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Compute the CVC 3 data.
/// <ul>
///   <li>
///     arguments:
///     <ul>
///       <li>
///         transactionData: The data to use.
///       </li>
///       <li>
///         keyType:         Whether to use MD or UMD keys.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
///
/// The computed CVC 3.
- (NSArray<NSNumber *> * _Nullable)computeCvc3:(NSArray<NSNumber *> * _Nonnull)transactionData keyType:(enum KeyType)keyType SWIFT_WARN_UNUSED_RESULT;
/// Perform a SHA1 hashing algorithm.
/// <ul>
///   <li>
///     arguments:
///     <ul>
///       <li>
///         dataToHash: The data to be hashed.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
///
/// The SHA1 hashed data.
- (NSArray<NSNumber *> * _Nonnull)sha1:(NSArray<NSNumber *> * _Nonnull)dataToHash SWIFT_WARN_UNUSED_RESULT;
/// Perform a SHA256 hashing algorithm.
/// <ul>
///   <li>
///     arguments:
///     <ul>
///       <li>
///         dataToHash: The data to be hashed.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
///
/// The SHA256 hashed data.
- (NSArray<NSNumber *> * _Nonnull)sha256:(NSArray<NSNumber *> * _Nonnull)dataToHash SWIFT_WARN_UNUSED_RESULT;
@end


///
SWIFT_CLASS("_TtC12mchip_engine33MchipCrtComponentMissingException")
@interface MchipCrtComponentMissingException : Exception
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
- (enum ExtendedReasonCode)getReasonCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end

@class NSNumber;

/// This interface groups together data required for QRC transactions.
SWIFT_PROTOCOL("_TtP12mchip_engine12QrcInputData_")
@protocol QrcInputData
/// The transaction amount.
///
/// returns:
///
/// The transaction amount.
- (NSArray<NSNumber *> * _Nullable)getAmount SWIFT_WARN_UNUSED_RESULT;
/// Base 16 value encoded in bytes.
///
/// returns:
///
/// The byte array representation of the numeric currency code.
- (NSArray<NSNumber *> * _Nullable)getCurrencyCode SWIFT_WARN_UNUSED_RESULT;
/// Base 16 value encoded in bytes.
///
/// returns:
///
/// The byte array representation of the numeric country code.
- (NSArray<NSNumber *> * _Nullable)getCountryCode SWIFT_WARN_UNUSED_RESULT;
/// Byte array representation of the transaction date.
///
/// returns:
///
/// The transaction date.
- (NSArray<NSNumber *> * _Nullable)getTransactionDate SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     The current time as UTC seconds from the epoch 1st Jan 1970.
///   </li>
///   <li>
///   </li>
///   <li>
///     @return the current time as UTC seconds from the epoch
///   </li>
/// </ul>
- (NSNumber * _Nullable)getEpochTimeInSeconds SWIFT_WARN_UNUSED_RESULT;
@end


///
SWIFT_CLASS("_TtC12mchip_engine17MchipQrcInputData")
@interface MchipQrcInputData : NSObject <QrcInputData>
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
- (nonnull instancetype)initWithAmount:(NSArray<NSNumber *> * _Nullable)amount currencyCode:(NSArray<NSNumber *> * _Nullable)currencyCode countryCode:(NSArray<NSNumber *> * _Nullable)countryCode transactionDate:(NSArray<NSNumber *> * _Nullable)transactionDate epochTimeInSeconds:(NSNumber * _Nullable)epochTimeInSeconds OBJC_DESIGNATED_INITIALIZER;
///
- (NSArray<NSNumber *> * _Nullable)getAmount SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getCurrencyCode SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getCountryCode SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getTransactionDate SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///   </li>
/// </ul>
- (NSNumber * _Nullable)getEpochTimeInSeconds SWIFT_WARN_UNUSED_RESULT;
@end



///
SWIFT_CLASS("_TtC12mchip_engine22ModelNotFoundException")
@interface ModelNotFoundException : McmLiteCheckedException
/// Constructor.  A reason must be provided
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end


/// Thrown if an application tries to create an array with negative size.
/// -author  unascribed
/// -since   JDK1.0
SWIFT_CLASS("_TtC12mchip_engine26NegativeArraySizeException")
@interface NegativeArraySizeException : Exception
/// Constructs a <code>NegativeArraySizeException</code> with no detail message.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Constructs a <code>NegativeArraySizeException</code> with the specified detail message.
/// -param s the detail message.
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
@end


///
SWIFT_CLASS("_TtC12mchip_engine18NullInputException")
@interface NullInputException : InvalidInputException
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
@end


/// Thrown when an application attempts to use {@code null} in a
/// case where an object is required. These include:
/// <ul>
/// <li>Calling the instance method of a {@code null} object.
/// <li>Accessing or modifying the field of a {@code null} object.
/// <li>Taking the length of {@code null} as if it were an array.
/// <li>Accessing or modifying the slots of {@code null} as if it
///     were an array.
/// <li>Throwing {@code null} as if it were a {@code Throwable}
///     value.
/// </ul>
/// <p>
/// Applications should throw instances of this class to indicate
/// other illegal uses of the {@code null} object.
/// {@code NullPointerException} objects may be constructed by the
/// virtual machine as if {@linkplain Throwable#Throwable(String,
/// Throwable, boolean, boolean) suppression were disabled and/or the
/// stack trace was not writable}.
/// -author  unascribed
/// -since   JDK1.0
SWIFT_CLASS("_TtC12mchip_engine20NullPointerException")
@interface NullPointerException : Exception
/// <ul>
///   <li>
///     Constructs a {@code NullPointerException} with no detail message.
///   </li>
/// </ul>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Constructs a {@code NullPointerException} with the specified detail message.
/// <ul>
///   <li>
///     param   s   the detail message.
///   </li>
/// </ul>
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum defined the product type that is supported by the current card profile.
typedef SWIFT_ENUM(NSInteger, ProductType) {
  ProductTypeCREDIT = 0,
  ProductTypeDEBIT = 1,
  ProductTypeCOMMERCIAL = 2,
  ProductTypePREPAID = 3,
  ProductTypeUNKNOWN = 4,
};

/// Indicates the purpose that the terminal has in mind for the transaction.
typedef SWIFT_ENUM(NSInteger, Purpose) {
/// Terminal wants an ARQC (with CDA).
  PurposeAUTHORIZE = 0,
/// Terminal wants an AAC (with CDA).
  PurposeAUTHENTICATE = 1,
/// It can’t be determined what the purpose is
  PurposeUNKNOWN = 2,
};


/// Provides profile data that is required to perform QRC transactions.
SWIFT_PROTOCOL("_TtP12mchip_engine7QrcData_")
@protocol QrcData
/// Return the AID used for QRC transactions
///
/// returns:
///
/// the AID
- (NSArray<NSNumber *> * _Nullable)getAid SWIFT_WARN_UNUSED_RESULT;
/// Get the AIP.
///
/// returns:
///
/// The AIP.
- (NSArray<NSNumber *> * _Nullable)getAip SWIFT_WARN_UNUSED_RESULT;
/// Returns the Application Label, which is a mnemonic associated with the AID according to [ISO 7816-5]
///
/// returns:
///
/// the Application Label
- (NSArray<NSNumber *> * _Nullable)getApplicationLabel SWIFT_WARN_UNUSED_RESULT;
/// Version number assigned by the payment system for the application. When not supported, the method returns null value
///
/// returns:
///
/// Version number or null
- (NSArray<NSNumber *> * _Nullable)getApplicationVersionNumber SWIFT_WARN_UNUSED_RESULT;
/// Application expiration date used for the QRC transaction (typically same value as for DSRP)
///
/// returns:
///
/// Application Expiration Date
- (NSArray<NSNumber *> * _Nullable)getExpirationDate SWIFT_WARN_UNUSED_RESULT;
/// Application effective date used for the QRC transaction
///
/// returns:
///
/// Application Effective Date
- (NSArray<NSNumber *> * _Nullable)getApplicationEffectiveDate SWIFT_WARN_UNUSED_RESULT;
/// Get the issuer application data.
///
/// returns:
///
/// The issuer application data.
- (NSArray<NSNumber *> * _Nullable)getIssuerApplicationData SWIFT_WARN_UNUSED_RESULT;
/// Get the Track 2 Equivalent Data used for DSRP or QRC
///
/// returns:
///
/// Track 2 Equivalent
- (NSArray<NSNumber *> * _Nullable)getTrack2EquivalentData SWIFT_WARN_UNUSED_RESULT;
/// Get the Card Issuer Action Code for decline.
///
/// returns:
///
/// The CIAC for decline.
- (NSArray<NSNumber *> * _Nullable)getDeclineConditions SWIFT_WARN_UNUSED_RESULT;
/// Returns the CVM Model of the QrcData of MchipCardProfile object. This indicates whether CDCVM
/// is always required, required based on the transaction analysis or never required like a card.
///
/// returns:
///
/// the CVM Model
- (enum CvmModel)getCvmModel SWIFT_WARN_UNUSED_RESULT;
/// Get the Host UMD configuration.
///
/// returns:
///
/// The Host UMD configuration.
- (enum UmdGeneration)getUmdGeneration SWIFT_WARN_UNUSED_RESULT;
/// Returns the last four digit of PAN, to be printed on the receipt. When not supported, the method returns null value.
///
/// returns:
///
/// the last four digit of PAN or null.
- (NSArray<NSNumber *> * _Nullable)getLast4DigitsOfPan SWIFT_WARN_UNUSED_RESULT;
/// Returns the Third party data. When not supported, the method returns null value.
///
/// returns:
///
/// the Third Party Data or null.
- (NSArray<NSNumber *> * _Nullable)getThirdPartyData SWIFT_WARN_UNUSED_RESULT;
/// Get the PAN sequence number
///
/// returns:
///
/// The PAN sequence number
- (NSArray<NSNumber *> * _Nullable)getPanSequenceNumber SWIFT_WARN_UNUSED_RESULT;
/// 1-4 languages stored in order of preference, each represented by 2 alphabetical characters according to [ISO 639].
/// When not supported, the method returns null value.
///
/// returns:
///
/// language preference or null
- (NSArray<NSNumber *> * _Nullable)getLanguagePreference SWIFT_WARN_UNUSED_RESULT;
/// Returns the Token Requestor ID. When not supported, the method returns null value
///
/// returns:
///
/// the Token Requestor ID or null
- (NSArray<NSNumber *> * _Nullable)getTokenRequestorId SWIFT_WARN_UNUSED_RESULT;
/// Returns the Domain Identifier. When not supported, the method returns null value
///
/// returns:
///
/// the Domain Identifier or null
- (NSArray<NSNumber *> * _Nullable)getDomainIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the Payment Account Reference. When not supported, the method returns null value
///
/// returns:
///
/// the Payment Account Reference or null
- (NSArray<NSNumber *> * _Nullable)getPar SWIFT_WARN_UNUSED_RESULT;
/// If the POI supports electronics means of providing receipt, such as SMS or email, then POI may analyse the Issuer URL for supporting data.
/// Please refer to EMVCo QRC Specification for more information about the format of this data element.
///
/// returns:
///
/// the Issuer URL or null
- (NSArray<NSNumber *> * _Nullable)getIssuerUrl SWIFT_WARN_UNUSED_RESULT;
/// Check whether the QRC data is valid for MChip.
///
/// returns:
///
/// true if it is, false otherwise
- (BOOL)isQrcDataValid SWIFT_WARN_UNUSED_RESULT;
@end


///
SWIFT_CLASS("_TtC12mchip_engine10QrcDataSet")
@interface QrcDataSet : NSObject
///
- (nonnull instancetype)initWithQrcBuffer:(NSString * _Nonnull)qrcBuffer transactionId:(NSArray<NSNumber *> * _Nonnull)transactionId OBJC_DESIGNATED_INITIALIZER;
///
- (NSString * _Nonnull)getQrcBuffer SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nonnull)getTransactionId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// Used to indicate invalid input to DSRP calculations.
SWIFT_CLASS("_TtC12mchip_engine24QrcInvalidInputException")
@interface QrcInvalidInputException : Exception
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


///
SWIFT_PROTOCOL("_TtP12mchip_engine13QrcOutputData_")
@protocol QrcOutputData
/// The transaction amount.
///
/// returns:
///
/// The transaction amount.
- (NSArray<NSNumber *> * _Nullable)getQrcBuffer SWIFT_WARN_UNUSED_RESULT;
/// Base 16 value encoded in bytes.
///
/// returns:
///
/// The byte array representation of the numeric currency code.
- (NSArray<NSNumber *> * _Nullable)getTransactionId SWIFT_WARN_UNUSED_RESULT;
@end

///
typedef SWIFT_ENUM_NAMED(NSInteger, MCEQrcType, "QrcType") {
  MCEQrcTypeSINGLE_QRC = 0,
  MCEQrcTypeDUAL_QRC = 1,
};

/// Reasons returned to the wallet for the advice that has been provided at the outcome of the
/// transaction.
typedef SWIFT_ENUM(NSInteger, Reason) {
  ReasonCONTEXT_NOT_MATCHING = 0,
  ReasonCREDENTIALS_NOT_ACCESSIBLE_WITHOUT_CDCVM = 1,
  ReasonCREDENTIALS_NOT_AVAILABLE = 2,
  ReasonINSUFFICIENT_CDCVM = 3,
  ReasonINSUFFICIENT_POI_AUTHENTICATION = 4,
  ReasonMISSING_CDCVM = 5,
  ReasonMISSING_CONSENT = 6,
  ReasonTRANSACTION_CONDITIONS_NOT_ALLOWED = 7,
  ReasonUNSUPPORTED_TRANSIT = 8,
};


/// This class represents a record from the contactless profile
SWIFT_PROTOCOL("_TtP12mchip_engine6Record_")
@protocol Record
/// Get the record number.
///
/// returns:
///
/// The record number.
- (uint8_t)getRecordNumber SWIFT_WARN_UNUSED_RESULT;
/// Get the SFI.
///
/// returns:
///
/// The SFI.
- (uint8_t)getSfi SWIFT_WARN_UNUSED_RESULT;
/// Get the data of the record.
///
/// returns:
///
/// The record data.
- (NSArray<NSNumber *> * _Nonnull)getRecordValue SWIFT_WARN_UNUSED_RESULT;
@end

/// Extended transaction type that includes transit ISO 8583:1987
typedef SWIFT_ENUM(NSInteger, RichTransactionType) {
  RichTransactionTypePURCHASE = 0,
  RichTransactionTypeREFUND = 1,
  RichTransactionTypeCASH = 2,
  RichTransactionTypeTRANSIT = 3,
  RichTransactionTypePURCHASE_WITH_CASHBACK = 4,
  RichTransactionTypeUNKNOWN = 5,
};

enum TerminalType : NSInteger;
enum TerminalTechnology : NSInteger;

/// Interface used to pass terminal information back to the wallet.
SWIFT_PROTOCOL("_TtP12mchip_engine19TerminalInformation_")
@protocol TerminalInformation
/// Get the Terminal Type.
///
/// returns:
///
/// The Terminal Type.
- (enum TerminalType)getTerminalType SWIFT_WARN_UNUSED_RESULT;
/// Indicates if two tap payments are supported.
///
/// returns:
///
/// Indicates if two tap payments are supported.
- (enum ExtendedBool)isTwoTapSupported SWIFT_WARN_UNUSED_RESULT;
/// Get the Terminal Technology Type.
///
/// returns:
///
/// The Terminal Technology Type.
- (enum TerminalTechnology)getTerminalTechnology SWIFT_WARN_UNUSED_RESULT;
/// Indicates if CD CVM is supported.
///
/// returns:
///
/// The CD-CVM support information.
- (enum ExtendedBool)isCdCvmSupported SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the PDOL values.
///
/// returns:
///
/// The PDOL values.
- (NSArray<NSNumber *> * _Nullable)getPdolValues SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the CDOL values.
///
/// returns:
///
/// The CDOL values.
- (NSArray<NSNumber *> * _Nullable)getCdolValues SWIFT_WARN_UNUSED_RESULT;
/// Search in the PDOL related data for a given tag.
/// \param tag The tag to search for in the PDOL
///
///
/// returns:
///
/// The value if both the tag and the value are found. An empty array of zeroes if only
/// the tag is found and the length is known. An empty byte array in the other cases.
- (NSArray<NSNumber *> * _Nonnull)getDiscretionaryDataByTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the merchant and location data.
///
/// returns:
///
/// Merchant and location data.
- (NSArray<NSNumber *> * _Nullable)getMerchantAndLocation SWIFT_WARN_UNUSED_RESULT;
@end

/// Indicates the type of technology being used by the terminal.
typedef SWIFT_ENUM(NSInteger, TerminalTechnology) {
  TerminalTechnologyCONTACTLESS_EMV = 0,
  TerminalTechnologyCONTACTLESS_MAGSTRIPE = 1,
  TerminalTechnologyDSRP_EMV = 2,
  TerminalTechnologyDSRP_UCAF = 3,
  TerminalTechnologyQRC = 4,
};

/// Indicates the type of terminal being used for the transaction as reported by the terminal.
typedef SWIFT_ENUM(NSInteger, TerminalType) {
  TerminalTypeBANK_ATTENDED_ONLINE = 0,
  TerminalTypeBANK_ATTENDED_OFFLINE = 1,
  TerminalTypeBANK_UNATTENDED_ONLINE_OFFLINE = 2,
  TerminalTypeBANK_UNATTENDED_OFFLINE = 3,
  TerminalTypeMERCHANT_ATTENDED_ONLINE_OFFLINE = 4,
  TerminalTypeMERCHANT_ATTENDED_OFFLINE = 5,
  TerminalTypeMERCHANT_UNATTENDED_ONLINE_OFFLINE = 6,
  TerminalTypeMERCHANT_UNATTENDED_OFFLINE = 7,
  TerminalTypeCARDHOLDER_OPERATED_ONLINE_OFFLINE = 8,
  TerminalTypeCARDHOLDER_OPERATED_OFFLINE = 9,
  TerminalTypeBANK_ATTENDED_ONLINE_OFFLINE = 10,
  TerminalTypeBANK_UNATTENDED_ONLINE = 11,
  TerminalTypeMERCHANT_ATTENDED_ONLINE = 12,
  TerminalTypeMERCHANT_UNATTENDED_ONLINE = 13,
  TerminalTypeCARDHOLDER_OPERATED_ONLINE = 14,
  TerminalTypeUNKNOWN = 15,
};


/// Tag-Length-Value objects representation.
SWIFT_CLASS("_TtC12mchip_engine9TlvObject")
@interface TlvObject : NSObject
/// Maximum length of value field so it won’t throw Java Heap Size Exception
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint64_t MAX_LENGTH_OF_VALUE_FIELD;)
+ (uint64_t)MAX_LENGTH_OF_VALUE_FIELD SWIFT_WARN_UNUSED_RESULT;
/// Constructor
/// \param tag tag (can be multi-byte)
///
/// \param value value
///
///
/// throws:
///
/// InvalidLengthException   in case value is to big, so the length field cannot be encoded
/// InvalidTagException      in case when tag is not valid (eg wrong encoding of multi-byte tag) or null or empty
/// InvalidInputException in cases: null value or empty value
- (nullable instancetype)initWithTag:(MChipByteArray * _Nonnull)tag value:(MChipByteArray * _Nullable)value error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Constructor
/// \param tag tag (can be multi-byte)
///
/// \param value value as array of other TLV objects that will be merged in order they appear in array
///
///
/// throws:
///
/// InvalidLengthException   in case value is to big, so the length field cannot be encoded
/// InvalidTagException      in case when tag is not valid (eg wrong encoding of multi-byte tag) or null or empty
/// InvalidInputException in cases: null value or empty value
- (nullable instancetype)initWithTag:(MChipByteArray * _Nonnull)tag array:(NSArray<TlvObject *> * _Nonnull)value error:(NSError * _Nullable * _Nullable)error;
/// Return TLV as bytes (concatenation of tag, length and value arrays)
///
/// returns:
///
/// ByteArray with bytes
- (MChipByteArray * _Nullable)getBytesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns the size of this object which is the sum of tag,len and value arrays. This is equivalent
/// of this.getBytes().getLength() but quicker
///
/// returns:
///
/// total number of bytes that this TlvObject has
- (NSInteger)getObjectSize SWIFT_WARN_UNUSED_RESULT;
/// Gets tag part of the object
///
/// returns:
///
/// tag byte array
- (MChipByteArray * _Nonnull)getTag SWIFT_WARN_UNUSED_RESULT;
/// Gets value part of the object
///
/// returns:
///
/// value byte array
- (MChipByteArray * _Nonnull)getValue SWIFT_WARN_UNUSED_RESULT;
/// Gets length part of the object
///
/// returns:
///
/// length byte array
- (MChipByteArray * _Nonnull)getLength SWIFT_WARN_UNUSED_RESULT;
/// Parse array of bytes into TlvObject. No offset
/// \param data byte array
///
///
/// throws:
///
/// InvalidTagException      in case tag is invalid
/// InvalidInputException in case no value inside TLV
/// InvalidLengthException   in case length is too big. Max is 0x7fffffff. Or offset beyond the array
///
/// returns:
///
/// TLV object
+ (TlvObject * _Nullable)parseBytes:(MChipByteArray * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse array of bytes into TlvObject. No offset
/// \param data byte array
///
///
/// throws:
///
/// InvalidTagException      in case tag is invalid
/// InvalidInputException in case no value inside TLV
/// InvalidLengthException   in case length is too big. Max is 0x7fffffff. Or offset beyond the array
///
/// returns:
///
/// TLV object
+ (TlvObject * _Nullable)parseByteArray:(NSArray<NSNumber *> * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Parse array of bytes into TlvObject
/// \param data byte array
///
/// \param initialOffset offset to TLV to parse in byte array
///
///
/// throws:
///
/// InvalidTagException      in case tag is invalid
/// InvalidInputException in case no value inside TLV
/// InvalidLengthException   in case length is too big. Max is 0x7fffffff. Or offset beyond the array
///
/// returns:
///
/// TLV object
+ (TlvObject * _Nullable)parseBytes:(NSArray<NSNumber *> * _Nullable)data initialOffset:(NSInteger)initialOffset error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<MChipByteArray *, TlvObject *> * _Nullable)parseMultipleTlvsFromBytes:(MChipByteArray * _Nonnull)data initialOffset:(NSInteger)initialOffset error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
///
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
///
- (void)wipe;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This interface is used to define track construction data that is used to support magstripe
/// transactions.
SWIFT_PROTOCOL_NAMED("TrackConstructionData")
@protocol MCETrackConstructionData
///
- (NSArray<NSNumber *> * _Nullable)getPCvc3 SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getPUnAtc SWIFT_WARN_UNUSED_RESULT;
///
- (NSArray<NSNumber *> * _Nullable)getNAtc SWIFT_WARN_UNUSED_RESULT;
@end

enum TransactionRange : NSInteger;

/// Provides information about the availability of transaction credentials.
/// <p>
/// Provides information about the availability of transaction credentials. This interface allows
/// the {@see MchipEngine} to inquire the status and the configuration of the available credentials
/// that are managed by the wallet. This interface only deals with availability and the credentials
/// themselves are managed outside of the MCM Lite Component within the Crypto environment.
SWIFT_PROTOCOL("_TtP12mchip_engine29TransactionCredentialsManager_")
@protocol TransactionCredentialsManager
/// Determine if the UMD credentials are subject to CVM.
/// <ul>
///   <li>
///     arguments:
///     <ul>
///       <li>
///         transactionRange: The range of the transaction.
///       </li>
///       <li>
///         scope:            Whether this is a contactless or DSRP transaction.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
///
/// true if they are; otherwise false.
- (BOOL)areUmdCredentialsSubjectToCvmFor:(enum TransactionRange)transactionRange scope:(enum CredentialsScope)scope SWIFT_WARN_UNUSED_RESULT;
/// Determine if there are valid credentials available for this type of transaction.
/// <ul>
///   <li>
///     arguments:
///     <ul>
///       <li>
///         scope: Whether this is a contactless or DSRP transction.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
///
/// true if they are; otherwise false.
- (BOOL)hasValidCredentialsFor:(enum CredentialsScope)scope SWIFT_WARN_UNUSED_RESULT;
@end


/// Used to report declined DSRP or QRC transactions.
SWIFT_CLASS("_TtC12mchip_engine28TransactionDeclinedException")
@interface TransactionDeclinedException : Exception
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Provides details of the current transaction being performed so that the wallet can take this into
/// consideration when deciding the final transaction outcome.
SWIFT_PROTOCOL("_TtP12mchip_engine22TransactionInformation_")
@protocol TransactionInformation
/// Get the currency code the transaction was for.
///
/// returns:
///
/// The currency code.
- (NSArray<NSNumber *> * _Nonnull)getCurrencyCode SWIFT_WARN_UNUSED_RESULT;
/// Get the authorized amount the transaction was for.
///
/// returns:
///
/// The authorized amount.
- (NSArray<NSNumber *> * _Nonnull)getAuthorizedAmount SWIFT_WARN_UNUSED_RESULT;
/// Get the other amount the transaction was for.
///
/// returns:
///
/// The other amount.
- (NSArray<NSNumber *> * _Nonnull)getOtherAmount SWIFT_WARN_UNUSED_RESULT;
/// Get the determined transaction range.
///
/// returns:
///
/// The transaction range.
- (enum TransactionRange)getTransactionRange SWIFT_WARN_UNUSED_RESULT;
/// Get the rich transaction type.
///
/// returns:
///
/// The rich transaction type.
- (enum RichTransactionType)getRichTransactionType SWIFT_WARN_UNUSED_RESULT;
/// Get the expected user action on POI.
///
/// returns:
///
/// The expected user action on POI.
- (enum ExpectedUserActionOnPoi)getExpectedUserActionOnPoi SWIFT_WARN_UNUSED_RESULT;
/// Get the purpose of the transaction.
///
/// returns:
///
/// The purpose.
- (enum Purpose)getPurpose SWIFT_WARN_UNUSED_RESULT;
/// Get whether the transaction was domestic or international.
///
/// returns:
///
/// The conditions of use.
- (enum ConditionsOfUse)getConditionsOfUse SWIFT_WARN_UNUSED_RESULT;
/// Get whether the terminal has requested CD CVM.
///
/// returns:
///
/// true if it has; otherwise false.
- (BOOL)hasTerminalRequestedCdCvm SWIFT_WARN_UNUSED_RESULT;
/// Get whether the alternate AID is being used.
///
/// returns:
///
/// true if it is; otherwise false.
- (BOOL)isAlternateAidUsed SWIFT_WARN_UNUSED_RESULT;
@end

/// Defines outcome codes that may be returned to the wallet at the end of a transaction.
/// <p>
/// At the end of a transaction the wallet will be informed of the outcome. The result indicates
/// whether or not the transaction was completed to point of generating an online authorization or
/// whether the transaction was declined.
/// <p>
/// The code can also return a WalletActionRequired outcome. This indicates that the transaction can
/// not proceed since the consumer is not sufficiently authenticated. The MCM Lite enters into a
/// "paused" state when this status is returned and this allows the wallet to authenticate the user
/// and to instruct them to tap again. The MCM Lite code will automatically restart when the mobile
/// device is tapped again.
typedef SWIFT_ENUM(NSInteger, TransactionOutcome) {
  TransactionOutcomeAUTHORIZE_ONLINE = 0,
  TransactionOutcomeAUTHENTICATE_OFFLINE = 1,
  TransactionOutcomeDECLINE_BY_TERMINAL = 2,
  TransactionOutcomeDECLINE_BY_CARD = 3,
  TransactionOutcomeWALLET_ACTION_REQUIRED = 4,
};

/// This enum is used to record the value range of the transaction based on the terminal perspective.
/// <p>
/// During a transaction the terminal determines if transactions are high value or low value based on
/// the terminal configuration. This typically varies on a country by country basis. The terminal
/// will treat the transaction differently depending on the transaction value e.g. high value
/// transactions typically require additional authentication.
/// <p>
/// By examining the terminal data exchange the code can often determine whether or not the terminal
/// considers the transaction as being high value or low value and this is recorded in this enum.
/// <p>
/// *1*: There are no hardcoded amounts in the code to determine transaction range and this
/// information is determined solely on what the terminal indicates.
/// <p>
/// *2*: If the terminal does not provide sufficient data in the transaction then the value range
/// will be unknown
typedef SWIFT_ENUM(NSInteger, TransactionRange) {
  TransactionRangeLOW_VALUE = 0,
  TransactionRangeHIGH_VALUE = 1,
  TransactionRangeUNKNOWN = 2,
};

///
typedef SWIFT_ENUM(NSInteger, TransactionType) {
  TransactionTypeMCHIP = 0,
  TransactionTypeMAGSTRIPE = 1,
};

@class UIResponder;

@interface UIApplication (SWIFT_EXTENSION(mchip_engine))
@property (nonatomic, readonly, strong) UIResponder * _Nullable nextResponder;
@end

/// Indicates what UCAF version should be used with the current profile.
typedef SWIFT_ENUM(NSInteger, UcafVersion) {
  UcafVersionV0 = 0,
  UcafVersionV0_PLUS = 1,
};

/// Indicates how the host is configured to treat UMD credentials on the card profile.
typedef SWIFT_ENUM(NSInteger, UmdGeneration) {
  UmdGenerationALWAYS_GENERATE_VALID_UMD = 0,
  UmdGenerationALWAYS_GENERATE_RANDOM_UMD = 1,
  UmdGenerationGENERATE_VALID_UMD_ON_CDCVM = 2,
};


/// Interface provided by the wallet and used to confirm the MCM Lite decision on how to complete a
/// transaction.
/// <p>
/// During a transaction the MCM Lite code performs various assessments on how the transaction should
/// complete. For example, checking there are enough credentials for the transaction, that the
/// terminal data is correct, that internal policies have been enforced etc. etc.
/// <p>
/// Prior to completing a transaction, the code provides a recommended decision to the wallet
/// together with a list of reasons for that decision. The code also provides details of the
/// transaction that is about to take place.
/// <p>
/// Typically a wallet will agree with the recommended decision, however it does have the
/// opportunity to overrule the MCM Lite decision in some cases.
SWIFT_PROTOCOL("_TtP12mchip_engine19WalletAdviceManager_")
@protocol WalletAdviceManager
/// Allow the wallet to override the current advice.
/// <ul>
///   <li>
///     arguments:
///     <ul>
///       <li>
///         recommendedAdvice:      The current recommended advice.
///       </li>
///       <li>
///         transactionInformation: Information about the transaction.
///       </li>
///       <li>
///         terminalInformation:    Information about the terminal.
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
///
/// The advice to use for the transaction.
- (enum Advice)getFinalAssessment:(id <AdviceAndReasons> _Nonnull)recommendedAdvice transactionInformation:(id <TransactionInformation> _Nonnull)transactionInformation terminalInformation:(id <TerminalInformation> _Nonnull)terminalInformation SWIFT_WARN_UNUSED_RESULT;
@end


/// This interface provides a mechanism for the code to determine the wallets view on whether or not
/// consumer authentication needs to take place.
/// <p>
/// The wallet is responsible for indicating its view on whether or not the consumer is sufficiently
/// authenticated to perform a new transactions. A wallet could base its decision on a number of
/// factors such as when the phone was last unlocked, the number of transactions performed etc.
/// The wallet decision making process is outside of the scope of this specification.
/// <p>
/// The MCBP specification defines policies for the maximum number of allowed transactions of
/// different types and also the maximum amount of time between authentication. This policy is
/// checked internally within the implementation so the wallet decision is only advisory and the
/// code may decide to overrule a wallet if the internal policy has been exceed.
/// In order to facilitate this policy checking the wallet has to provide details of the time when
/// the use was last authenticates.
/// <p>
/// It may be the case that the wallet doesn't require any authentication in which case it can
/// return
/// true to the function DoesWalletConsiderUserCdCvmSuccessfulyPerformed() even in the case when no
/// authentication has ever taken place.
/// <p>
/// The wallet must implement this callback as a non blocking function i.e. it must not trigger user
/// authentication as a result of this call but simply indicate if the transaction can proceed
/// without authentication.
SWIFT_PROTOCOL("_TtP12mchip_engine18WalletCdCvmManager_")
@protocol WalletCdCvmManager
/// Allows the wallet to indicate if CD CVM is supported.
///
/// returns:
///
/// true if CdCvm processing is supported by the wallet; otherwise false.
- (BOOL)isCdCvmEnabled SWIFT_WARN_UNUSED_RESULT;
/// Asks the Wallet for its opinion on whether or not it believes CD CVM has been successfully
/// performed.
///
/// returns:
///
/// true if the wallet considers that the user has performed successful CD CVM; otherwise false.
- (BOOL)isAuthenticated SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the time in milliseconds since the user last authenticated.
///
/// returns:
///
/// The time in milliseconds since the last authentication; a negative value indicates
/// that the user has never authenticated
- (NSInteger)getTimeOfLastAuthentication SWIFT_WARN_UNUSED_RESULT;
/// Ask the wallet to check if the user has exceed authentication retries.
///
/// returns:
///
/// true if the user exceed authentication retries, false otherwise.
- (BOOL)isCdCvmBlocked SWIFT_WARN_UNUSED_RESULT;
@end


/// Callback used to see if consent is provided for the current transaction.
SWIFT_PROTOCOL("_TtP12mchip_engine20WalletConsentManager_")
@protocol WalletConsentManager
/// Check whether or not user consent has been given.
///
/// returns:
///
/// true if consent was given, otherwise false.
- (BOOL)isConsentGiven SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
