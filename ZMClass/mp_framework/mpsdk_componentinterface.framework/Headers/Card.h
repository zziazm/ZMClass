/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Card.djinni

#import "mpsdk_componentinterface/CardAccountType.h"
#import "mpsdk_componentinterface/CardCvmModel.h"
#import "mpsdk_componentinterface/CardProductType.h"
#import "mpsdk_componentinterface/CardState.h"
#import "mpsdk_componentinterface/CardUmdConfig.h"
#import "mpsdk_componentinterface/CardholderValidator.h"
#import "mpsdk_componentinterface/PaymentContext.h"
#import "mpsdk_componentinterface/ProfileVersion.h"
#import "mpsdk_componentinterface/PaymentContext.h"
#import "mpsdk_componentinterface/CardProductType.h"
#import "mpsdk_componentinterface/CardAccountType.h"
#import "mpsdk_componentinterface/ProfileVersion.h"
#import "mpsdk_componentinterface/CardholderValidator.h"
#import "mpsdk_componentinterface/CardUmdConfig.h"
#import "mpsdk_componentinterface/CardCvmModel.h"
#import "mpsdk_componentinterface/CardState.h"
#import <Foundation/Foundation.h>
@protocol TransactionLog;
@protocol DatabaseWalletData;
@protocol DsrpTransactionOutcome;
@protocol QrcTransactionOutcome;
@protocol PinDataProvider;
@protocol DsrpTransactionInput;
@protocol QrcTransactionContext;
@protocol DatabaseWalletData;
@protocol DsrpTransactionInput;
@protocol DsrpTransactionOutcome;
@protocol PinDataProvider;
@protocol QrcTransactionContext;
@protocol QrcTransactionOutcome;
@protocol TransactionLog;


/**
 * Auto-generated Djinni interface for ::mpsdk::componentinterface::Card_t
 * 
 * Security incident service is for future use.
 * 
 */
@protocol Card

/**
 * 
 * Retrieve the state of the card
 * 
 * @return The appropriate {@link CardState}
 * 
 * 
 */
- (CardState)getCardState;

/**
 * 
 * Retrieve the unique ID for this card
 * 
 * @return The card's unique identifier
 * 
 * 
 */
- (NSString* _Nonnull)getCardId;

/**
 * 
 * Change the PIN for this card.
 * 
 * @param pinDataProvider Provides access to current and new mobile PIN protected by W_DEK
 * @return Request ID of the request
 * 
 * 
 */
- (NSString* _Nonnull)changePin:(id<PinDataProvider> _Nonnull)pinDataProvider;

/**
 * 
 * Set the initial PIN for the card.
 * 
 * @param pinDataProvider Provides access to current and new mobile PIN protected by W_DEK
 * @return Request ID of the request
 * 
 * 
 */
- (NSString* _Nonnull)setPin:(id<PinDataProvider> _Nonnull)pinDataProvider;

/**
 * 
 * This function returns the last 4 digits of the PAN for display by the wallet
 * 
 * @return String last 4 digits of the PAN for the wallet to display
 * 
 * 
 */
- (NSString* _Nonnull)getDisplayablePanDigits;

/**
 * 
 * Replenish the Credentials for this card
 * An event will be fired once the replenish operation has been completed
 * If there is another pending request, the replenish command will not be initiated and the
 * execution of the method will be terminated
 * 
 * @return Request ID of the request
 * 
 * 
 */
- (NSString* _Nonnull)replenishCredentials;

/**
 * 
 * Get the local transaction log for this card.
 * The number of transactions that are stored on the local database may vary for different
 * implementations.
 * 
 * @return An iterator to the collection containing transaction log objects for this card
 * 
 * 
 */
- (NSArray<id<TransactionLog>>* _Nonnull)getTransactionLog;

/**
 * 
 * Get the Card metadata information
 * <p/>
 * (deserialization is responsibility of the application level)
 * 
 * @return The Card metadata information as String
 * 
 * 
 */
- (id<DatabaseWalletData> _Nullable)getWalletDataForCard;

/**
 * 
 * Set the Card metadata information
 * <p/>
 * (serialization is responsibility of the application level)
 * 
 * @param databaseWalletData The Card metadata information
 * 
 * 
 */
- (void)saveWalletDataForCard:(id<DatabaseWalletData> _Nonnull)databaseWalletData;

/**
 * 
 * Get number of payment left for card.
 * 
 * @return the number of payments left for this card
 * 
 * 
 */
- (int32_t)getNumberOfAvailableCredentials;

/**
 * 
 * Check for Contact-less payment supported or not.
 * 
 * @return True if the card supports contactless payments
 * 
 * 
 */
- (BOOL)isContactlessSupported;

/**
 * 
 * Check for Remote payment supported or not.
 * 
 * @return True if the card supports digital secure remote payments
 * 
 * 
 */
- (BOOL)isDsrpSupported;

/**
 * 
 * Check for QRC payment support or not.
 * 
 * @return True if the card supports secure QRC payments
 * 
 */
- (BOOL)isQrcPaymentSupported;

/**
 * 
 * Indicates whether this card's profile supports on device CVM or not.
 * 
 * @return true if on device CVM is supported, false if online pin is to be used (no cvm)
 * 
 * 
 */
- (BOOL)isOnDeviceCvmSupported;

/**
 * 
 * Get card profile id  for the card
 * 
 * @return value of card profile id.
 * 
 * 
 */
- (NSString* _Nonnull)getDigitizedCardId;

/**
 * 
 * Get cryptogram for DSRP transaction
 * 
 * @param dsrpTransactionInput the transaction input data
 * 
 * 
 */
- (id<DsrpTransactionOutcome> _Nonnull)processDsrpTransaction:(id<DsrpTransactionInput> _Nonnull)dsrpTransactionInput;

/**
 * 
 * Starts a QRC transaction
 * 
 * @param qrcTransactionContext the transaction context
 * 
 * 
 */
- (id<QrcTransactionOutcome> _Nullable)processQrcTransaction:(id<QrcTransactionContext> _Nullable)qrcTransactionContext;

/**
 * 
 * Get the CdCvm model of the card.
 * 
 * @return Instance of {@link CardCvmModel}
 * 
 * 
 */
- (CardCvmModel)getCdCvmModel:(PaymentContext)paymentContext;

/**
 * 
 * Get the UMD configuration of the card.
 * 
 * @return Instance of {@link CardUmdConfig}
 * 
 * 
 */
- (CardUmdConfig)getHostUmdConfig:(PaymentContext)paymentContext;

/**
 * 
 * Get the CardholderValidator configured for the wallet.
 * 
 * @return Instance of {@link CardholderValidator}
 * 
 * 
 */
- (CardholderValidator)getCardholderValidator;

/**
 * 
 * Get the version of CardProfile provisioned for the card.
 * 
 * @return Instance of {@link ProfileVersion}
 * 
 * 
 */
- (ProfileVersion)getVersion;

/**
 * 
 * Get the seconds for cvm reset timeout.
 * 
 * @return number of seconds before the cvm reset timeout
 * 
 * 
 */
- (int32_t)getCvmResetTimeout;

/**
 * 
 * Get the Account Type for the card.
 * 
 * @return Instance of {@link CardAccountType}
 * 
 * 
 */
- (CardAccountType)getAccountType;

/**
 * 
 * Get the Product Type for the card.
 * 
 * @return Instance of {@link CardProductType}
 * 
 * 
 */
- (CardProductType)getProductType;

/**
 * 
 * 
 * 
 */
- (void)deleteTransactionCredentials;

@end
