/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from KeyLifeCycleManager.djinni

#import <Foundation/Foundation.h>



#import "mpsdk_componentinterface/KeyDataRollover.h"

/** Auto-generated Djinni interface for ::mpsdk::componentinterface::crypto::KeyLifeCycleManager_t */
@protocol KeyLifeCycleManager<KeyDataRollover>

/**
 * 
 * Returns the current Key Id
 * <p>
 * If no current key is available then a new key will be generated and the associated identifier
 * will be returned. In some implementations the key id could be an protected version of the key
 * e.g. It could be a white box protected version of the key.
 * 
 * @return the current key id
 * 
 * 
 */
- (NSData* _Nonnull)getCurrentKeyId;

/**
 * 
 * Returns the key Id of an alternative key that will eventually take the place of the existing
 * key when a key rollover is performed.
 * 
 * @return The Id of the alternative key
 * 
 * 
 */
- (NSData* _Nonnull)startRollover;

/**
 * 
 * Completes the current rollover. This replaces the current key with the alternate one that
 * was generated during startRollover
 * 
 * 
 * 
 */
- (void)rolloverComplete;

/**
 * 
 * Indicates if a key rollover is currently ongoing
 * 
 * @return true if a rollover is in progress, false if it is not
 * 
 * 
 */
- (BOOL)isRolloverInProgress;

/**
 * 
 * Abandons the current rollover. All previous keys and data will remain in place. All alternate
 * keys and data will be wiped
 * 
 * 
 * 
 */
- (void)abandonRollover;

/**
 * 
 * Wipes this key from storage
 * 
 * @return true if success
 * 
 * 
 */
- (BOOL)wipeKey;

@end
