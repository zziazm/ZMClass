/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from CardManager.djinni

#import <Foundation/Foundation.h>
@protocol Card;
@protocol CredentialsReplenishmentPolicy;
@protocol PinDataProvider;
@protocol Card;
@protocol CredentialsReplenishmentPolicy;
@protocol PinDataProvider;


/**
 * Auto-generated Djinni interface for ::mpsdk::componentinterface::CardManager_t
 * 
 * The Card_t Manager provides APIs to manage the entire set of cards.
 * 
 */
@protocol CardManager

/**
 * 
 * Get all the cards that are available for this Mcbp Wallet.
 * This includes suspended, pending deletion, not Activated, and activated cards
 * 
 * @return The collection containing the list of Cards
 * @exception RolloverInProgressException if key rollover is in process
 * 
 * Note: After new cards have been provisioned, call this to get the new card details
 * Client should use Card_t.getState() to identify actions possible on that card
 * 
 */
- (NSArray<id<Card>>* _Nullable)getAllCards:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Get the card that is identified by the given card ID.
 * This includes suspended, pending deletion, not Activated, and activated cards
 * 
 * @param cardId the id of the card to retrieve
 * @return the card or null if it does not exist
 * @exception RolloverInProgressException if key rollover is in process
 * 
 * 
 */
- (id<Card> _Nullable)getCardById:(NSString* _Nonnull)cardId error:(NSError* _Nullable __autoreleasing * _Nullable)error NS_SWIFT_NOTHROW;

/**
 * 
 * Mark the card for deletion
 * Use remote communications manager to delete the card from remote server
 * Completely remove card from the local database, after the card is removed from server
 * 
 * @param card The Mcbp Card_t to be deleted
 * @return request ID of request made
 * @exception RolloverInProgressException if key rollover is in process
 * 
 * 
 */
- (NSString* _Nullable)deleteCard:(id<Card> _Nonnull)card error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * mark the card as suspended in the local database.
 * This does not change the state of the card on the server.
 * 
 * @param card The Mcbp Card_t to be suspended
 * @exception RolloverInProgressException if key rollover is in process
 * 
 * 
 */
- (void)suspendCard:(id<Card> _Nonnull)card error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * mark a suspended card as activated in the local database.
 * Note: When the card is provisioned, it is assumed to be in suspended state
 * This does not change the state of the card on the server.
 * 
 * @param card The Mcbp Card_t that has been activated
 * @exception RolloverInProgressException if key rollover is in process
 * 
 * 
 */
- (void)activateCard:(id<Card> _Nonnull)card error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Sets the PIN for the entire wallet
 * 
 * @param pinDataProvider Provides access to current PIN protected by W_DEK
 * @return request ID of request made
 * @exception RolloverInProgressException if key rollover is in process
 * 
 * 
 */
- (NSString* _Nullable)setWalletPin:(id<PinDataProvider> _Nonnull)pinDataProvider error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Change the wallet PIN.
 * 
 * @param pinDataProvider Provides access to current and new PIN protected by W_DEK
 * @return request ID of request made
 * @exception RolloverInProgressException if key rollover is in process
 * 
 * <p/>
 * Note: This uses the remote communications manager to invoke the asynchronous process for
 * changing the wallet PIN.
 * This will wipe the current transaction credentials, and those will be automatically
 * requested once the
 * change pin succeeds.
 * <p/>
 * Results will be notified using CardManagerEventListeners
 * 
 */
- (NSString* _Nullable)changeWalletPin:(id<PinDataProvider> _Nonnull)pinDataProvider error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Delete all transaction credentials for all cards from database.
 * 
 * @exception RolloverInProgressException if key rollover is in process
 * 
 * 
 */
- (void)deleteAllTransactionCredentials:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Retrieve Key Management Policy to use
 * 
 * @return the key management policy
 * 
 * 
 */
- (id<CredentialsReplenishmentPolicy> _Nonnull)getCredentialsReplenishmentPolicy;

@end
