/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from DatabaseCrypto.djinni

#import <Foundation/Foundation.h>
@class DstDekEncryptedData;
@class DstDekEncryptedData;


/**
 * Auto-generated Djinni interface for ::mpsdk::componentinterface::crypto::DatabaseCrypto_t
 * 
 * Provides an interface for the Database module to encrypt / unencrypt data
 * 
 */
@protocol DatabaseCrypto

/**
 * 
 * Encrypt data with the current database key so it is ready to be stored
 * 
 * @param dataToBeEncrypted Data to be encrypted
 * @return Data protected with the current data storage encryption key
 * @exception GeneralSecurityException If something goes wrong inside crypto engine
 * 
 * 
 */
- (DstDekEncryptedData* _Nullable)encryptDataForStorage:(NSData* _Nonnull)dataToBeEncrypted error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Decrypt data with current database key so that is ready for use
 * 
 * @param encryptedData Previously protected data
 * @return unprotected data
 * @exception GeneralSecurityException If something goes wrong inside crypto engine
 * 
 * 
 */
- (NSData* _Nullable)unencryptStoredDataForUse:(DstDekEncryptedData* _Nonnull)encryptedData error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Provides the database component with a way to validate that the MAC it has stored for a
 * particular piece of data is in fact valid
 * 
 * @param encryptedData the data
 * @param mac           the MAC
 * @return true if the MAC is valid for the given data. False otherwise
 * @exception GeneralSecurityException If something goes wrong inside crypto engine
 * 
 * 
 */
- (BOOL)isMacValid:(NSData* _Nonnull)encryptedData
               mac:(NSData* _Nonnull)mac error:(NSError* _Nullable __autoreleasing * _Nullable)error NS_SWIFT_NOTHROW;

/**
 * 
 * Provides the database component with a way to generate a MAC for a given piece of data using
 * the current DST_MAC
 * <p>
 * This ensures data integrity.
 * 
 * @param encryptedData the data for which a MAC should be generated
 * @return the generated MAC to be stored along with the data
 * @exception GeneralSecurityException If something goes wrong inside crypto engine
 * 
 * 
 */
- (NSData* _Nullable)generateMac:(NSData* _Nonnull)encryptedData error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Provides the database component with a way to generate a MAC for a given piece of data using
 * the specified DST_MAC identified by the provided DST_MAC key Id
 * <p>
 * This ensures data integrity.
 * 
 * @param encryptedData the data for which a MAC should be generated
 * @return the generated MAC to be stored along with the data
 * @exception GeneralSecurityException If something goes wrong inside crypto engine
 * 
 * 
 */
- (NSData* _Nullable)generateMacWithKeyId:(NSData* _Nonnull)dataStorageMacKeyId
                           encryptedData:(NSData* _Nonnull)encryptedData error:(NSError* _Nullable __autoreleasing * _Nullable)error;

@end
