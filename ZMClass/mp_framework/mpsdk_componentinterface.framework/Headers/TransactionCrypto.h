/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from TransactionCrypto.djinni

#import <Foundation/Foundation.h>
@class LocalDekEncryptedData;
@protocol TransactionCryptograms;
@protocol PinDataProvider;
@class LocalDekEncryptedData;
@protocol PinDataProvider;
@protocol TransactionCryptograms;


/**
 * Auto-generated Djinni interface for ::mpsdk::componentinterface::crypto::TransactionCrypto_t
 * 
 * Defines the crypto interfaces that are required by the M/Chip Engine to perform the cryptogram
 * generation and UMD keys unlock required to perform a transaction(i.e. XOR between Single Use Key
 * and Mobile PIN to get the
 * Session Key)
 * 
 */
@protocol TransactionCrypto

/**
 * 
 * Initializes the ICC RSA key using the provided protected components
 * 
 * @param encryptedIccKey the components of the ICC Key protected by L_DEK
 * @return the length of the key
 * @exception GeneralSecurityException If something goes wrong during initialization of IccKey
 * 
 * 
 */
- (int32_t)initIccKey:(LocalDekEncryptedData* _Nonnull)encryptedIccKey error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Applies the mobile PIN to a single use key in order to make a session key
 * 
 * @param pinProvider           the PIN provider from which a Mobile PIN can be obtained
 * @param encryptedSingleUseKey A single use key that is protected with the L_DEK key
 * @return Session key protected by the L_DEK key
 * @exception GeneralSecurityException If something goes wrong while deriving session key
 * 
 * 
 */
- (LocalDekEncryptedData* _Nullable)deriveSessionKeyFromSingleUseKey:(id<PinDataProvider> _Nonnull)pinProvider
                                                         encryptedSingleUseKey:(LocalDekEncryptedData* _Nonnull)encryptedSingleUseKey error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Encrypts session key with the local DEK
 * 
 * @param sessionKey session key
 * @return local DEK protected data
 * 
 * 
 */
- (LocalDekEncryptedData* _Nonnull)encryptSessionKey:(NSData* _Nonnull)sessionKey;

/**
 * 
 * Generate both UMD and MD cryptograms for the Generate AC
 * 
 * @param transactionCryptogramInput The Input for the generate AC cryptogram calculation
 * @param encryptedUmdSessionKey     The UMD Session Key
 * @param encryptedMdSessionKey      The MD Session key
 * @return Both UMD and MD cryptograms
 * @exception GeneralSecurityException If something goes wrong the M/Chip Engine will try to catch
 * a GeneralSecurityException. An implementation of this
 * interface is expected to raise only those exceptions
 * 
 * 
 */
- (id<TransactionCryptograms> _Nullable)buildGenerateAcCryptograms:(NSData* _Nonnull)transactionCryptogramInput
                                                     encryptedUmdSessionKey:(LocalDekEncryptedData* _Nonnull)encryptedUmdSessionKey
                                                      encryptedMdSessionKey:(LocalDekEncryptedData* _Nonnull)encryptedMdSessionKey error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Generate both UMD and MD cryptograms for the Compute Cryptographic Checksum operation
 * 
 * @param transactionCryptogramInput        The Input for the ComputeCc cryptogram calculation
 * @param encryptedContactlessUmdSessionKey The contactless UMD Session Key
 * @param encryptedContactlessMdSessionKey  The contactless MD Session key
 * @return Both UMD and MD cryptograms
 * @exception GeneralSecurityException If something goes wrong the M/Chip Engine will try to catch
 * a GeneralSecurityException. An implementation of this
 * interface is expected to raise only those exceptions
 * 
 * 
 */
- (id<TransactionCryptograms> _Nullable)buildComputeCcCryptograms:(NSData* _Nonnull)transactionCryptogramInput
                                         encryptedContactlessUmdSessionKey:(LocalDekEncryptedData* _Nonnull)encryptedContactlessUmdSessionKey
                                          encryptedContactlessMdSessionKey:(LocalDekEncryptedData* _Nonnull)encryptedContactlessMdSessionKey error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Builds signed dynamic application data. Combines different headers, IDN, application data and
 * computes hash over it. Then wrap with another headers and encrypt with ICC key
 * 
 * @param ddaHeader       DDA Header
 * @param ddaTrailer      DDA Trailer
 * @param dadHeader       Dynamic Application Data Header
 * @param applicationData Dynamic Application Data
 * @param encryptedIdn    The L DEK protected IDN credential object as received from the CMS
 * @return data protected by ICC key
 * @exception GeneralSecurityException If something goes wrong the M/Chip Engine will try to catch
 * a GeneralSecurityException. An implementation of this
 * interface is expected to raise only those exceptions
 * 
 * 
 */
- (NSData* _Nullable)buildSignedDynamicApplicationData:(NSData* _Nonnull)ddaHeader
                                           ddaTrailer:(NSData* _Nonnull)ddaTrailer
                                            dadHeader:(NSData* _Nonnull)dadHeader
                                      applicationData:(NSData* _Nonnull)applicationData
                                         encryptedIdn:(LocalDekEncryptedData* _Nonnull)encryptedIdn error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Applies SHA 1 Hash algorithm to given data
 * 
 * @param dataToHash The data to hash
 * @return The data hashed with SHA 1
 * 
 * 
 */
- (NSData* _Nonnull)sha1:(NSData* _Nonnull)dataToHash;

/**
 * 
 * Applies SHA 256 Hash algorithm to given data
 * 
 * @param dataToHash The data to hash
 * @return The data hashed with SHA 256
 * 
 * 
 */
- (NSData* _Nonnull)sha256:(NSData* _Nonnull)dataToHash;

@end
