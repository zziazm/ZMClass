/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ByteArrayUtils.djinni

#import <Foundation/Foundation.h>


/** Auto-generated Djinni interface for ::mpsdk::utils::bytes::ByteArrayUtils_t */
@interface ByteArrayUtils : NSObject

/**
 * 
 * Clear byte array.
 * 
 * @param buffer the buffer
 * 
 */
+ (void)clearBytes:(NSData* _Nullable)buffer;

/**
 * 
 * Clear byte array.
 * 
 * @param buffer the buffer
 * 
 */
+ (NSString* _Nonnull)byteArrayToHexString:(NSData* _Nonnull)buffer;

/**
 * 
 * @param hexString hex string representation of the byte data
 * @return byte array from the supplied hex string
 * 
 */
+ (NSData* _Nonnull)byteArrayFromHexString:(NSString* _Nullable)hexString;

/**
 * 
 * Concatenates the list of byte array from given list
 * 
 * @param arrays list of byte array to be concatenate
 * @return concatenated array
 * 
 */
+ (NSData* _Nonnull)concatenateArrays:(NSArray<NSData*>* _Nonnull)arrays;

/**
 * 
 * Produces a copy of the input byte[] without a reference
 * 
 * @param input the byte array to copy
 * @return a copy of the input byte array
 * 
 */
+ (NSData* _Nullable)arrayCopy:(NSData* _Nullable)input;

/**
 * 
 * #
 * Attempts to parse the given byte array to a hex string
 * 
 * @param bytes the bytes
 * @return the hex string representation of the bytes, or null if the input was null
 * 
 */
+ (NSString* _Nullable)tryParseToHexString:(NSData* _Nullable)bytes;

/**
 * 
 * Utility function to generate a random byte array
 * 
 * @param size of the random byte array
 * @return Random bytes
 * 
 */
+ (NSData* _Nonnull)getRandomByteArray:(int32_t)size;

/**
 * 
 * Combine first 4 cells of byte array into int number. Big Endian notation
 * 
 * @param bytes byte array
 * @return int number from bytes
 * @exception IllegalArgumentException in case of null or empty array
 * 
 */
+ (int64_t)longFromByteArray:(NSData* _Nonnull)bytes;

@end
