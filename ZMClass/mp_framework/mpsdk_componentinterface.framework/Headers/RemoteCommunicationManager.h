/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from RemoteCommunicationManager.djinni

#import <Foundation/Foundation.h>
@protocol WalletIdentificationDataProvider;
@protocol RemoteManagementCrypto;
@protocol HttpManager;
@protocol RemoteCommunicationEventListener;
@protocol CommunicationParametersProvider;
@protocol CommunicationRetryParametersProvider;
@protocol SingleUseKeyStatus;
@protocol PinDataProvider;
@protocol CommunicationParametersProvider;
@protocol CommunicationRetryParametersProvider;
@protocol HttpManager;
@protocol PinDataProvider;
@protocol RemoteCommunicationEventListener;
@protocol RemoteManagementCrypto;
@protocol SingleUseKeyStatus;
@protocol WalletIdentificationDataProvider;



#import "mpsdk_componentinterface/MpaManagementHelper.h"

/** Auto-generated Djinni interface for ::mpsdk::componentinterface::remotemanagement::RemoteCommunicationManager_t */
@protocol RemoteCommunicationManager<MpaManagementHelper>

/**
 * 
 * Will be called by the Mcbp initializing routine to initialize the remote communications
 * manager
 * 
 * @param remoteManagementCrypto               crypto engine to use for securing received data
 * @param httpManager                          used to communicate with the CMS-D
 * @param remoteCommunicationEventListener     callback mechanism to notify user about data
 * changes
 * @param communicationParametersProvider      provider for the remote parameters
 * @param walletIdentificationDataProvider     data provider for registration purposes
 * @param communicationRetryParametersProvider data provider for communication retry
 * 
 * 
 */
- (void)initialize:(id<RemoteManagementCrypto> _Nonnull)remoteManagementCrypto
       httpManager:(id<HttpManager> _Nonnull)httpManager
remoteCommunicationEventListener:(id<RemoteCommunicationEventListener> _Nonnull)remoteCommunicationEventListener
communicationParametersProvider:(id<CommunicationParametersProvider> _Nonnull)communicationParametersProvider
walletIdentificationDataProvider:(id<WalletIdentificationDataProvider> _Nonnull)walletIdentificationDataProvider
communicationRetryParametersProvider:(id<CommunicationRetryParametersProvider> _Nonnull)communicationRetryParametersProvider;

/**
 * 
 * Get the status of a previously initiated request.  The status is reported on a callback
 * 
 * When implementing this interface, On completion of the get status request
 * onTaskStatusReceived() or onTaskStatusReceivedFailure() function on
 * RemoteCommunicationEventListener_t must be called.
 * 
 * @param taskId The Task Id as received in when the change pin command was started
 * 
 * 
 */
- (void)requestTaskStatusUpdate:(NSString* _Nonnull)taskId;

/**
 * 
 * @return Id of the request currently being processed.  Return null if no request is in
 * progress
 * 
 * 
 */
- (NSString* _Nullable)getCurrentRequestId;

/**
 * 
 * Asynchronously request replenishment of the transaction credentials(SUK) for this card
 * 
 * When implementing this interface, On completion of the replenishment request
 * onReplenishSucceeded() or onReplenishFailed() function on RemoteCommunicationEventListener_t
 * must be called
 * 
 * @param cardId           The card for which the SUKs have to be replenished
 * @param credentialStatus Status of previously received transaction credentials.
 * Note: A null value shall be converted into empty array
 * @return the unique request-identifier for this request, useful to check the current status of
 * command.
 * 
 * Note: This function should not be called directly, but only through the Card_t interface
 * 
 * 
 */
- (NSString* _Nonnull)requestReplenish:(NSString* _Nonnull)cardId
                      credentialStatus:(NSArray<id<SingleUseKeyStatus>>* _Nonnull)credentialStatus;

/**
 * 
 * Request to set mobile PIN for Card_t.
 * 
 * When implementing this interface, On completion of the setPin request
 * onSetCardPinSucceeded() or onSetPinFailed() function on RemoteCommunicationEventListener_t
 * must be called
 * 
 * @param cardId          Card_t object identifying the card for which setPin is invoked
 * @param pinDataProvider provides access to the W_DEK protected mobile PIN.
 * @return the unique request-identifier for this request, useful to check the current status of
 * command.
 * 
 * Note: This function should not be called directly, but only through the Card_t interface
 * 
 * 
 */
- (NSString* _Nonnull)requestSetPin:(NSString* _Nonnull)cardId
                    pinDataProvider:(id<PinDataProvider> _Nonnull)pinDataProvider;

/**
 * 
 * Request to change mobile PIN for Card_t.
 * 
 * When implementing this interface, On completion of the changePin request
 * onChangePinSucceeded() or onChangePinFailed() function on RemoteCommunicationEventListener_t
 * must be called
 * 
 * @param cardId          Card_t object identifying the card for which changePin is invoked
 * @param pinDataProvider Provides access to the W_DEK protected mobile PIN
 * @return the unique request-identifier for this request, useful to check the current status of
 * command.
 * 
 * Note: This function should not be called directly, but only through the Card_t interface
 * 
 * 
 */
- (NSString* _Nonnull)requestChangePin:(NSString* _Nonnull)cardId
                       pinDataProvider:(id<PinDataProvider> _Nonnull)pinDataProvider;

/**
 * 
 * Request to set mobile wallet PIN.
 * 
 * When implementing this interface, On completion of the setPin request
 * onSetWalletPinSucceeded() or onSetWalletPinFailed() function on
 * RemoteCommunicationEventListener_t
 * must be called
 * 
 * @param pinDataProvider provides access to the W_DEK protected mobile PIN.
 * @return the unique request-identifier for this request, useful to check the current status of
 * command.
 * @exception IllegalArgumentException when any argument is null or empty
 * 
 * Note: This function should not be called directly, but only
 * through the CardManager_t interface
 * 
 * 
 */
- (NSString* _Nonnull)requestSetWalletPin:(id<PinDataProvider> _Nonnull)pinDataProvider;

/**
 * 
 * Request to set mobile wallet PIN.
 * 
 * When implementing this interface, On completion of the setPin request
 * onChangeWalletPinSucceeded() or onChangeWalletPinFailed() function on
 * RemoteCommunicationEventListener_t
 * must be called
 * 
 * @param pinDataProvider Provides access to the W_DEK protected mobile PIN
 * @return the unique request-identifier for this request, useful to check the current status of
 * command.
 * @exception IllegalArgumentException when any argument is null or empty
 * 
 * Note: This function should not be called directly, but only
 * through the CardManager_t interface
 * 
 * 
 */
- (NSString* _Nonnull)requestChangeWalletPin:(id<PinDataProvider> _Nonnull)pinDataProvider;

/**
 * 
 * Asynchronously request deletion of this card
 * 
 * When implementing this interface, On completion of the replenishment request
 * onDeleteSucceeded() or onDeleteFailed() function on RemoteCommunicationEventListener_t
 * must be called
 * 
 * @param cardId           The card for which the SUKs have to be replenished
 * @param credentialStatus Status of previously received transaction credentials.
 * Note: A null value shall be converted into empty array
 * @return the unique request-identifier for this request, useful to check the current status of
 * command.
 * 
 * Note: This function should not be called directly, but only through the Card_t manager
 * interface
 * 
 * 
 */
- (NSString* _Nonnull)requestDeleteCard:(NSString* _Nonnull)cardId
                       credentialStatus:(NSArray<id<SingleUseKeyStatus>>* _Nonnull)credentialStatus;

/**
 * 
 * Check the general status of a Digitization API host.
 * 
 * When implementing this interface, On completion of the system health request
 * onSystemHealthSucceeded() or onSystemHealthFailure() function on
 * RemoteCommunicationEventListener_t
 * must be called
 * 
 * @return the unique request-identifier for this request, useful to check the current status of
 * command.
 * 
 * 
 */
- (NSString* _Nonnull)requestSystemHealth;

/**
 * 
 * API to cancel SDK pending request
 * 
 * @return false if no pending request, otherwise remove pending request and returns true;
 * 
 * 
 */
- (BOOL)cancelPendingRequests;

/**
 * 
 * Retrieve the data provider for registration data
 * 
 * @return the identification details of the current Mpa instance
 * 
 * 
 */
- (id<WalletIdentificationDataProvider> _Nullable)getWalletIdentificationDataProvider;

/**
 * 
 * Process any data that is pushed by the server for handling by the remote communications
 * manager.
 * Typically this data would be a Json request that contains data as per the format specified
 * by the remote management protocol being used
 * 
 * @param data The data received as push by the server for taking action.
 * @exception RemoteManagementException
 * 
 * 
 */
- (void)processNotificationData:(NSString* _Nonnull)data error:(NSError* _Nullable __autoreleasing * _Nullable)error;

@end
