/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from McbpDataBase.djinni

#import <Foundation/Foundation.h>
@protocol McbpDataBase;
@protocol DatabaseWalletData;
@class RMKekEncryptedData;
@protocol TransactionCredentialInfo;
@protocol KeyDataRollover;
@protocol DatabaseCrypto;
@protocol DatabaseUpgradeHelper;
@protocol SecurityIncidentService;
@class RMKekEncryptedData;
@protocol DatabaseCrypto;
@protocol DatabaseUpgradeHelper;
@protocol DatabaseWalletData;
@protocol KeyDataRollover;
@protocol McbpDataBase;
@protocol SecurityIncidentService;
@protocol TransactionCredentialInfo;


/**
 * Auto-generated Djinni interface for ::mpsdk::componentinterface::database::McbpDataBase_t
 * 
 * MCBP database has the responsibility to provide a service for Business Logic in order to store
 * the data securely in the database. Any implementation of the Database must implement this
 * interface and provide the implementations for functionality defined here.
 * 
 */
@protocol McbpDataBase

/**
 * 
 * Provides the database implementation with an instance of the database crypto interface which
 * provides access to the database encryption, decryption, integrity checking and rollover
 * mechanisms
 * 
 * 
 * 
 */
- (id<McbpDataBase> _Nonnull)initialize;

/**
 * 
 * Provisions a Card_t profile. The serialised card profile will be saved into DB for later use
 * 
 * @param cardId                unique identifier for the profile
 * @param serializedCardProfile bytes of CardProfile data.
 * @param cardProfileVersion    version of card profile
 * @exception GeneralSecurityException If something goes wrong inside the database
 * 
 * 
 */
- (void)saveCardProfile:(NSString* _Nonnull)cardId
  serializedCardProfile:(NSData* _Nonnull)serializedCardProfile
     cardProfileVersion:(NSString* _Nonnull)cardProfileVersion error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Change the profile saved against a card Id.  possible use - re-provision of card
 * 
 * @param cardId                unique identifier for the profile
 * @param serializedCardProfile bytes of CardProfile data.
 * @param cardProfileVersion    version of card profile
 * 
 * 
 */
- (void)updateCardProfile:(NSString* _Nonnull)cardId
    serializedCardProfile:(NSData* _Nonnull)serializedCardProfile
       cardProfileVersion:(NSString* _Nonnull)cardProfileVersion;

/**
 * 
 * Wipes all the data including the profile and transaction credentials stored against this
 * card id
 * 
 * @param cardId unique identifier for the profile
 * 
 * 
 */
- (void)wipeCardProfileAndRelatedData:(NSString* _Nonnull)cardId;

/**
 * 
 * Way to allow the wallet to save additional data about the card into the DB.  The serializing
 * and de-serializing of data is wallet's responsibility
 * 
 * @param cardId     unique identifier for the profile
 * @param databaseWalletData byte array of wallet data
 * 
 * 
 */
- (void)saveWalletDataForCard:(NSString* _Nonnull)cardId
           databaseWalletData:(id<DatabaseWalletData> _Nonnull)databaseWalletData;

/**
 * 
 * Get the serialized wallet data corresponding to card and data version.
 * 
 * @param cardId unique identifier for the profile
 * @return additional data saved by the wallet.  null, if called before save wallet data.
 * 
 * 
 */
- (id<DatabaseWalletData> _Nullable)getWalletDataForCard:(NSString* _Nonnull)cardId error:(NSError* _Nullable __autoreleasing * _Nullable)error NS_SWIFT_NOTHROW;

/**
 * 
 * Way to allow the wallet to save additional data into the DB.  The serializing
 * and de-serializing of data is wallet's responsibility
 * 
 * @param walletData byte array of wallet data
 * 
 * 
 */
- (void)saveWalletData:(id<DatabaseWalletData> _Nonnull)walletData;

/**
 * 
 * Get the serialized wallet data corresponding data version.
 * 
 * @return additional data saved by the wallet.  null, if called before save wallet data.
 * 
 * 
 */
- (id<DatabaseWalletData> _Nullable)getWalletData:(NSError* _Nullable __autoreleasing * _Nullable)error NS_SWIFT_NOTHROW;

/**
 * 
 * @param cardId unique identifier for the profile
 * @return serializedCardProfile bytes representing a card profile
 * @exception GeneralSecurityException If something goes wrong inside the database
 * 
 * 
 */
- (NSData* _Nullable)getCardProfileByCardId:(NSString* _Nonnull)cardId error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * @param cardId unique identifier for the profile
 * @return String value representing version of card profile
 * 
 * 
 */
- (NSString* _Nonnull)getCardProfileVersionByCardId:(NSString* _Nonnull)cardId;

/**
 * 
 * @return list of all card Ids saved in the database.  Empty list is returned if no profiles
 * are provisioned.
 * 
 * 
 */
- (NSArray<NSString*>* _Nonnull)getAllCardIds;

/**
 * 
 * set current state of card.  The caller is responsible to identify the card state based on
 * the returned integer value
 * 
 * @param cardId unique identifier for the profile
 * @param state  identifier for current card state
 * 
 */
- (void)saveCardStateByCardId:(NSString* _Nonnull)cardId
                        state:(int32_t)state;

/**
 * 
 * set current state of card.  The caller is responsible to identify the card state based on
 * the returned integer value
 * 
 * @param cardId unique identifier for the profile
 * @return integer value for current state of the card.
 * 
 * 
 */
- (int32_t)getCardStateByCardId:(NSString* _Nonnull)cardId;

/**
 * 
 * Update the status of specified transaction credentials.
 * 
 * @param cardId unique identifier for the profile
 * @param atc    unique ATC of the suk for the given card
 * @param status current status of the transaction credentials
 * 
 */
- (void)updateTransactionCredentialStatusForCardId:(NSString* _Nonnull)cardId
                                               atc:(int32_t)atc
                                            status:(int32_t)status
                                         timeStamp:(NSString* _Nonnull)timeStamp;

/**
 * 
 * Retrieve all single use key of given card id.
 * 
 * @param cardId unique identifier for the profile
 * @return List of single use keys Ids for specified card id.
 * 
 * 
 */
- (NSArray<NSString*>* _Nonnull)getTransactionCredentialIdsForCardId:(NSString* _Nonnull)cardId;

/**
 * 
 * get the first SUK having the mentioned status for specified card
 * 
 * @return return null if there is no SUK available for this card that matches the status
 * 
 * 
 */
- (NSString* _Nullable)getFirstTransactionCredentialIdForCardIdWithStatus:(NSString* _Nonnull)cardId
                                                                   status:(int32_t)status;

/**
 * 
 * get serialised data for the SUK matching the suk id and card id
 * 
 * @param cardId unique identifier for the profile
 * @param keyId  unique identifier of SUK
 * @return serialized single use key if saved earlier.  Return null if no information found
 * 
 * 
 */
- (NSData* _Nullable)getTransactionCredentialForCardId:(NSString* _Nonnull)cardId
                                                 keyId:(NSString* _Nonnull)keyId error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * get status for the SUK matching the suk id and card id
 * 
 * @param cardId unique identifier for the profile
 * @param keyId  unique identifier of SUK
 * @return status as integer.  The caller will need mechanism to identify state based on value
 * 
 * 
 */
- (int32_t)getTransactionCredentialStatusForCardId:(NSString* _Nonnull)cardId
                                             keyId:(NSString* _Nonnull)keyId;

/**
 * 
 * Wipe transaction credentials for a card and add new transaction credentials.
 * This API is used for a transaction credential replenishment use case.
 * 
 * @param cardId                     unique identifier for the profile
 * @param keyIdsToWipe               list of unique identifiers of SUK to be wiped
 * @param transactionCredentialInfos a list of {@link TransactionCredentialInfo_t}
 * 
 * 
 */
- (void)wipeOldAndSaveNewTransactionCredentialsForCardId:(NSString* _Nonnull)cardId
                                            keyIdsToWipe:(NSArray<NSString*>* _Nonnull)keyIdsToWipe
                                       credentialVersion:(NSString* _Nonnull)credentialVersion
                              transactionCredentialInfos:(NSArray<id<TransactionCredentialInfo>>* _Nonnull)transactionCredentialInfos;

/**
 * 
 * Wipe all the transaction credentials specific to card id.
 * 
 * @param cardId unique identifier for the profile
 * 
 * 
 */
- (void)wipeTransactionCredentialsForCardId:(NSString* _Nonnull)cardId;

/**
 * 
 * store serialized transaction log as received from the caller
 * 
 * @param cardId                   unique identifier for the profile
 * @param transactionId            unique identifier for this transaction
 * @param version                  log version for this transaction
 * @param timestamp                timestamp for this transaction
 * @param serializedTransactionLog the transaction log to be stored in the database
 * 
 * 
 */
- (void)saveTransactionLogForCardId:(NSString* _Nonnull)cardId
                      transactionId:(NSString* _Nullable)transactionId
                            version:(NSString* _Nonnull)version
                          timestamp:(NSString* _Nonnull)timestamp
           serializedTransactionLog:(NSData* _Nonnull)serializedTransactionLog;

/**
 * 
 * Retrieves transaction logs ids associated with card.
 * 
 * @param cardId unique identifier for the profile
 * @return List of TransactionLog_t identifiers for this card.
 * 
 * 
 */
- (NSArray<NSNumber*>* _Nonnull)getTransactionLogIdsForCardId:(NSString* _Nonnull)cardId;

/**
 * 
 * Get serialised transaction log object for the given card id and transaction log id
 * 
 * @param cardId           unique identifier for the profile
 * @param transactionLogId unique identifier for transaction log
 * 
 */
- (NSData* _Nullable)getTransactionLogByIdForCardId:(NSString* _Nonnull)cardId
                                  transactionLogId:(int32_t)transactionLogId error:(NSError* _Nullable __autoreleasing * _Nullable)error NS_SWIFT_NOTHROW;

/**
 * 
 * Wipe a specific log entry from database
 * 
 * @param cardId           unique identifier for the profile
 * @param transactionLogId unique identifier for this log
 * 
 * 
 */
- (void)wipeTransactionLogByIdForCardId:(NSString* _Nonnull)cardId
                       transactionLogId:(int32_t)transactionLogId;

/**
 * 
 * wipe all log entries for a card from the database
 * 
 * @param cardId unique identifier for the profile
 * 
 * 
 */
- (void)wipeTransactionLogsForCardId:(NSString* _Nonnull)cardId;

/**
 * 
 * Clear all data saved in the database, so that the DB looks same as after a fresh
 * installation
 * 
 * 
 * 
 */
- (void)wipeAllData;

/**
 * 
 * Save the URL required for communication with the CMS-D
 * 
 * @param remoteManagementUrl complete URL to the server
 * 
 * 
 */
- (void)saveRemoteManagementUrl:(NSString* _Nonnull)remoteManagementUrl;

/**
 * 
 * Get the saved URL required for communication with the CMS-D
 * 
 * @return null if URL is not saved before calling this function
 * 
 * 
 */
- (NSString* _Nullable)getRemoteManagementUrl:(NSError* _Nullable __autoreleasing * _Nullable)error NS_SWIFT_NOTHROW;

/**
 * 
 * Insertion of mobile key
 * <p/>
 * Only one key of each type can be saved in a key set.  Attempting to save key of same type
 * will overwrite the earlier value.
 * 
 * @param keySetId         unique identifier for keyset
 * @param keyType          identifier for type of key
 * @param encryptedKeyData The key data that is used in crypto operations, protected by RM_KEK
 * @exception GeneralSecurityException If something goes wrong inside the database
 * 
 * 
 */
- (void)saveEncryptedMobileKey:(NSString* _Nonnull)keySetId
                       keyType:(NSString* _Nonnull)keyType
              encryptedKeyData:(RMKekEncryptedData* _Nonnull)encryptedKeyData error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Rolls over the set of keys in one transaction
 * <p/>
 * Only one key of each type can be saved in a key set.  Attempting to save key of same type
 * will overwrite the earlier value.
 * 
 * @param keySetId       unique identifier for keyset
 * @param dataToRollover hash map of [identifier for type of key; The key data that is used
 * in crypto operations, protected by RM_KEK]
 * @exception GeneralSecurityException If something goes wrong inside the database
 * 
 * 
 */
- (void)rolloverMobileKeys:(NSString* _Nonnull)keySetId
            dataToRollover:(NSDictionary<NSString*, RMKekEncryptedData*>* _Nonnull)dataToRollover error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Get a specific mobile key.
 * 
 * @param keySetId unique identifier for keyset
 * @param keyType  identifier for type of key
 * @return The mobile key for a specific mobile key set id and card id, protected by RM_KEK
 * @exception GeneralSecurityException If something goes wrong inside the database
 * 
 * 
 */
- (RMKekEncryptedData* _Nullable)getEncryptedMobileKey:(NSString* _Nonnull)keySetId
                                                         keyType:(NSString* _Nonnull)keyType error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Retrieve mobile key set id
 * 
 * @return the mobile keyset id assigned to this application
 * 
 * 
 */
- (NSString* _Nullable)getMobileKeySetId;

/**
 * 
 * @param keySetId unique identifier for keyset
 * @return list of key types available in this keyset
 * 
 * 
 */
- (NSArray<NSString*>* _Nonnull)getMobileKeyTypesInKeySet:(NSString* _Nonnull)keySetId;

/**
 * 
 * Wipes all mobile keys for a given Key Set Id
 * 
 * @param keySetId The Key Set Id to wipe mobile keys for
 * 
 */
- (void)wipeMobileKeysForKeySetId:(NSString* _Nonnull)keySetId;

/**
 * 
 * Starts a rollover operation. Database implementation should wrap all operations in a
 * transaction.
 * 
 * @param dataStorageKeyDataRollover          provides a way to migrate a single piece of data
 * from one key to another
 * @param currentDataStorageEncryptionKeyId   the current data storage encryption key
 * @param alternateDataStorageEncryptionKeyId the alternate data storage encryption key
 * @exception GeneralSecurityException If something goes wrong inside the database
 * 
 * 
 */
- (void)rolloverData:(id<KeyDataRollover> _Nonnull)dataStorageKeyDataRollover
dataStorageMacDataRollover:(id<KeyDataRollover> _Nonnull)dataStorageMacDataRollover
currentDataStorageEncryptionKeyId:(NSData* _Nonnull)currentDataStorageEncryptionKeyId
alternateDataStorageEncryptionKeyId:(NSData* _Nonnull)alternateDataStorageEncryptionKeyId
currentDataStorageMacKeyId:(NSData* _Nonnull)currentDataStorageMacKeyId
alternateDataStorageMacKeyId:(NSData* _Nonnull)alternateDataStorageMacKeyId error:(NSError* _Nullable __autoreleasing * _Nullable)error;

/**
 * 
 * Rolls over the transaction credentials and card profiles in one transaction
 * 
 * @param transactionCredentialsToRollover transaction credentials to rollover key=cardId,
 * value
 * is hash map with
 * key=transactionCredentialId and value serialized
 * credentials
 * @param cardProfilesToRollover           card profiles to rollover key=cardId, value is
 * profile
 * 
 * 
 */
- (void)rolloverTransactionCredentialsAndCardProfiles:(NSDictionary<NSString*, NSDictionary<NSString*, NSData*>*>* _Nonnull)transactionCredentialsToRollover
                               cardProfilesToRollover:(NSDictionary<NSString*, NSData*>* _Nonnull)cardProfilesToRollover;

/**
 * 
 * Sets the database crypto implementation to use
 * 
 * @param databaseCrypto the databaseCrypto implementation
 * @return this database
 * 
 * 
 */
- (id<McbpDataBase> _Nonnull)withDatabaseCrypto:(id<DatabaseCrypto> _Nonnull)databaseCrypto;

/**
 * 
 * Sets the maximum number of transaction logs to be returned by database
 * 
 * @param count transaction log count
 * @return this database
 * 
 * 
 */
- (id<McbpDataBase> _Nonnull)withMaxTransactionLogsCount:(int32_t)count;

/**
 * 
 * Sets the optional helper to support database upgrade.
 * 
 * @param databaseUpgradeHelper the databaseUpgradeHelper implementation
 * @return this database
 * 
 * 
 */
- (id<McbpDataBase> _Nonnull)usingOptionalDatabaseUpgradeHelper:(id<DatabaseUpgradeHelper> _Nullable)databaseUpgradeHelper;

/**
 * 
 * Sets the optional tamper detection service of database.
 * 
 * @param securityIncidentService the securityIncidentService implementation
 * @return this database
 * 
 * 
 */
- (id<McbpDataBase> _Nonnull)usingOptionalSecurityIncidentService:(id<SecurityIncidentService> _Nullable)securityIncidentService;

/**
 * 
 * get timestamp  for the SUK matching the suk id and card id
 * 
 * @param cardId unique identifier for the profile
 * @param keyId  unique identifier of SUK
 * @return time stamp as String.
 * 
 * 
 */
- (NSString* _Nullable)getTransactionCredentialTimeStampForCardId:(NSString* _Nonnull)cardId
                                                            keyId:(NSString* _Nonnull)keyId;

@end
