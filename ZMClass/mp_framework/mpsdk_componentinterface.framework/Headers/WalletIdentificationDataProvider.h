/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from WalletIdentificationDataProvider.djinni

#import <Foundation/Foundation.h>
@class WalletDekEncryptedData;
@class WalletDekEncryptedData;


/**
 * Auto-generated Djinni interface for ::mpsdk::componentinterface::crypto::WalletIdentificationDataProvider_t
 * 
 * Allows the SDK to request sensitive information from the Wallet in order to perform a rollover
 * of the Wallet Data key
 * 
 */
@protocol WalletIdentificationDataProvider

/**
 * 
 * Allow SDK access to payment app instance id
 * 
 * @return the saved Payment App Instance Id value
 * 
 * 
 */
- (NSData* _Nullable)getPaymentAppInstanceId;

/**
 * 
 * Allow SDK access to Payment App Provider id
 * 
 * @return the saved Payment App Provider Id value
 * 
 * 
 */
- (NSData* _Nullable)getPaymentAppProviderId;

/**
 * 
 * Allow SDK access to protected device fingerprint
 * 
 * @return the saved protected Device Fingerprint value
 * 
 * 
 */
- (WalletDekEncryptedData* _Nullable)getEncryptedDeviceFingerPrint;

/**
 * 
 * Wallet is looking after the data but the SDK must have the ability to
 * rollover the wallet data and to switch to a new key
 * 
 * @param newKeyEncryptedDeviceFingerPrint provides the Wallet with a new device fingerprint
 * that is protected with the new key
 * 
 * 
 */
- (void)onKeyRollover:(WalletDekEncryptedData* _Nonnull)newKeyEncryptedDeviceFingerPrint;

@end
