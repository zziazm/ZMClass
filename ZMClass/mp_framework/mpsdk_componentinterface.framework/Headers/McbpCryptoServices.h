/**
 *  Copyright (c) 2018, MasterCard International Incorporated and/or its
 *  affiliates. All rights reserved.
 *
 *  The contents of this file may only be used subject to the MasterCard
 *  Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 *  Materials License.
 *
 *  Please refer to the file LICENSE.TXT for full details.
 *
 *  TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 *  WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 *  MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 **/

// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from McbpCryptoServices.djinni

#import <Foundation/Foundation.h>
@protocol KeyLifeCycleManager;
@protocol DatabaseCrypto;
@protocol DatabaseUpgradeCrypto;
@protocol RemoteManagementCrypto;
@protocol TransactionCrypto;
@protocol WalletDataCrypto;
@protocol DatabaseCrypto;
@protocol DatabaseUpgradeCrypto;
@protocol KeyLifeCycleManager;
@protocol RemoteManagementCrypto;
@protocol TransactionCrypto;
@protocol WalletDataCrypto;


/** Auto-generated Djinni interface for ::mpsdk::componentinterface::crypto::McbpCryptoServices_t */
@protocol McbpCryptoServices

/**
 * 
 * Retrieve the Key Lifecycle Manager for Database Storage key
 * 
 * @return the Key Lifecycle Manager for Database Storage key
 * 
 * 
 */
- (id<KeyLifeCycleManager> _Nonnull)getDatabaseStorageKeyManager;

/**
 * 
 * Retrieve the Key Lifecycle Manager for Database Storage MAC key
 * 
 * @return the Key Lifecycle Manager for Database Storage MAC key
 * 
 * 
 */
- (id<KeyLifeCycleManager> _Nonnull)getDatabaseStorageMacKeyManager;

/**
 * 
 * Retrieve the Key Lifecycle Manager for Local Data Encryption Key
 * 
 * @return the Key Lifecycle Manager for Local Data Encryption Key
 * 
 * 
 */
- (id<KeyLifeCycleManager> _Nonnull)getLocalDataEncryptionKeyManager;

/**
 * 
 * Retrieve the Key Lifecycle Manager for Remote Management key encryption key
 * 
 * @return the Key Lifecycle Manager for Remote Management key encryption key
 * 
 * 
 */
- (id<KeyLifeCycleManager> _Nonnull)getRemoteManagementKeyEncryptionKeyManager;

/**
 * 
 * Retrieve the Key Lifecycle Manager for Wallet Data encryption key
 * 
 * @return the Key Lifecycle Manager for Wallet Data encryption key
 * 
 * 
 */
- (id<KeyLifeCycleManager> _Nonnull)getWalletDataEncryptionKeyManager;

/**
 * 
 * Retrieve an implementation of the Database crypto
 * 
 * @return database crypto
 * 
 * 
 */
- (id<DatabaseCrypto> _Nonnull)getDatabaseCrypto;

/**
 * 
 * Retrieve an implementation of the Database upgrade crypto
 * 
 * @return database upgrade crypto
 * 
 * 
 */
- (id<DatabaseUpgradeCrypto> _Nonnull)getDatabaseUpgradeCrypto;

/**
 * 
 * Retrieve an implementation of the Remote Management crypto
 * 
 * @return Remote Management crypto
 * 
 * 
 */
- (id<RemoteManagementCrypto> _Nonnull)getRemoteManagementCrypto;

/**
 * 
 * Retrieve an implementation of the transaction crypto
 * 
 * @return transaction crypto
 * 
 * 
 */
- (id<TransactionCrypto> _Nonnull)getTransactionCrypto;

/**
 * 
 * Retrieve an implementation of the Wallet Data crypto
 * 
 * @return Wallet Data crypto
 * 
 * 
 */
- (id<WalletDataCrypto> _Nonnull)getWalletDataCrypto;

/**
 * 
 * Wipes all keys and other parameters stored by Crypto Engine
 * 
 * @return true if success
 * 
 * 
 */
- (BOOL)wipeCryptoParameters;

@end
